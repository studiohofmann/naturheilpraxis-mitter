/* eslint-disable */

/* prettier-ignore */

/* THIS FILE IS AUTOGENERATED. CHANGES WILL BE LOST ON SUBSEQUENT RUNS. */

declare namespace Queries {

type Maybe<T> = T | null;
type InputMaybe<T> = T | null;
type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
type Scalars = {
  /** The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID. */
  ID: string;
  /** The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text. */
  String: string;
  /** The `Boolean` scalar type represents `true` or `false`. */
  Boolean: boolean;
  /** The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. */
  Int: number;
  /** The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). */
  Float: number;
  /** A date string, such as 2007-12-03, compliant with the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */
  Date: string;
  GatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData;
  /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  JSON: Record<string, unknown>;
};

type AVIFOptions = {
  readonly lossless: InputMaybe<Scalars['Boolean']>;
  readonly quality: InputMaybe<Scalars['Int']>;
  readonly speed: InputMaybe<Scalars['Int']>;
};

type BlurredOptions = {
  /** Force the output format for the low-res preview. Default is to use the same format as the input. You should rarely need to change this */
  readonly toFormat: InputMaybe<ImageFormat>;
  /** Width of the generated low-res preview. Default is 20px */
  readonly width: InputMaybe<Scalars['Int']>;
};

type BooleanQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Boolean']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
  readonly ne: InputMaybe<Scalars['Boolean']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
};

type ContentfulAdresse = ContentfulEntry & ContentfulReference & Node & {
  readonly adresse: Maybe<ContentfulAdresseAdresse>;
  readonly children: ReadonlyArray<Node>;
  readonly contentful_id: Scalars['String'];
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly node_locale: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly spaceId: Maybe<Scalars['String']>;
  readonly sys: Maybe<ContentfulAdresseSys>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type ContentfulAdresse_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type ContentfulAdresse_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type ContentfulAdresseAdresse = {
  readonly raw: Maybe<Scalars['String']>;
};

type ContentfulAdresseAdresseFieldSelector = {
  readonly raw: InputMaybe<FieldSelectorEnum>;
};

type ContentfulAdresseAdresseFilterInput = {
  readonly raw: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulAdresseAdresseSortInput = {
  readonly raw: InputMaybe<SortOrderEnum>;
};

type ContentfulAdresseConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulAdresseEdge>;
  readonly group: ReadonlyArray<ContentfulAdresseGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulAdresse>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulAdresseConnection_distinctArgs = {
  field: ContentfulAdresseFieldSelector;
};


type ContentfulAdresseConnection_groupArgs = {
  field: ContentfulAdresseFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulAdresseConnection_maxArgs = {
  field: ContentfulAdresseFieldSelector;
};


type ContentfulAdresseConnection_minArgs = {
  field: ContentfulAdresseFieldSelector;
};


type ContentfulAdresseConnection_sumArgs = {
  field: ContentfulAdresseFieldSelector;
};

type ContentfulAdresseEdge = {
  readonly next: Maybe<ContentfulAdresse>;
  readonly node: ContentfulAdresse;
  readonly previous: Maybe<ContentfulAdresse>;
};

type ContentfulAdresseFieldSelector = {
  readonly adresse: InputMaybe<ContentfulAdresseAdresseFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly contentful_id: InputMaybe<FieldSelectorEnum>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly node_locale: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly spaceId: InputMaybe<FieldSelectorEnum>;
  readonly sys: InputMaybe<ContentfulAdresseSysFieldSelector>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type ContentfulAdresseFilterInput = {
  readonly adresse: InputMaybe<ContentfulAdresseAdresseFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly spaceId: InputMaybe<StringQueryOperatorInput>;
  readonly sys: InputMaybe<ContentfulAdresseSysFilterInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type ContentfulAdresseGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulAdresseEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulAdresseGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulAdresse>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulAdresseGroupConnection_distinctArgs = {
  field: ContentfulAdresseFieldSelector;
};


type ContentfulAdresseGroupConnection_groupArgs = {
  field: ContentfulAdresseFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulAdresseGroupConnection_maxArgs = {
  field: ContentfulAdresseFieldSelector;
};


type ContentfulAdresseGroupConnection_minArgs = {
  field: ContentfulAdresseFieldSelector;
};


type ContentfulAdresseGroupConnection_sumArgs = {
  field: ContentfulAdresseFieldSelector;
};

type ContentfulAdresseSortInput = {
  readonly adresse: InputMaybe<ContentfulAdresseAdresseSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly contentful_id: InputMaybe<SortOrderEnum>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly node_locale: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly spaceId: InputMaybe<SortOrderEnum>;
  readonly sys: InputMaybe<ContentfulAdresseSysSortInput>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type ContentfulAdresseSys = {
  readonly contentType: Maybe<ContentfulAdresseSysContentType>;
  readonly revision: Maybe<Scalars['Int']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulAdresseSysContentType = {
  readonly sys: Maybe<ContentfulAdresseSysContentTypeSys>;
};

type ContentfulAdresseSysContentTypeFieldSelector = {
  readonly sys: InputMaybe<ContentfulAdresseSysContentTypeSysFieldSelector>;
};

type ContentfulAdresseSysContentTypeFilterInput = {
  readonly sys: InputMaybe<ContentfulAdresseSysContentTypeSysFilterInput>;
};

type ContentfulAdresseSysContentTypeSortInput = {
  readonly sys: InputMaybe<ContentfulAdresseSysContentTypeSysSortInput>;
};

type ContentfulAdresseSysContentTypeSys = {
  readonly id: Maybe<Scalars['String']>;
  readonly linkType: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulAdresseSysContentTypeSysFieldSelector = {
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly linkType: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulAdresseSysContentTypeSysFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly linkType: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulAdresseSysContentTypeSysSortInput = {
  readonly id: InputMaybe<SortOrderEnum>;
  readonly linkType: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulAdresseSysFieldSelector = {
  readonly contentType: InputMaybe<ContentfulAdresseSysContentTypeFieldSelector>;
  readonly revision: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulAdresseSysFilterInput = {
  readonly contentType: InputMaybe<ContentfulAdresseSysContentTypeFilterInput>;
  readonly revision: InputMaybe<IntQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulAdresseSysSortInput = {
  readonly contentType: InputMaybe<ContentfulAdresseSysContentTypeSortInput>;
  readonly revision: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulAktuelles = ContentfulEntry & ContentfulReference & Node & {
  readonly beschreibung: Maybe<contentfulAktuellesBeschreibungTextNode>;
  /** Returns the first child node of type contentfulAktuellesBeschreibungTextNode or null if there are no children of given type on this node */
  readonly childContentfulAktuellesBeschreibungTextNode: Maybe<contentfulAktuellesBeschreibungTextNode>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type contentfulAktuellesBeschreibungTextNode */
  readonly childrenContentfulAktuellesBeschreibungTextNode: Maybe<ReadonlyArray<Maybe<contentfulAktuellesBeschreibungTextNode>>>;
  readonly contentful_id: Scalars['String'];
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly node_locale: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly spaceId: Maybe<Scalars['String']>;
  readonly sys: Maybe<ContentfulAktuellesSys>;
  readonly ueberschrift: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type ContentfulAktuelles_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type ContentfulAktuelles_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type ContentfulAktuellesConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulAktuellesEdge>;
  readonly group: ReadonlyArray<ContentfulAktuellesGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulAktuelles>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulAktuellesConnection_distinctArgs = {
  field: ContentfulAktuellesFieldSelector;
};


type ContentfulAktuellesConnection_groupArgs = {
  field: ContentfulAktuellesFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulAktuellesConnection_maxArgs = {
  field: ContentfulAktuellesFieldSelector;
};


type ContentfulAktuellesConnection_minArgs = {
  field: ContentfulAktuellesFieldSelector;
};


type ContentfulAktuellesConnection_sumArgs = {
  field: ContentfulAktuellesFieldSelector;
};

type ContentfulAktuellesEdge = {
  readonly next: Maybe<ContentfulAktuelles>;
  readonly node: ContentfulAktuelles;
  readonly previous: Maybe<ContentfulAktuelles>;
};

type ContentfulAktuellesFieldSelector = {
  readonly beschreibung: InputMaybe<contentfulAktuellesBeschreibungTextNodeFieldSelector>;
  readonly childContentfulAktuellesBeschreibungTextNode: InputMaybe<contentfulAktuellesBeschreibungTextNodeFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenContentfulAktuellesBeschreibungTextNode: InputMaybe<contentfulAktuellesBeschreibungTextNodeFieldSelector>;
  readonly contentful_id: InputMaybe<FieldSelectorEnum>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly node_locale: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly spaceId: InputMaybe<FieldSelectorEnum>;
  readonly sys: InputMaybe<ContentfulAktuellesSysFieldSelector>;
  readonly ueberschrift: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type ContentfulAktuellesFilterInput = {
  readonly beschreibung: InputMaybe<contentfulAktuellesBeschreibungTextNodeFilterInput>;
  readonly childContentfulAktuellesBeschreibungTextNode: InputMaybe<contentfulAktuellesBeschreibungTextNodeFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenContentfulAktuellesBeschreibungTextNode: InputMaybe<contentfulAktuellesBeschreibungTextNodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly spaceId: InputMaybe<StringQueryOperatorInput>;
  readonly sys: InputMaybe<ContentfulAktuellesSysFilterInput>;
  readonly ueberschrift: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type ContentfulAktuellesGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulAktuellesEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulAktuellesGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulAktuelles>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulAktuellesGroupConnection_distinctArgs = {
  field: ContentfulAktuellesFieldSelector;
};


type ContentfulAktuellesGroupConnection_groupArgs = {
  field: ContentfulAktuellesFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulAktuellesGroupConnection_maxArgs = {
  field: ContentfulAktuellesFieldSelector;
};


type ContentfulAktuellesGroupConnection_minArgs = {
  field: ContentfulAktuellesFieldSelector;
};


type ContentfulAktuellesGroupConnection_sumArgs = {
  field: ContentfulAktuellesFieldSelector;
};

type ContentfulAktuellesSortInput = {
  readonly beschreibung: InputMaybe<contentfulAktuellesBeschreibungTextNodeSortInput>;
  readonly childContentfulAktuellesBeschreibungTextNode: InputMaybe<contentfulAktuellesBeschreibungTextNodeSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenContentfulAktuellesBeschreibungTextNode: InputMaybe<contentfulAktuellesBeschreibungTextNodeSortInput>;
  readonly contentful_id: InputMaybe<SortOrderEnum>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly node_locale: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly spaceId: InputMaybe<SortOrderEnum>;
  readonly sys: InputMaybe<ContentfulAktuellesSysSortInput>;
  readonly ueberschrift: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type ContentfulAktuellesSys = {
  readonly contentType: Maybe<ContentfulAktuellesSysContentType>;
  readonly revision: Maybe<Scalars['Int']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulAktuellesSysContentType = {
  readonly sys: Maybe<ContentfulAktuellesSysContentTypeSys>;
};

type ContentfulAktuellesSysContentTypeFieldSelector = {
  readonly sys: InputMaybe<ContentfulAktuellesSysContentTypeSysFieldSelector>;
};

type ContentfulAktuellesSysContentTypeFilterInput = {
  readonly sys: InputMaybe<ContentfulAktuellesSysContentTypeSysFilterInput>;
};

type ContentfulAktuellesSysContentTypeSortInput = {
  readonly sys: InputMaybe<ContentfulAktuellesSysContentTypeSysSortInput>;
};

type ContentfulAktuellesSysContentTypeSys = {
  readonly id: Maybe<Scalars['String']>;
  readonly linkType: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulAktuellesSysContentTypeSysFieldSelector = {
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly linkType: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulAktuellesSysContentTypeSysFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly linkType: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulAktuellesSysContentTypeSysSortInput = {
  readonly id: InputMaybe<SortOrderEnum>;
  readonly linkType: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulAktuellesSysFieldSelector = {
  readonly contentType: InputMaybe<ContentfulAktuellesSysContentTypeFieldSelector>;
  readonly revision: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulAktuellesSysFilterInput = {
  readonly contentType: InputMaybe<ContentfulAktuellesSysContentTypeFilterInput>;
  readonly revision: InputMaybe<IntQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulAktuellesSysSortInput = {
  readonly contentType: InputMaybe<ContentfulAktuellesSysContentTypeSortInput>;
  readonly revision: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulAnfahrt = ContentfulEntry & ContentfulReference & Node & {
  readonly beschreibung: Maybe<contentfulAnfahrtBeschreibungTextNode>;
  /** Returns the first child node of type contentfulAnfahrtBeschreibungTextNode or null if there are no children of given type on this node */
  readonly childContentfulAnfahrtBeschreibungTextNode: Maybe<contentfulAnfahrtBeschreibungTextNode>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type contentfulAnfahrtBeschreibungTextNode */
  readonly childrenContentfulAnfahrtBeschreibungTextNode: Maybe<ReadonlyArray<Maybe<contentfulAnfahrtBeschreibungTextNode>>>;
  readonly contentful_id: Scalars['String'];
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly node_locale: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly spaceId: Maybe<Scalars['String']>;
  readonly sys: Maybe<ContentfulAnfahrtSys>;
  readonly ueberschrift: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type ContentfulAnfahrt_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type ContentfulAnfahrt_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type ContentfulAnfahrtConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulAnfahrtEdge>;
  readonly group: ReadonlyArray<ContentfulAnfahrtGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulAnfahrt>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulAnfahrtConnection_distinctArgs = {
  field: ContentfulAnfahrtFieldSelector;
};


type ContentfulAnfahrtConnection_groupArgs = {
  field: ContentfulAnfahrtFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulAnfahrtConnection_maxArgs = {
  field: ContentfulAnfahrtFieldSelector;
};


type ContentfulAnfahrtConnection_minArgs = {
  field: ContentfulAnfahrtFieldSelector;
};


type ContentfulAnfahrtConnection_sumArgs = {
  field: ContentfulAnfahrtFieldSelector;
};

type ContentfulAnfahrtEdge = {
  readonly next: Maybe<ContentfulAnfahrt>;
  readonly node: ContentfulAnfahrt;
  readonly previous: Maybe<ContentfulAnfahrt>;
};

type ContentfulAnfahrtFieldSelector = {
  readonly beschreibung: InputMaybe<contentfulAnfahrtBeschreibungTextNodeFieldSelector>;
  readonly childContentfulAnfahrtBeschreibungTextNode: InputMaybe<contentfulAnfahrtBeschreibungTextNodeFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenContentfulAnfahrtBeschreibungTextNode: InputMaybe<contentfulAnfahrtBeschreibungTextNodeFieldSelector>;
  readonly contentful_id: InputMaybe<FieldSelectorEnum>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly node_locale: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly spaceId: InputMaybe<FieldSelectorEnum>;
  readonly sys: InputMaybe<ContentfulAnfahrtSysFieldSelector>;
  readonly ueberschrift: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type ContentfulAnfahrtFilterInput = {
  readonly beschreibung: InputMaybe<contentfulAnfahrtBeschreibungTextNodeFilterInput>;
  readonly childContentfulAnfahrtBeschreibungTextNode: InputMaybe<contentfulAnfahrtBeschreibungTextNodeFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenContentfulAnfahrtBeschreibungTextNode: InputMaybe<contentfulAnfahrtBeschreibungTextNodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly spaceId: InputMaybe<StringQueryOperatorInput>;
  readonly sys: InputMaybe<ContentfulAnfahrtSysFilterInput>;
  readonly ueberschrift: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type ContentfulAnfahrtGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulAnfahrtEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulAnfahrtGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulAnfahrt>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulAnfahrtGroupConnection_distinctArgs = {
  field: ContentfulAnfahrtFieldSelector;
};


type ContentfulAnfahrtGroupConnection_groupArgs = {
  field: ContentfulAnfahrtFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulAnfahrtGroupConnection_maxArgs = {
  field: ContentfulAnfahrtFieldSelector;
};


type ContentfulAnfahrtGroupConnection_minArgs = {
  field: ContentfulAnfahrtFieldSelector;
};


type ContentfulAnfahrtGroupConnection_sumArgs = {
  field: ContentfulAnfahrtFieldSelector;
};

type ContentfulAnfahrtSortInput = {
  readonly beschreibung: InputMaybe<contentfulAnfahrtBeschreibungTextNodeSortInput>;
  readonly childContentfulAnfahrtBeschreibungTextNode: InputMaybe<contentfulAnfahrtBeschreibungTextNodeSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenContentfulAnfahrtBeschreibungTextNode: InputMaybe<contentfulAnfahrtBeschreibungTextNodeSortInput>;
  readonly contentful_id: InputMaybe<SortOrderEnum>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly node_locale: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly spaceId: InputMaybe<SortOrderEnum>;
  readonly sys: InputMaybe<ContentfulAnfahrtSysSortInput>;
  readonly ueberschrift: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type ContentfulAnfahrtSys = {
  readonly contentType: Maybe<ContentfulAnfahrtSysContentType>;
  readonly revision: Maybe<Scalars['Int']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulAnfahrtSysContentType = {
  readonly sys: Maybe<ContentfulAnfahrtSysContentTypeSys>;
};

type ContentfulAnfahrtSysContentTypeFieldSelector = {
  readonly sys: InputMaybe<ContentfulAnfahrtSysContentTypeSysFieldSelector>;
};

type ContentfulAnfahrtSysContentTypeFilterInput = {
  readonly sys: InputMaybe<ContentfulAnfahrtSysContentTypeSysFilterInput>;
};

type ContentfulAnfahrtSysContentTypeSortInput = {
  readonly sys: InputMaybe<ContentfulAnfahrtSysContentTypeSysSortInput>;
};

type ContentfulAnfahrtSysContentTypeSys = {
  readonly id: Maybe<Scalars['String']>;
  readonly linkType: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulAnfahrtSysContentTypeSysFieldSelector = {
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly linkType: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulAnfahrtSysContentTypeSysFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly linkType: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulAnfahrtSysContentTypeSysSortInput = {
  readonly id: InputMaybe<SortOrderEnum>;
  readonly linkType: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulAnfahrtSysFieldSelector = {
  readonly contentType: InputMaybe<ContentfulAnfahrtSysContentTypeFieldSelector>;
  readonly revision: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulAnfahrtSysFilterInput = {
  readonly contentType: InputMaybe<ContentfulAnfahrtSysContentTypeFilterInput>;
  readonly revision: InputMaybe<IntQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulAnfahrtSysSortInput = {
  readonly contentType: InputMaybe<ContentfulAnfahrtSysContentTypeSortInput>;
  readonly revision: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulAsset = ContentfulReference & Node & RemoteFile & {
  readonly children: ReadonlyArray<Node>;
  readonly contentful_id: Scalars['String'];
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly description: Maybe<Scalars['String']>;
  readonly file: Maybe<ContentfulAssetFile>;
  readonly filename: Scalars['String'];
  readonly filesize: Maybe<Scalars['Int']>;
  /** Data used in the <GatsbyImage /> component. See https://gatsby.dev/img for more info. */
  readonly gatsbyImage: Maybe<Scalars['GatsbyImageData']>;
  readonly gatsbyImageData: Maybe<Scalars['GatsbyImageData']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly mimeType: Scalars['String'];
  readonly node_locale: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly placeholderUrl: Maybe<Scalars['String']>;
  readonly publicUrl: Scalars['String'];
  readonly resize: Maybe<RemoteFileResize>;
  readonly size: Maybe<Scalars['Int']>;
  readonly spaceId: Maybe<Scalars['String']>;
  readonly sys: Maybe<ContentfulAssetSys>;
  readonly title: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
  readonly url: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};


type ContentfulAsset_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type ContentfulAsset_gatsbyImageArgs = {
  aspectRatio: InputMaybe<Scalars['Float']>;
  backgroundColor: InputMaybe<Scalars['String']>;
  breakpoints?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  cropFocus: InputMaybe<ReadonlyArray<InputMaybe<RemoteFileCropFocus>>>;
  fit?: InputMaybe<RemoteFileFit>;
  formats?: InputMaybe<ReadonlyArray<RemoteFileFormat>>;
  height: InputMaybe<Scalars['Int']>;
  layout?: InputMaybe<RemoteFileLayout>;
  outputPixelDensities?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  placeholder?: InputMaybe<RemoteFilePlaceholder>;
  quality?: InputMaybe<Scalars['Int']>;
  sizes: InputMaybe<Scalars['String']>;
  width: InputMaybe<Scalars['Int']>;
};


type ContentfulAsset_gatsbyImageDataArgs = {
  aspectRatio: InputMaybe<Scalars['Float']>;
  backgroundColor: InputMaybe<Scalars['String']>;
  breakpoints: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  cornerRadius?: InputMaybe<Scalars['Int']>;
  cropFocus: InputMaybe<ContentfulImageCropFocus>;
  formats?: InputMaybe<ReadonlyArray<InputMaybe<GatsbyImageFormat>>>;
  height: InputMaybe<Scalars['Int']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  layout: InputMaybe<GatsbyImageLayout>;
  outputPixelDensities: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  placeholder: InputMaybe<GatsbyImagePlaceholder>;
  quality: InputMaybe<Scalars['Int']>;
  resizingBehavior: InputMaybe<ImageResizingBehavior>;
  sizes: InputMaybe<Scalars['String']>;
  width: InputMaybe<Scalars['Int']>;
};


type ContentfulAsset_resizeArgs = {
  aspectRatio: InputMaybe<Scalars['Float']>;
  cropFocus: InputMaybe<ReadonlyArray<InputMaybe<RemoteFileCropFocus>>>;
  fit?: InputMaybe<RemoteFileFit>;
  format?: InputMaybe<RemoteFileFormat>;
  height: InputMaybe<Scalars['Int']>;
  quality?: InputMaybe<Scalars['Int']>;
  width: InputMaybe<Scalars['Int']>;
};


type ContentfulAsset_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type ContentfulAssetConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulAssetEdge>;
  readonly group: ReadonlyArray<ContentfulAssetGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulAsset>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulAssetConnection_distinctArgs = {
  field: ContentfulAssetFieldSelector;
};


type ContentfulAssetConnection_groupArgs = {
  field: ContentfulAssetFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulAssetConnection_maxArgs = {
  field: ContentfulAssetFieldSelector;
};


type ContentfulAssetConnection_minArgs = {
  field: ContentfulAssetFieldSelector;
};


type ContentfulAssetConnection_sumArgs = {
  field: ContentfulAssetFieldSelector;
};

type ContentfulAssetEdge = {
  readonly next: Maybe<ContentfulAsset>;
  readonly node: ContentfulAsset;
  readonly previous: Maybe<ContentfulAsset>;
};

type ContentfulAssetFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly contentful_id: InputMaybe<FieldSelectorEnum>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly file: InputMaybe<ContentfulAssetFileFieldSelector>;
  readonly filename: InputMaybe<FieldSelectorEnum>;
  readonly filesize: InputMaybe<FieldSelectorEnum>;
  readonly gatsbyImage: InputMaybe<FieldSelectorEnum>;
  readonly gatsbyImageData: InputMaybe<FieldSelectorEnum>;
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly mimeType: InputMaybe<FieldSelectorEnum>;
  readonly node_locale: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly placeholderUrl: InputMaybe<FieldSelectorEnum>;
  readonly publicUrl: InputMaybe<FieldSelectorEnum>;
  readonly resize: InputMaybe<RemoteFileResizeFieldSelector>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly spaceId: InputMaybe<FieldSelectorEnum>;
  readonly sys: InputMaybe<ContentfulAssetSysFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type ContentfulAssetFile = {
  readonly contentType: Maybe<Scalars['String']>;
  readonly details: Maybe<ContentfulAssetFileDetails>;
  readonly fileName: Maybe<Scalars['String']>;
  readonly url: Maybe<Scalars['String']>;
};

type ContentfulAssetFileDetails = {
  readonly image: Maybe<ContentfulAssetFileDetailsImage>;
  readonly size: Maybe<Scalars['Int']>;
};

type ContentfulAssetFileDetailsFieldSelector = {
  readonly image: InputMaybe<ContentfulAssetFileDetailsImageFieldSelector>;
  readonly size: InputMaybe<FieldSelectorEnum>;
};

type ContentfulAssetFileDetailsFilterInput = {
  readonly image: InputMaybe<ContentfulAssetFileDetailsImageFilterInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
};

type ContentfulAssetFileDetailsImage = {
  readonly height: Maybe<Scalars['Int']>;
  readonly width: Maybe<Scalars['Int']>;
};

type ContentfulAssetFileDetailsImageFieldSelector = {
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type ContentfulAssetFileDetailsImageFilterInput = {
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type ContentfulAssetFileDetailsImageSortInput = {
  readonly height: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type ContentfulAssetFileDetailsSortInput = {
  readonly image: InputMaybe<ContentfulAssetFileDetailsImageSortInput>;
  readonly size: InputMaybe<SortOrderEnum>;
};

type ContentfulAssetFileFieldSelector = {
  readonly contentType: InputMaybe<FieldSelectorEnum>;
  readonly details: InputMaybe<ContentfulAssetFileDetailsFieldSelector>;
  readonly fileName: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
};

type ContentfulAssetFileFilterInput = {
  readonly contentType: InputMaybe<StringQueryOperatorInput>;
  readonly details: InputMaybe<ContentfulAssetFileDetailsFilterInput>;
  readonly fileName: InputMaybe<StringQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulAssetFileSortInput = {
  readonly contentType: InputMaybe<SortOrderEnum>;
  readonly details: InputMaybe<ContentfulAssetFileDetailsSortInput>;
  readonly fileName: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
};

type ContentfulAssetFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly file: InputMaybe<ContentfulAssetFileFilterInput>;
  readonly filename: InputMaybe<StringQueryOperatorInput>;
  readonly filesize: InputMaybe<IntQueryOperatorInput>;
  readonly gatsbyImage: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  readonly gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mimeType: InputMaybe<StringQueryOperatorInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly placeholderUrl: InputMaybe<StringQueryOperatorInput>;
  readonly publicUrl: InputMaybe<StringQueryOperatorInput>;
  readonly resize: InputMaybe<RemoteFileResizeFilterInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly spaceId: InputMaybe<StringQueryOperatorInput>;
  readonly sys: InputMaybe<ContentfulAssetSysFilterInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type ContentfulAssetGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulAssetEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulAssetGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulAsset>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulAssetGroupConnection_distinctArgs = {
  field: ContentfulAssetFieldSelector;
};


type ContentfulAssetGroupConnection_groupArgs = {
  field: ContentfulAssetFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulAssetGroupConnection_maxArgs = {
  field: ContentfulAssetFieldSelector;
};


type ContentfulAssetGroupConnection_minArgs = {
  field: ContentfulAssetFieldSelector;
};


type ContentfulAssetGroupConnection_sumArgs = {
  field: ContentfulAssetFieldSelector;
};

type ContentfulAssetSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly contentful_id: InputMaybe<SortOrderEnum>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly file: InputMaybe<ContentfulAssetFileSortInput>;
  readonly filename: InputMaybe<SortOrderEnum>;
  readonly filesize: InputMaybe<SortOrderEnum>;
  readonly gatsbyImage: InputMaybe<SortOrderEnum>;
  readonly gatsbyImageData: InputMaybe<SortOrderEnum>;
  readonly height: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly mimeType: InputMaybe<SortOrderEnum>;
  readonly node_locale: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly placeholderUrl: InputMaybe<SortOrderEnum>;
  readonly publicUrl: InputMaybe<SortOrderEnum>;
  readonly resize: InputMaybe<RemoteFileResizeSortInput>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly spaceId: InputMaybe<SortOrderEnum>;
  readonly sys: InputMaybe<ContentfulAssetSysSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type ContentfulAssetSys = {
  readonly revision: Maybe<Scalars['Int']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulAssetSysFieldSelector = {
  readonly revision: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulAssetSysFilterInput = {
  readonly revision: InputMaybe<IntQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulAssetSysSortInput = {
  readonly revision: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulBlog = ContentfulEntry & ContentfulReference & Node & {
  readonly beschreibung: Maybe<contentfulBlogBeschreibungTextNode>;
  /** Returns the first child node of type contentfulBlogBeschreibungTextNode or null if there are no children of given type on this node */
  readonly childContentfulBlogBeschreibungTextNode: Maybe<contentfulBlogBeschreibungTextNode>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type contentfulBlogBeschreibungTextNode */
  readonly childrenContentfulBlogBeschreibungTextNode: Maybe<ReadonlyArray<Maybe<contentfulBlogBeschreibungTextNode>>>;
  readonly contentful_id: Scalars['String'];
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly node_locale: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly spaceId: Maybe<Scalars['String']>;
  readonly sys: Maybe<ContentfulBlogSys>;
  readonly ueberschrift: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type ContentfulBlog_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type ContentfulBlog_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type ContentfulBlogConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulBlogEdge>;
  readonly group: ReadonlyArray<ContentfulBlogGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulBlog>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulBlogConnection_distinctArgs = {
  field: ContentfulBlogFieldSelector;
};


type ContentfulBlogConnection_groupArgs = {
  field: ContentfulBlogFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulBlogConnection_maxArgs = {
  field: ContentfulBlogFieldSelector;
};


type ContentfulBlogConnection_minArgs = {
  field: ContentfulBlogFieldSelector;
};


type ContentfulBlogConnection_sumArgs = {
  field: ContentfulBlogFieldSelector;
};

type ContentfulBlogEdge = {
  readonly next: Maybe<ContentfulBlog>;
  readonly node: ContentfulBlog;
  readonly previous: Maybe<ContentfulBlog>;
};

type ContentfulBlogFieldSelector = {
  readonly beschreibung: InputMaybe<contentfulBlogBeschreibungTextNodeFieldSelector>;
  readonly childContentfulBlogBeschreibungTextNode: InputMaybe<contentfulBlogBeschreibungTextNodeFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenContentfulBlogBeschreibungTextNode: InputMaybe<contentfulBlogBeschreibungTextNodeFieldSelector>;
  readonly contentful_id: InputMaybe<FieldSelectorEnum>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly node_locale: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly spaceId: InputMaybe<FieldSelectorEnum>;
  readonly sys: InputMaybe<ContentfulBlogSysFieldSelector>;
  readonly ueberschrift: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type ContentfulBlogFilterInput = {
  readonly beschreibung: InputMaybe<contentfulBlogBeschreibungTextNodeFilterInput>;
  readonly childContentfulBlogBeschreibungTextNode: InputMaybe<contentfulBlogBeschreibungTextNodeFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenContentfulBlogBeschreibungTextNode: InputMaybe<contentfulBlogBeschreibungTextNodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly spaceId: InputMaybe<StringQueryOperatorInput>;
  readonly sys: InputMaybe<ContentfulBlogSysFilterInput>;
  readonly ueberschrift: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type ContentfulBlogGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulBlogEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulBlogGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulBlog>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulBlogGroupConnection_distinctArgs = {
  field: ContentfulBlogFieldSelector;
};


type ContentfulBlogGroupConnection_groupArgs = {
  field: ContentfulBlogFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulBlogGroupConnection_maxArgs = {
  field: ContentfulBlogFieldSelector;
};


type ContentfulBlogGroupConnection_minArgs = {
  field: ContentfulBlogFieldSelector;
};


type ContentfulBlogGroupConnection_sumArgs = {
  field: ContentfulBlogFieldSelector;
};

type ContentfulBlogSortInput = {
  readonly beschreibung: InputMaybe<contentfulBlogBeschreibungTextNodeSortInput>;
  readonly childContentfulBlogBeschreibungTextNode: InputMaybe<contentfulBlogBeschreibungTextNodeSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenContentfulBlogBeschreibungTextNode: InputMaybe<contentfulBlogBeschreibungTextNodeSortInput>;
  readonly contentful_id: InputMaybe<SortOrderEnum>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly node_locale: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly spaceId: InputMaybe<SortOrderEnum>;
  readonly sys: InputMaybe<ContentfulBlogSysSortInput>;
  readonly ueberschrift: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type ContentfulBlogSys = {
  readonly contentType: Maybe<ContentfulBlogSysContentType>;
  readonly revision: Maybe<Scalars['Int']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulBlogSysContentType = {
  readonly sys: Maybe<ContentfulBlogSysContentTypeSys>;
};

type ContentfulBlogSysContentTypeFieldSelector = {
  readonly sys: InputMaybe<ContentfulBlogSysContentTypeSysFieldSelector>;
};

type ContentfulBlogSysContentTypeFilterInput = {
  readonly sys: InputMaybe<ContentfulBlogSysContentTypeSysFilterInput>;
};

type ContentfulBlogSysContentTypeSortInput = {
  readonly sys: InputMaybe<ContentfulBlogSysContentTypeSysSortInput>;
};

type ContentfulBlogSysContentTypeSys = {
  readonly id: Maybe<Scalars['String']>;
  readonly linkType: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulBlogSysContentTypeSysFieldSelector = {
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly linkType: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulBlogSysContentTypeSysFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly linkType: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulBlogSysContentTypeSysSortInput = {
  readonly id: InputMaybe<SortOrderEnum>;
  readonly linkType: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulBlogSysFieldSelector = {
  readonly contentType: InputMaybe<ContentfulBlogSysContentTypeFieldSelector>;
  readonly revision: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulBlogSysFilterInput = {
  readonly contentType: InputMaybe<ContentfulBlogSysContentTypeFilterInput>;
  readonly revision: InputMaybe<IntQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulBlogSysSortInput = {
  readonly contentType: InputMaybe<ContentfulBlogSysContentTypeSortInput>;
  readonly revision: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulBlogpost = ContentfulEntry & ContentfulReference & Node & {
  readonly bild: Maybe<ContentfulAsset>;
  /** Returns the first child node of type contentfulBlogpostTextTextNode or null if there are no children of given type on this node */
  readonly childContentfulBlogpostTextTextNode: Maybe<contentfulBlogpostTextTextNode>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type contentfulBlogpostTextTextNode */
  readonly childrenContentfulBlogpostTextTextNode: Maybe<ReadonlyArray<Maybe<contentfulBlogpostTextTextNode>>>;
  readonly contentful_id: Scalars['String'];
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly datum: Maybe<Scalars['Date']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly node_locale: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly spaceId: Maybe<Scalars['String']>;
  readonly sys: Maybe<ContentfulBlogpostSys>;
  readonly text: Maybe<contentfulBlogpostTextTextNode>;
  readonly ueberschrift: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type ContentfulBlogpost_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type ContentfulBlogpost_datumArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type ContentfulBlogpost_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type ContentfulBlogpostConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulBlogpostEdge>;
  readonly group: ReadonlyArray<ContentfulBlogpostGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulBlogpost>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulBlogpostConnection_distinctArgs = {
  field: ContentfulBlogpostFieldSelector;
};


type ContentfulBlogpostConnection_groupArgs = {
  field: ContentfulBlogpostFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulBlogpostConnection_maxArgs = {
  field: ContentfulBlogpostFieldSelector;
};


type ContentfulBlogpostConnection_minArgs = {
  field: ContentfulBlogpostFieldSelector;
};


type ContentfulBlogpostConnection_sumArgs = {
  field: ContentfulBlogpostFieldSelector;
};

type ContentfulBlogpostEdge = {
  readonly next: Maybe<ContentfulBlogpost>;
  readonly node: ContentfulBlogpost;
  readonly previous: Maybe<ContentfulBlogpost>;
};

type ContentfulBlogpostFieldSelector = {
  readonly bild: InputMaybe<ContentfulAssetFieldSelector>;
  readonly childContentfulBlogpostTextTextNode: InputMaybe<contentfulBlogpostTextTextNodeFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenContentfulBlogpostTextTextNode: InputMaybe<contentfulBlogpostTextTextNodeFieldSelector>;
  readonly contentful_id: InputMaybe<FieldSelectorEnum>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly datum: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly node_locale: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly spaceId: InputMaybe<FieldSelectorEnum>;
  readonly sys: InputMaybe<ContentfulBlogpostSysFieldSelector>;
  readonly text: InputMaybe<contentfulBlogpostTextTextNodeFieldSelector>;
  readonly ueberschrift: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type ContentfulBlogpostFilterInput = {
  readonly bild: InputMaybe<ContentfulAssetFilterInput>;
  readonly childContentfulBlogpostTextTextNode: InputMaybe<contentfulBlogpostTextTextNodeFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenContentfulBlogpostTextTextNode: InputMaybe<contentfulBlogpostTextTextNodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly datum: InputMaybe<DateQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly spaceId: InputMaybe<StringQueryOperatorInput>;
  readonly sys: InputMaybe<ContentfulBlogpostSysFilterInput>;
  readonly text: InputMaybe<contentfulBlogpostTextTextNodeFilterInput>;
  readonly ueberschrift: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type ContentfulBlogpostGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulBlogpostEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulBlogpostGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulBlogpost>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulBlogpostGroupConnection_distinctArgs = {
  field: ContentfulBlogpostFieldSelector;
};


type ContentfulBlogpostGroupConnection_groupArgs = {
  field: ContentfulBlogpostFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulBlogpostGroupConnection_maxArgs = {
  field: ContentfulBlogpostFieldSelector;
};


type ContentfulBlogpostGroupConnection_minArgs = {
  field: ContentfulBlogpostFieldSelector;
};


type ContentfulBlogpostGroupConnection_sumArgs = {
  field: ContentfulBlogpostFieldSelector;
};

type ContentfulBlogpostSortInput = {
  readonly bild: InputMaybe<ContentfulAssetSortInput>;
  readonly childContentfulBlogpostTextTextNode: InputMaybe<contentfulBlogpostTextTextNodeSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenContentfulBlogpostTextTextNode: InputMaybe<contentfulBlogpostTextTextNodeSortInput>;
  readonly contentful_id: InputMaybe<SortOrderEnum>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly datum: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly node_locale: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly spaceId: InputMaybe<SortOrderEnum>;
  readonly sys: InputMaybe<ContentfulBlogpostSysSortInput>;
  readonly text: InputMaybe<contentfulBlogpostTextTextNodeSortInput>;
  readonly ueberschrift: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type ContentfulBlogpostSys = {
  readonly contentType: Maybe<ContentfulBlogpostSysContentType>;
  readonly revision: Maybe<Scalars['Int']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulBlogpostSysContentType = {
  readonly sys: Maybe<ContentfulBlogpostSysContentTypeSys>;
};

type ContentfulBlogpostSysContentTypeFieldSelector = {
  readonly sys: InputMaybe<ContentfulBlogpostSysContentTypeSysFieldSelector>;
};

type ContentfulBlogpostSysContentTypeFilterInput = {
  readonly sys: InputMaybe<ContentfulBlogpostSysContentTypeSysFilterInput>;
};

type ContentfulBlogpostSysContentTypeSortInput = {
  readonly sys: InputMaybe<ContentfulBlogpostSysContentTypeSysSortInput>;
};

type ContentfulBlogpostSysContentTypeSys = {
  readonly id: Maybe<Scalars['String']>;
  readonly linkType: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulBlogpostSysContentTypeSysFieldSelector = {
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly linkType: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulBlogpostSysContentTypeSysFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly linkType: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulBlogpostSysContentTypeSysSortInput = {
  readonly id: InputMaybe<SortOrderEnum>;
  readonly linkType: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulBlogpostSysFieldSelector = {
  readonly contentType: InputMaybe<ContentfulBlogpostSysContentTypeFieldSelector>;
  readonly revision: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulBlogpostSysFilterInput = {
  readonly contentType: InputMaybe<ContentfulBlogpostSysContentTypeFilterInput>;
  readonly revision: InputMaybe<IntQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulBlogpostSysSortInput = {
  readonly contentType: InputMaybe<ContentfulBlogpostSysContentTypeSortInput>;
  readonly revision: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulContentType = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly description: Maybe<Scalars['String']>;
  readonly displayField: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly name: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly sys: Maybe<ContentfulContentTypeSys>;
};

type ContentfulContentTypeConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulContentTypeEdge>;
  readonly group: ReadonlyArray<ContentfulContentTypeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulContentType>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulContentTypeConnection_distinctArgs = {
  field: ContentfulContentTypeFieldSelector;
};


type ContentfulContentTypeConnection_groupArgs = {
  field: ContentfulContentTypeFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulContentTypeConnection_maxArgs = {
  field: ContentfulContentTypeFieldSelector;
};


type ContentfulContentTypeConnection_minArgs = {
  field: ContentfulContentTypeFieldSelector;
};


type ContentfulContentTypeConnection_sumArgs = {
  field: ContentfulContentTypeFieldSelector;
};

type ContentfulContentTypeEdge = {
  readonly next: Maybe<ContentfulContentType>;
  readonly node: ContentfulContentType;
  readonly previous: Maybe<ContentfulContentType>;
};

type ContentfulContentTypeFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly displayField: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly sys: InputMaybe<ContentfulContentTypeSysFieldSelector>;
};

type ContentfulContentTypeFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly displayField: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly sys: InputMaybe<ContentfulContentTypeSysFilterInput>;
};

type ContentfulContentTypeGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulContentTypeEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulContentTypeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulContentType>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulContentTypeGroupConnection_distinctArgs = {
  field: ContentfulContentTypeFieldSelector;
};


type ContentfulContentTypeGroupConnection_groupArgs = {
  field: ContentfulContentTypeFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulContentTypeGroupConnection_maxArgs = {
  field: ContentfulContentTypeFieldSelector;
};


type ContentfulContentTypeGroupConnection_minArgs = {
  field: ContentfulContentTypeFieldSelector;
};


type ContentfulContentTypeGroupConnection_sumArgs = {
  field: ContentfulContentTypeFieldSelector;
};

type ContentfulContentTypeSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly displayField: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly sys: InputMaybe<ContentfulContentTypeSysSortInput>;
};

type ContentfulContentTypeSys = {
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulContentTypeSysFieldSelector = {
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulContentTypeSysFilterInput = {
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulContentTypeSysSortInput = {
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulEntry = {
  readonly children: ReadonlyArray<Node>;
  readonly contentful_id: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly node_locale: Scalars['String'];
  readonly parent: Maybe<Node>;
};

type ContentfulEntryConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulEntryEdge>;
  readonly group: ReadonlyArray<ContentfulEntryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulEntry>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulEntryConnection_distinctArgs = {
  field: ContentfulEntryFieldSelector;
};


type ContentfulEntryConnection_groupArgs = {
  field: ContentfulEntryFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulEntryConnection_maxArgs = {
  field: ContentfulEntryFieldSelector;
};


type ContentfulEntryConnection_minArgs = {
  field: ContentfulEntryFieldSelector;
};


type ContentfulEntryConnection_sumArgs = {
  field: ContentfulEntryFieldSelector;
};

type ContentfulEntryEdge = {
  readonly next: Maybe<ContentfulEntry>;
  readonly node: ContentfulEntry;
  readonly previous: Maybe<ContentfulEntry>;
};

type ContentfulEntryFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly contentful_id: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly node_locale: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type ContentfulEntryFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type ContentfulEntryGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulEntryEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulEntryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulEntry>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulEntryGroupConnection_distinctArgs = {
  field: ContentfulEntryFieldSelector;
};


type ContentfulEntryGroupConnection_groupArgs = {
  field: ContentfulEntryFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulEntryGroupConnection_maxArgs = {
  field: ContentfulEntryFieldSelector;
};


type ContentfulEntryGroupConnection_minArgs = {
  field: ContentfulEntryFieldSelector;
};


type ContentfulEntryGroupConnection_sumArgs = {
  field: ContentfulEntryFieldSelector;
};

type ContentfulEntrySortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly contentful_id: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly node_locale: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type ContentfulFooter = ContentfulEntry & ContentfulReference & Node & {
  readonly children: ReadonlyArray<Node>;
  readonly contentful_id: Scalars['String'];
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly karte: Maybe<ContentfulAsset>;
  readonly node_locale: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly spaceId: Maybe<Scalars['String']>;
  readonly sys: Maybe<ContentfulFooterSys>;
  readonly ueberschrift: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type ContentfulFooter_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type ContentfulFooter_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type ContentfulFooterConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulFooterEdge>;
  readonly group: ReadonlyArray<ContentfulFooterGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulFooter>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulFooterConnection_distinctArgs = {
  field: ContentfulFooterFieldSelector;
};


type ContentfulFooterConnection_groupArgs = {
  field: ContentfulFooterFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulFooterConnection_maxArgs = {
  field: ContentfulFooterFieldSelector;
};


type ContentfulFooterConnection_minArgs = {
  field: ContentfulFooterFieldSelector;
};


type ContentfulFooterConnection_sumArgs = {
  field: ContentfulFooterFieldSelector;
};

type ContentfulFooterEdge = {
  readonly next: Maybe<ContentfulFooter>;
  readonly node: ContentfulFooter;
  readonly previous: Maybe<ContentfulFooter>;
};

type ContentfulFooterFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly contentful_id: InputMaybe<FieldSelectorEnum>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly karte: InputMaybe<ContentfulAssetFieldSelector>;
  readonly node_locale: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly spaceId: InputMaybe<FieldSelectorEnum>;
  readonly sys: InputMaybe<ContentfulFooterSysFieldSelector>;
  readonly ueberschrift: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type ContentfulFooterFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly karte: InputMaybe<ContentfulAssetFilterInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly spaceId: InputMaybe<StringQueryOperatorInput>;
  readonly sys: InputMaybe<ContentfulFooterSysFilterInput>;
  readonly ueberschrift: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type ContentfulFooterGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulFooterEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulFooterGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulFooter>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulFooterGroupConnection_distinctArgs = {
  field: ContentfulFooterFieldSelector;
};


type ContentfulFooterGroupConnection_groupArgs = {
  field: ContentfulFooterFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulFooterGroupConnection_maxArgs = {
  field: ContentfulFooterFieldSelector;
};


type ContentfulFooterGroupConnection_minArgs = {
  field: ContentfulFooterFieldSelector;
};


type ContentfulFooterGroupConnection_sumArgs = {
  field: ContentfulFooterFieldSelector;
};

type ContentfulFooterSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly contentful_id: InputMaybe<SortOrderEnum>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly karte: InputMaybe<ContentfulAssetSortInput>;
  readonly node_locale: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly spaceId: InputMaybe<SortOrderEnum>;
  readonly sys: InputMaybe<ContentfulFooterSysSortInput>;
  readonly ueberschrift: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type ContentfulFooterSys = {
  readonly contentType: Maybe<ContentfulFooterSysContentType>;
  readonly revision: Maybe<Scalars['Int']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulFooterSysContentType = {
  readonly sys: Maybe<ContentfulFooterSysContentTypeSys>;
};

type ContentfulFooterSysContentTypeFieldSelector = {
  readonly sys: InputMaybe<ContentfulFooterSysContentTypeSysFieldSelector>;
};

type ContentfulFooterSysContentTypeFilterInput = {
  readonly sys: InputMaybe<ContentfulFooterSysContentTypeSysFilterInput>;
};

type ContentfulFooterSysContentTypeSortInput = {
  readonly sys: InputMaybe<ContentfulFooterSysContentTypeSysSortInput>;
};

type ContentfulFooterSysContentTypeSys = {
  readonly id: Maybe<Scalars['String']>;
  readonly linkType: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulFooterSysContentTypeSysFieldSelector = {
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly linkType: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulFooterSysContentTypeSysFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly linkType: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulFooterSysContentTypeSysSortInput = {
  readonly id: InputMaybe<SortOrderEnum>;
  readonly linkType: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulFooterSysFieldSelector = {
  readonly contentType: InputMaybe<ContentfulFooterSysContentTypeFieldSelector>;
  readonly revision: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulFooterSysFilterInput = {
  readonly contentType: InputMaybe<ContentfulFooterSysContentTypeFilterInput>;
  readonly revision: InputMaybe<IntQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulFooterSysSortInput = {
  readonly contentType: InputMaybe<ContentfulFooterSysContentTypeSortInput>;
  readonly revision: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulImageCropFocus =
  | 'bottom'
  | 'bottom_right'
  | 'bottom_left'
  | 'center'
  | 'face'
  | 'faces'
  | 'left'
  | 'right'
  | 'top'
  | 'top_left'
  | 'top_right';

type ContentfulImpressum = ContentfulEntry & ContentfulReference & Node & {
  /** Returns the first child node of type contentfulImpressumRechtlichesTextNode or null if there are no children of given type on this node */
  readonly childContentfulImpressumRechtlichesTextNode: Maybe<contentfulImpressumRechtlichesTextNode>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type contentfulImpressumRechtlichesTextNode */
  readonly childrenContentfulImpressumRechtlichesTextNode: Maybe<ReadonlyArray<Maybe<contentfulImpressumRechtlichesTextNode>>>;
  readonly contentful_id: Scalars['String'];
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly id: Scalars['ID'];
  readonly info: Maybe<ContentfulImpressumInfo>;
  readonly internal: Internal;
  readonly node_locale: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly rechtliches: Maybe<contentfulImpressumRechtlichesTextNode>;
  readonly rechtlichesUeberschrift: Maybe<Scalars['String']>;
  readonly spaceId: Maybe<Scalars['String']>;
  readonly sys: Maybe<ContentfulImpressumSys>;
  readonly titel: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type ContentfulImpressum_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type ContentfulImpressum_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type ContentfulImpressumConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulImpressumEdge>;
  readonly group: ReadonlyArray<ContentfulImpressumGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulImpressum>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulImpressumConnection_distinctArgs = {
  field: ContentfulImpressumFieldSelector;
};


type ContentfulImpressumConnection_groupArgs = {
  field: ContentfulImpressumFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulImpressumConnection_maxArgs = {
  field: ContentfulImpressumFieldSelector;
};


type ContentfulImpressumConnection_minArgs = {
  field: ContentfulImpressumFieldSelector;
};


type ContentfulImpressumConnection_sumArgs = {
  field: ContentfulImpressumFieldSelector;
};

type ContentfulImpressumEdge = {
  readonly next: Maybe<ContentfulImpressum>;
  readonly node: ContentfulImpressum;
  readonly previous: Maybe<ContentfulImpressum>;
};

type ContentfulImpressumFieldSelector = {
  readonly childContentfulImpressumRechtlichesTextNode: InputMaybe<contentfulImpressumRechtlichesTextNodeFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenContentfulImpressumRechtlichesTextNode: InputMaybe<contentfulImpressumRechtlichesTextNodeFieldSelector>;
  readonly contentful_id: InputMaybe<FieldSelectorEnum>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly info: InputMaybe<ContentfulImpressumInfoFieldSelector>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly node_locale: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly rechtliches: InputMaybe<contentfulImpressumRechtlichesTextNodeFieldSelector>;
  readonly rechtlichesUeberschrift: InputMaybe<FieldSelectorEnum>;
  readonly spaceId: InputMaybe<FieldSelectorEnum>;
  readonly sys: InputMaybe<ContentfulImpressumSysFieldSelector>;
  readonly titel: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type ContentfulImpressumFilterInput = {
  readonly childContentfulImpressumRechtlichesTextNode: InputMaybe<contentfulImpressumRechtlichesTextNodeFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenContentfulImpressumRechtlichesTextNode: InputMaybe<contentfulImpressumRechtlichesTextNodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly info: InputMaybe<ContentfulImpressumInfoFilterInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly rechtliches: InputMaybe<contentfulImpressumRechtlichesTextNodeFilterInput>;
  readonly rechtlichesUeberschrift: InputMaybe<StringQueryOperatorInput>;
  readonly spaceId: InputMaybe<StringQueryOperatorInput>;
  readonly sys: InputMaybe<ContentfulImpressumSysFilterInput>;
  readonly titel: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type ContentfulImpressumGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulImpressumEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulImpressumGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulImpressum>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulImpressumGroupConnection_distinctArgs = {
  field: ContentfulImpressumFieldSelector;
};


type ContentfulImpressumGroupConnection_groupArgs = {
  field: ContentfulImpressumFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulImpressumGroupConnection_maxArgs = {
  field: ContentfulImpressumFieldSelector;
};


type ContentfulImpressumGroupConnection_minArgs = {
  field: ContentfulImpressumFieldSelector;
};


type ContentfulImpressumGroupConnection_sumArgs = {
  field: ContentfulImpressumFieldSelector;
};

type ContentfulImpressumInfo = {
  readonly raw: Maybe<Scalars['String']>;
};

type ContentfulImpressumInfoFieldSelector = {
  readonly raw: InputMaybe<FieldSelectorEnum>;
};

type ContentfulImpressumInfoFilterInput = {
  readonly raw: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulImpressumInfoSortInput = {
  readonly raw: InputMaybe<SortOrderEnum>;
};

type ContentfulImpressumSortInput = {
  readonly childContentfulImpressumRechtlichesTextNode: InputMaybe<contentfulImpressumRechtlichesTextNodeSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenContentfulImpressumRechtlichesTextNode: InputMaybe<contentfulImpressumRechtlichesTextNodeSortInput>;
  readonly contentful_id: InputMaybe<SortOrderEnum>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly info: InputMaybe<ContentfulImpressumInfoSortInput>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly node_locale: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly rechtliches: InputMaybe<contentfulImpressumRechtlichesTextNodeSortInput>;
  readonly rechtlichesUeberschrift: InputMaybe<SortOrderEnum>;
  readonly spaceId: InputMaybe<SortOrderEnum>;
  readonly sys: InputMaybe<ContentfulImpressumSysSortInput>;
  readonly titel: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type ContentfulImpressumSys = {
  readonly contentType: Maybe<ContentfulImpressumSysContentType>;
  readonly revision: Maybe<Scalars['Int']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulImpressumSysContentType = {
  readonly sys: Maybe<ContentfulImpressumSysContentTypeSys>;
};

type ContentfulImpressumSysContentTypeFieldSelector = {
  readonly sys: InputMaybe<ContentfulImpressumSysContentTypeSysFieldSelector>;
};

type ContentfulImpressumSysContentTypeFilterInput = {
  readonly sys: InputMaybe<ContentfulImpressumSysContentTypeSysFilterInput>;
};

type ContentfulImpressumSysContentTypeSortInput = {
  readonly sys: InputMaybe<ContentfulImpressumSysContentTypeSysSortInput>;
};

type ContentfulImpressumSysContentTypeSys = {
  readonly id: Maybe<Scalars['String']>;
  readonly linkType: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulImpressumSysContentTypeSysFieldSelector = {
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly linkType: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulImpressumSysContentTypeSysFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly linkType: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulImpressumSysContentTypeSysSortInput = {
  readonly id: InputMaybe<SortOrderEnum>;
  readonly linkType: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulImpressumSysFieldSelector = {
  readonly contentType: InputMaybe<ContentfulImpressumSysContentTypeFieldSelector>;
  readonly revision: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulImpressumSysFilterInput = {
  readonly contentType: InputMaybe<ContentfulImpressumSysContentTypeFilterInput>;
  readonly revision: InputMaybe<IntQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulImpressumSysSortInput = {
  readonly contentType: InputMaybe<ContentfulImpressumSysContentTypeSortInput>;
  readonly revision: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulKontakt = ContentfulEntry & ContentfulReference & Node & {
  readonly beschreibung: Maybe<contentfulKontaktBeschreibungTextNode>;
  /** Returns the first child node of type contentfulKontaktBeschreibungTextNode or null if there are no children of given type on this node */
  readonly childContentfulKontaktBeschreibungTextNode: Maybe<contentfulKontaktBeschreibungTextNode>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type contentfulKontaktBeschreibungTextNode */
  readonly childrenContentfulKontaktBeschreibungTextNode: Maybe<ReadonlyArray<Maybe<contentfulKontaktBeschreibungTextNode>>>;
  readonly contentful_id: Scalars['String'];
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly node_locale: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly spaceId: Maybe<Scalars['String']>;
  readonly sys: Maybe<ContentfulKontaktSys>;
  readonly ueberschrift: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type ContentfulKontakt_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type ContentfulKontakt_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type ContentfulKontaktConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulKontaktEdge>;
  readonly group: ReadonlyArray<ContentfulKontaktGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulKontakt>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulKontaktConnection_distinctArgs = {
  field: ContentfulKontaktFieldSelector;
};


type ContentfulKontaktConnection_groupArgs = {
  field: ContentfulKontaktFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulKontaktConnection_maxArgs = {
  field: ContentfulKontaktFieldSelector;
};


type ContentfulKontaktConnection_minArgs = {
  field: ContentfulKontaktFieldSelector;
};


type ContentfulKontaktConnection_sumArgs = {
  field: ContentfulKontaktFieldSelector;
};

type ContentfulKontaktEdge = {
  readonly next: Maybe<ContentfulKontakt>;
  readonly node: ContentfulKontakt;
  readonly previous: Maybe<ContentfulKontakt>;
};

type ContentfulKontaktFieldSelector = {
  readonly beschreibung: InputMaybe<contentfulKontaktBeschreibungTextNodeFieldSelector>;
  readonly childContentfulKontaktBeschreibungTextNode: InputMaybe<contentfulKontaktBeschreibungTextNodeFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenContentfulKontaktBeschreibungTextNode: InputMaybe<contentfulKontaktBeschreibungTextNodeFieldSelector>;
  readonly contentful_id: InputMaybe<FieldSelectorEnum>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly node_locale: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly spaceId: InputMaybe<FieldSelectorEnum>;
  readonly sys: InputMaybe<ContentfulKontaktSysFieldSelector>;
  readonly ueberschrift: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type ContentfulKontaktFilterInput = {
  readonly beschreibung: InputMaybe<contentfulKontaktBeschreibungTextNodeFilterInput>;
  readonly childContentfulKontaktBeschreibungTextNode: InputMaybe<contentfulKontaktBeschreibungTextNodeFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenContentfulKontaktBeschreibungTextNode: InputMaybe<contentfulKontaktBeschreibungTextNodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly spaceId: InputMaybe<StringQueryOperatorInput>;
  readonly sys: InputMaybe<ContentfulKontaktSysFilterInput>;
  readonly ueberschrift: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type ContentfulKontaktGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulKontaktEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulKontaktGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulKontakt>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulKontaktGroupConnection_distinctArgs = {
  field: ContentfulKontaktFieldSelector;
};


type ContentfulKontaktGroupConnection_groupArgs = {
  field: ContentfulKontaktFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulKontaktGroupConnection_maxArgs = {
  field: ContentfulKontaktFieldSelector;
};


type ContentfulKontaktGroupConnection_minArgs = {
  field: ContentfulKontaktFieldSelector;
};


type ContentfulKontaktGroupConnection_sumArgs = {
  field: ContentfulKontaktFieldSelector;
};

type ContentfulKontaktSortInput = {
  readonly beschreibung: InputMaybe<contentfulKontaktBeschreibungTextNodeSortInput>;
  readonly childContentfulKontaktBeschreibungTextNode: InputMaybe<contentfulKontaktBeschreibungTextNodeSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenContentfulKontaktBeschreibungTextNode: InputMaybe<contentfulKontaktBeschreibungTextNodeSortInput>;
  readonly contentful_id: InputMaybe<SortOrderEnum>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly node_locale: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly spaceId: InputMaybe<SortOrderEnum>;
  readonly sys: InputMaybe<ContentfulKontaktSysSortInput>;
  readonly ueberschrift: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type ContentfulKontaktSys = {
  readonly contentType: Maybe<ContentfulKontaktSysContentType>;
  readonly revision: Maybe<Scalars['Int']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulKontaktSysContentType = {
  readonly sys: Maybe<ContentfulKontaktSysContentTypeSys>;
};

type ContentfulKontaktSysContentTypeFieldSelector = {
  readonly sys: InputMaybe<ContentfulKontaktSysContentTypeSysFieldSelector>;
};

type ContentfulKontaktSysContentTypeFilterInput = {
  readonly sys: InputMaybe<ContentfulKontaktSysContentTypeSysFilterInput>;
};

type ContentfulKontaktSysContentTypeSortInput = {
  readonly sys: InputMaybe<ContentfulKontaktSysContentTypeSysSortInput>;
};

type ContentfulKontaktSysContentTypeSys = {
  readonly id: Maybe<Scalars['String']>;
  readonly linkType: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulKontaktSysContentTypeSysFieldSelector = {
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly linkType: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulKontaktSysContentTypeSysFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly linkType: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulKontaktSysContentTypeSysSortInput = {
  readonly id: InputMaybe<SortOrderEnum>;
  readonly linkType: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulKontaktSysFieldSelector = {
  readonly contentType: InputMaybe<ContentfulKontaktSysContentTypeFieldSelector>;
  readonly revision: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulKontaktSysFilterInput = {
  readonly contentType: InputMaybe<ContentfulKontaktSysContentTypeFilterInput>;
  readonly revision: InputMaybe<IntQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulKontaktSysSortInput = {
  readonly contentType: InputMaybe<ContentfulKontaktSysContentTypeSortInput>;
  readonly revision: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulLayout = ContentfulEntry & ContentfulReference & Node & {
  /** Returns the first child node of type contentfulLayoutNewsletterTextTextNode or null if there are no children of given type on this node */
  readonly childContentfulLayoutNewsletterTextTextNode: Maybe<contentfulLayoutNewsletterTextTextNode>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type contentfulLayoutNewsletterTextTextNode */
  readonly childrenContentfulLayoutNewsletterTextTextNode: Maybe<ReadonlyArray<Maybe<contentfulLayoutNewsletterTextTextNode>>>;
  readonly contentful_id: Scalars['String'];
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly menue1: Maybe<Scalars['String']>;
  readonly menue2: Maybe<Scalars['String']>;
  readonly menue3: Maybe<Scalars['String']>;
  readonly menue4: Maybe<Scalars['String']>;
  readonly menue5: Maybe<Scalars['String']>;
  readonly newsletterText: Maybe<contentfulLayoutNewsletterTextTextNode>;
  readonly newsletterUeberschrift: Maybe<Scalars['String']>;
  readonly node_locale: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly spaceId: Maybe<Scalars['String']>;
  readonly sys: Maybe<ContentfulLayoutSys>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type ContentfulLayout_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type ContentfulLayout_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type ContentfulLayoutConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulLayoutEdge>;
  readonly group: ReadonlyArray<ContentfulLayoutGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulLayout>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulLayoutConnection_distinctArgs = {
  field: ContentfulLayoutFieldSelector;
};


type ContentfulLayoutConnection_groupArgs = {
  field: ContentfulLayoutFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulLayoutConnection_maxArgs = {
  field: ContentfulLayoutFieldSelector;
};


type ContentfulLayoutConnection_minArgs = {
  field: ContentfulLayoutFieldSelector;
};


type ContentfulLayoutConnection_sumArgs = {
  field: ContentfulLayoutFieldSelector;
};

type ContentfulLayoutEdge = {
  readonly next: Maybe<ContentfulLayout>;
  readonly node: ContentfulLayout;
  readonly previous: Maybe<ContentfulLayout>;
};

type ContentfulLayoutFieldSelector = {
  readonly childContentfulLayoutNewsletterTextTextNode: InputMaybe<contentfulLayoutNewsletterTextTextNodeFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenContentfulLayoutNewsletterTextTextNode: InputMaybe<contentfulLayoutNewsletterTextTextNodeFieldSelector>;
  readonly contentful_id: InputMaybe<FieldSelectorEnum>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly menue1: InputMaybe<FieldSelectorEnum>;
  readonly menue2: InputMaybe<FieldSelectorEnum>;
  readonly menue3: InputMaybe<FieldSelectorEnum>;
  readonly menue4: InputMaybe<FieldSelectorEnum>;
  readonly menue5: InputMaybe<FieldSelectorEnum>;
  readonly newsletterText: InputMaybe<contentfulLayoutNewsletterTextTextNodeFieldSelector>;
  readonly newsletterUeberschrift: InputMaybe<FieldSelectorEnum>;
  readonly node_locale: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly spaceId: InputMaybe<FieldSelectorEnum>;
  readonly sys: InputMaybe<ContentfulLayoutSysFieldSelector>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type ContentfulLayoutFilterInput = {
  readonly childContentfulLayoutNewsletterTextTextNode: InputMaybe<contentfulLayoutNewsletterTextTextNodeFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenContentfulLayoutNewsletterTextTextNode: InputMaybe<contentfulLayoutNewsletterTextTextNodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly menue1: InputMaybe<StringQueryOperatorInput>;
  readonly menue2: InputMaybe<StringQueryOperatorInput>;
  readonly menue3: InputMaybe<StringQueryOperatorInput>;
  readonly menue4: InputMaybe<StringQueryOperatorInput>;
  readonly menue5: InputMaybe<StringQueryOperatorInput>;
  readonly newsletterText: InputMaybe<contentfulLayoutNewsletterTextTextNodeFilterInput>;
  readonly newsletterUeberschrift: InputMaybe<StringQueryOperatorInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly spaceId: InputMaybe<StringQueryOperatorInput>;
  readonly sys: InputMaybe<ContentfulLayoutSysFilterInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type ContentfulLayoutGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulLayoutEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulLayoutGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulLayout>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulLayoutGroupConnection_distinctArgs = {
  field: ContentfulLayoutFieldSelector;
};


type ContentfulLayoutGroupConnection_groupArgs = {
  field: ContentfulLayoutFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulLayoutGroupConnection_maxArgs = {
  field: ContentfulLayoutFieldSelector;
};


type ContentfulLayoutGroupConnection_minArgs = {
  field: ContentfulLayoutFieldSelector;
};


type ContentfulLayoutGroupConnection_sumArgs = {
  field: ContentfulLayoutFieldSelector;
};

type ContentfulLayoutSortInput = {
  readonly childContentfulLayoutNewsletterTextTextNode: InputMaybe<contentfulLayoutNewsletterTextTextNodeSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenContentfulLayoutNewsletterTextTextNode: InputMaybe<contentfulLayoutNewsletterTextTextNodeSortInput>;
  readonly contentful_id: InputMaybe<SortOrderEnum>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly menue1: InputMaybe<SortOrderEnum>;
  readonly menue2: InputMaybe<SortOrderEnum>;
  readonly menue3: InputMaybe<SortOrderEnum>;
  readonly menue4: InputMaybe<SortOrderEnum>;
  readonly menue5: InputMaybe<SortOrderEnum>;
  readonly newsletterText: InputMaybe<contentfulLayoutNewsletterTextTextNodeSortInput>;
  readonly newsletterUeberschrift: InputMaybe<SortOrderEnum>;
  readonly node_locale: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly spaceId: InputMaybe<SortOrderEnum>;
  readonly sys: InputMaybe<ContentfulLayoutSysSortInput>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type ContentfulLayoutSys = {
  readonly contentType: Maybe<ContentfulLayoutSysContentType>;
  readonly revision: Maybe<Scalars['Int']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulLayoutSysContentType = {
  readonly sys: Maybe<ContentfulLayoutSysContentTypeSys>;
};

type ContentfulLayoutSysContentTypeFieldSelector = {
  readonly sys: InputMaybe<ContentfulLayoutSysContentTypeSysFieldSelector>;
};

type ContentfulLayoutSysContentTypeFilterInput = {
  readonly sys: InputMaybe<ContentfulLayoutSysContentTypeSysFilterInput>;
};

type ContentfulLayoutSysContentTypeSortInput = {
  readonly sys: InputMaybe<ContentfulLayoutSysContentTypeSysSortInput>;
};

type ContentfulLayoutSysContentTypeSys = {
  readonly id: Maybe<Scalars['String']>;
  readonly linkType: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulLayoutSysContentTypeSysFieldSelector = {
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly linkType: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulLayoutSysContentTypeSysFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly linkType: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulLayoutSysContentTypeSysSortInput = {
  readonly id: InputMaybe<SortOrderEnum>;
  readonly linkType: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulLayoutSysFieldSelector = {
  readonly contentType: InputMaybe<ContentfulLayoutSysContentTypeFieldSelector>;
  readonly revision: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulLayoutSysFilterInput = {
  readonly contentType: InputMaybe<ContentfulLayoutSysContentTypeFilterInput>;
  readonly revision: InputMaybe<IntQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulLayoutSysSortInput = {
  readonly contentType: InputMaybe<ContentfulLayoutSysContentTypeSortInput>;
  readonly revision: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulLeistungen = ContentfulEntry & ContentfulReference & Node & {
  readonly beschreibung: Maybe<contentfulLeistungenBeschreibungTextNode>;
  /** Returns the first child node of type contentfulLeistungenBeschreibungTextNode or null if there are no children of given type on this node */
  readonly childContentfulLeistungenBeschreibungTextNode: Maybe<contentfulLeistungenBeschreibungTextNode>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type contentfulLeistungenBeschreibungTextNode */
  readonly childrenContentfulLeistungenBeschreibungTextNode: Maybe<ReadonlyArray<Maybe<contentfulLeistungenBeschreibungTextNode>>>;
  readonly contentful_id: Scalars['String'];
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly node_locale: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly spaceId: Maybe<Scalars['String']>;
  readonly sys: Maybe<ContentfulLeistungenSys>;
  readonly ueberschrift: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type ContentfulLeistungen_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type ContentfulLeistungen_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type ContentfulLeistungenConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulLeistungenEdge>;
  readonly group: ReadonlyArray<ContentfulLeistungenGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulLeistungen>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulLeistungenConnection_distinctArgs = {
  field: ContentfulLeistungenFieldSelector;
};


type ContentfulLeistungenConnection_groupArgs = {
  field: ContentfulLeistungenFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulLeistungenConnection_maxArgs = {
  field: ContentfulLeistungenFieldSelector;
};


type ContentfulLeistungenConnection_minArgs = {
  field: ContentfulLeistungenFieldSelector;
};


type ContentfulLeistungenConnection_sumArgs = {
  field: ContentfulLeistungenFieldSelector;
};

type ContentfulLeistungenEdge = {
  readonly next: Maybe<ContentfulLeistungen>;
  readonly node: ContentfulLeistungen;
  readonly previous: Maybe<ContentfulLeistungen>;
};

type ContentfulLeistungenFieldSelector = {
  readonly beschreibung: InputMaybe<contentfulLeistungenBeschreibungTextNodeFieldSelector>;
  readonly childContentfulLeistungenBeschreibungTextNode: InputMaybe<contentfulLeistungenBeschreibungTextNodeFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenContentfulLeistungenBeschreibungTextNode: InputMaybe<contentfulLeistungenBeschreibungTextNodeFieldSelector>;
  readonly contentful_id: InputMaybe<FieldSelectorEnum>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly node_locale: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly spaceId: InputMaybe<FieldSelectorEnum>;
  readonly sys: InputMaybe<ContentfulLeistungenSysFieldSelector>;
  readonly ueberschrift: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type ContentfulLeistungenFilterInput = {
  readonly beschreibung: InputMaybe<contentfulLeistungenBeschreibungTextNodeFilterInput>;
  readonly childContentfulLeistungenBeschreibungTextNode: InputMaybe<contentfulLeistungenBeschreibungTextNodeFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenContentfulLeistungenBeschreibungTextNode: InputMaybe<contentfulLeistungenBeschreibungTextNodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly spaceId: InputMaybe<StringQueryOperatorInput>;
  readonly sys: InputMaybe<ContentfulLeistungenSysFilterInput>;
  readonly ueberschrift: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type ContentfulLeistungenGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulLeistungenEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulLeistungenGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulLeistungen>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulLeistungenGroupConnection_distinctArgs = {
  field: ContentfulLeistungenFieldSelector;
};


type ContentfulLeistungenGroupConnection_groupArgs = {
  field: ContentfulLeistungenFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulLeistungenGroupConnection_maxArgs = {
  field: ContentfulLeistungenFieldSelector;
};


type ContentfulLeistungenGroupConnection_minArgs = {
  field: ContentfulLeistungenFieldSelector;
};


type ContentfulLeistungenGroupConnection_sumArgs = {
  field: ContentfulLeistungenFieldSelector;
};

type ContentfulLeistungenSortInput = {
  readonly beschreibung: InputMaybe<contentfulLeistungenBeschreibungTextNodeSortInput>;
  readonly childContentfulLeistungenBeschreibungTextNode: InputMaybe<contentfulLeistungenBeschreibungTextNodeSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenContentfulLeistungenBeschreibungTextNode: InputMaybe<contentfulLeistungenBeschreibungTextNodeSortInput>;
  readonly contentful_id: InputMaybe<SortOrderEnum>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly node_locale: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly spaceId: InputMaybe<SortOrderEnum>;
  readonly sys: InputMaybe<ContentfulLeistungenSysSortInput>;
  readonly ueberschrift: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type ContentfulLeistungenSys = {
  readonly contentType: Maybe<ContentfulLeistungenSysContentType>;
  readonly revision: Maybe<Scalars['Int']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulLeistungenSysContentType = {
  readonly sys: Maybe<ContentfulLeistungenSysContentTypeSys>;
};

type ContentfulLeistungenSysContentTypeFieldSelector = {
  readonly sys: InputMaybe<ContentfulLeistungenSysContentTypeSysFieldSelector>;
};

type ContentfulLeistungenSysContentTypeFilterInput = {
  readonly sys: InputMaybe<ContentfulLeistungenSysContentTypeSysFilterInput>;
};

type ContentfulLeistungenSysContentTypeSortInput = {
  readonly sys: InputMaybe<ContentfulLeistungenSysContentTypeSysSortInput>;
};

type ContentfulLeistungenSysContentTypeSys = {
  readonly id: Maybe<Scalars['String']>;
  readonly linkType: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulLeistungenSysContentTypeSysFieldSelector = {
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly linkType: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulLeistungenSysContentTypeSysFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly linkType: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulLeistungenSysContentTypeSysSortInput = {
  readonly id: InputMaybe<SortOrderEnum>;
  readonly linkType: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulLeistungenSysFieldSelector = {
  readonly contentType: InputMaybe<ContentfulLeistungenSysContentTypeFieldSelector>;
  readonly revision: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulLeistungenSysFilterInput = {
  readonly contentType: InputMaybe<ContentfulLeistungenSysContentTypeFilterInput>;
  readonly revision: InputMaybe<IntQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulLeistungenSysSortInput = {
  readonly contentType: InputMaybe<ContentfulLeistungenSysContentTypeSortInput>;
  readonly revision: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulLeistungenpost = ContentfulEntry & ContentfulReference & Node & {
  /** Returns the first child node of type contentfulLeistungenpostTextTextNode or null if there are no children of given type on this node */
  readonly childContentfulLeistungenpostTextTextNode: Maybe<contentfulLeistungenpostTextTextNode>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type contentfulLeistungenpostTextTextNode */
  readonly childrenContentfulLeistungenpostTextTextNode: Maybe<ReadonlyArray<Maybe<contentfulLeistungenpostTextTextNode>>>;
  readonly contentful_id: Scalars['String'];
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly node_locale: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly reihenfolge: Maybe<Scalars['Int']>;
  readonly spaceId: Maybe<Scalars['String']>;
  readonly sys: Maybe<ContentfulLeistungenpostSys>;
  readonly text: Maybe<contentfulLeistungenpostTextTextNode>;
  readonly ueberschrift: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type ContentfulLeistungenpost_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type ContentfulLeistungenpost_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type ContentfulLeistungenpostConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulLeistungenpostEdge>;
  readonly group: ReadonlyArray<ContentfulLeistungenpostGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulLeistungenpost>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulLeistungenpostConnection_distinctArgs = {
  field: ContentfulLeistungenpostFieldSelector;
};


type ContentfulLeistungenpostConnection_groupArgs = {
  field: ContentfulLeistungenpostFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulLeistungenpostConnection_maxArgs = {
  field: ContentfulLeistungenpostFieldSelector;
};


type ContentfulLeistungenpostConnection_minArgs = {
  field: ContentfulLeistungenpostFieldSelector;
};


type ContentfulLeistungenpostConnection_sumArgs = {
  field: ContentfulLeistungenpostFieldSelector;
};

type ContentfulLeistungenpostEdge = {
  readonly next: Maybe<ContentfulLeistungenpost>;
  readonly node: ContentfulLeistungenpost;
  readonly previous: Maybe<ContentfulLeistungenpost>;
};

type ContentfulLeistungenpostFieldSelector = {
  readonly childContentfulLeistungenpostTextTextNode: InputMaybe<contentfulLeistungenpostTextTextNodeFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenContentfulLeistungenpostTextTextNode: InputMaybe<contentfulLeistungenpostTextTextNodeFieldSelector>;
  readonly contentful_id: InputMaybe<FieldSelectorEnum>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly node_locale: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly reihenfolge: InputMaybe<FieldSelectorEnum>;
  readonly spaceId: InputMaybe<FieldSelectorEnum>;
  readonly sys: InputMaybe<ContentfulLeistungenpostSysFieldSelector>;
  readonly text: InputMaybe<contentfulLeistungenpostTextTextNodeFieldSelector>;
  readonly ueberschrift: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type ContentfulLeistungenpostFilterInput = {
  readonly childContentfulLeistungenpostTextTextNode: InputMaybe<contentfulLeistungenpostTextTextNodeFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenContentfulLeistungenpostTextTextNode: InputMaybe<contentfulLeistungenpostTextTextNodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly reihenfolge: InputMaybe<IntQueryOperatorInput>;
  readonly spaceId: InputMaybe<StringQueryOperatorInput>;
  readonly sys: InputMaybe<ContentfulLeistungenpostSysFilterInput>;
  readonly text: InputMaybe<contentfulLeistungenpostTextTextNodeFilterInput>;
  readonly ueberschrift: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type ContentfulLeistungenpostGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulLeistungenpostEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulLeistungenpostGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulLeistungenpost>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulLeistungenpostGroupConnection_distinctArgs = {
  field: ContentfulLeistungenpostFieldSelector;
};


type ContentfulLeistungenpostGroupConnection_groupArgs = {
  field: ContentfulLeistungenpostFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulLeistungenpostGroupConnection_maxArgs = {
  field: ContentfulLeistungenpostFieldSelector;
};


type ContentfulLeistungenpostGroupConnection_minArgs = {
  field: ContentfulLeistungenpostFieldSelector;
};


type ContentfulLeistungenpostGroupConnection_sumArgs = {
  field: ContentfulLeistungenpostFieldSelector;
};

type ContentfulLeistungenpostSortInput = {
  readonly childContentfulLeistungenpostTextTextNode: InputMaybe<contentfulLeistungenpostTextTextNodeSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenContentfulLeistungenpostTextTextNode: InputMaybe<contentfulLeistungenpostTextTextNodeSortInput>;
  readonly contentful_id: InputMaybe<SortOrderEnum>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly node_locale: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly reihenfolge: InputMaybe<SortOrderEnum>;
  readonly spaceId: InputMaybe<SortOrderEnum>;
  readonly sys: InputMaybe<ContentfulLeistungenpostSysSortInput>;
  readonly text: InputMaybe<contentfulLeistungenpostTextTextNodeSortInput>;
  readonly ueberschrift: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type ContentfulLeistungenpostSys = {
  readonly contentType: Maybe<ContentfulLeistungenpostSysContentType>;
  readonly revision: Maybe<Scalars['Int']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulLeistungenpostSysContentType = {
  readonly sys: Maybe<ContentfulLeistungenpostSysContentTypeSys>;
};

type ContentfulLeistungenpostSysContentTypeFieldSelector = {
  readonly sys: InputMaybe<ContentfulLeistungenpostSysContentTypeSysFieldSelector>;
};

type ContentfulLeistungenpostSysContentTypeFilterInput = {
  readonly sys: InputMaybe<ContentfulLeistungenpostSysContentTypeSysFilterInput>;
};

type ContentfulLeistungenpostSysContentTypeSortInput = {
  readonly sys: InputMaybe<ContentfulLeistungenpostSysContentTypeSysSortInput>;
};

type ContentfulLeistungenpostSysContentTypeSys = {
  readonly id: Maybe<Scalars['String']>;
  readonly linkType: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulLeistungenpostSysContentTypeSysFieldSelector = {
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly linkType: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulLeistungenpostSysContentTypeSysFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly linkType: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulLeistungenpostSysContentTypeSysSortInput = {
  readonly id: InputMaybe<SortOrderEnum>;
  readonly linkType: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulLeistungenpostSysFieldSelector = {
  readonly contentType: InputMaybe<ContentfulLeistungenpostSysContentTypeFieldSelector>;
  readonly revision: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulLeistungenpostSysFilterInput = {
  readonly contentType: InputMaybe<ContentfulLeistungenpostSysContentTypeFilterInput>;
  readonly revision: InputMaybe<IntQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulLeistungenpostSysSortInput = {
  readonly contentType: InputMaybe<ContentfulLeistungenpostSysContentTypeSortInput>;
  readonly revision: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulNewsletter = ContentfulEntry & ContentfulReference & Node & {
  /** Returns the first child node of type contentfulNewsletterTextTextNode or null if there are no children of given type on this node */
  readonly childContentfulNewsletterTextTextNode: Maybe<contentfulNewsletterTextTextNode>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type contentfulNewsletterTextTextNode */
  readonly childrenContentfulNewsletterTextTextNode: Maybe<ReadonlyArray<Maybe<contentfulNewsletterTextTextNode>>>;
  readonly contentful_id: Scalars['String'];
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly node_locale: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly spaceId: Maybe<Scalars['String']>;
  readonly sys: Maybe<ContentfulNewsletterSys>;
  readonly text: Maybe<contentfulNewsletterTextTextNode>;
  readonly titel: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type ContentfulNewsletter_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type ContentfulNewsletter_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type ContentfulNewsletterConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulNewsletterEdge>;
  readonly group: ReadonlyArray<ContentfulNewsletterGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulNewsletter>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulNewsletterConnection_distinctArgs = {
  field: ContentfulNewsletterFieldSelector;
};


type ContentfulNewsletterConnection_groupArgs = {
  field: ContentfulNewsletterFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulNewsletterConnection_maxArgs = {
  field: ContentfulNewsletterFieldSelector;
};


type ContentfulNewsletterConnection_minArgs = {
  field: ContentfulNewsletterFieldSelector;
};


type ContentfulNewsletterConnection_sumArgs = {
  field: ContentfulNewsletterFieldSelector;
};

type ContentfulNewsletterEdge = {
  readonly next: Maybe<ContentfulNewsletter>;
  readonly node: ContentfulNewsletter;
  readonly previous: Maybe<ContentfulNewsletter>;
};

type ContentfulNewsletterFieldSelector = {
  readonly childContentfulNewsletterTextTextNode: InputMaybe<contentfulNewsletterTextTextNodeFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenContentfulNewsletterTextTextNode: InputMaybe<contentfulNewsletterTextTextNodeFieldSelector>;
  readonly contentful_id: InputMaybe<FieldSelectorEnum>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly node_locale: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly spaceId: InputMaybe<FieldSelectorEnum>;
  readonly sys: InputMaybe<ContentfulNewsletterSysFieldSelector>;
  readonly text: InputMaybe<contentfulNewsletterTextTextNodeFieldSelector>;
  readonly titel: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type ContentfulNewsletterFilterInput = {
  readonly childContentfulNewsletterTextTextNode: InputMaybe<contentfulNewsletterTextTextNodeFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenContentfulNewsletterTextTextNode: InputMaybe<contentfulNewsletterTextTextNodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly spaceId: InputMaybe<StringQueryOperatorInput>;
  readonly sys: InputMaybe<ContentfulNewsletterSysFilterInput>;
  readonly text: InputMaybe<contentfulNewsletterTextTextNodeFilterInput>;
  readonly titel: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type ContentfulNewsletterGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulNewsletterEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulNewsletterGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulNewsletter>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulNewsletterGroupConnection_distinctArgs = {
  field: ContentfulNewsletterFieldSelector;
};


type ContentfulNewsletterGroupConnection_groupArgs = {
  field: ContentfulNewsletterFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulNewsletterGroupConnection_maxArgs = {
  field: ContentfulNewsletterFieldSelector;
};


type ContentfulNewsletterGroupConnection_minArgs = {
  field: ContentfulNewsletterFieldSelector;
};


type ContentfulNewsletterGroupConnection_sumArgs = {
  field: ContentfulNewsletterFieldSelector;
};

type ContentfulNewsletterSortInput = {
  readonly childContentfulNewsletterTextTextNode: InputMaybe<contentfulNewsletterTextTextNodeSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenContentfulNewsletterTextTextNode: InputMaybe<contentfulNewsletterTextTextNodeSortInput>;
  readonly contentful_id: InputMaybe<SortOrderEnum>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly node_locale: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly spaceId: InputMaybe<SortOrderEnum>;
  readonly sys: InputMaybe<ContentfulNewsletterSysSortInput>;
  readonly text: InputMaybe<contentfulNewsletterTextTextNodeSortInput>;
  readonly titel: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type ContentfulNewsletterSys = {
  readonly contentType: Maybe<ContentfulNewsletterSysContentType>;
  readonly revision: Maybe<Scalars['Int']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulNewsletterSysContentType = {
  readonly sys: Maybe<ContentfulNewsletterSysContentTypeSys>;
};

type ContentfulNewsletterSysContentTypeFieldSelector = {
  readonly sys: InputMaybe<ContentfulNewsletterSysContentTypeSysFieldSelector>;
};

type ContentfulNewsletterSysContentTypeFilterInput = {
  readonly sys: InputMaybe<ContentfulNewsletterSysContentTypeSysFilterInput>;
};

type ContentfulNewsletterSysContentTypeSortInput = {
  readonly sys: InputMaybe<ContentfulNewsletterSysContentTypeSysSortInput>;
};

type ContentfulNewsletterSysContentTypeSys = {
  readonly id: Maybe<Scalars['String']>;
  readonly linkType: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulNewsletterSysContentTypeSysFieldSelector = {
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly linkType: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulNewsletterSysContentTypeSysFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly linkType: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulNewsletterSysContentTypeSysSortInput = {
  readonly id: InputMaybe<SortOrderEnum>;
  readonly linkType: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulNewsletterSysFieldSelector = {
  readonly contentType: InputMaybe<ContentfulNewsletterSysContentTypeFieldSelector>;
  readonly revision: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulNewsletterSysFilterInput = {
  readonly contentType: InputMaybe<ContentfulNewsletterSysContentTypeFilterInput>;
  readonly revision: InputMaybe<IntQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulNewsletterSysSortInput = {
  readonly contentType: InputMaybe<ContentfulNewsletterSysContentTypeSortInput>;
  readonly revision: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulReference = {
  readonly contentful_id: Scalars['String'];
  readonly id: Scalars['ID'];
};

type ContentfulSchwerpunkte = ContentfulEntry & ContentfulReference & Node & {
  readonly beschreibung: Maybe<contentfulSchwerpunkteBeschreibungTextNode>;
  /** Returns the first child node of type contentfulSchwerpunkteBeschreibungTextNode or null if there are no children of given type on this node */
  readonly childContentfulSchwerpunkteBeschreibungTextNode: Maybe<contentfulSchwerpunkteBeschreibungTextNode>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type contentfulSchwerpunkteBeschreibungTextNode */
  readonly childrenContentfulSchwerpunkteBeschreibungTextNode: Maybe<ReadonlyArray<Maybe<contentfulSchwerpunkteBeschreibungTextNode>>>;
  readonly contentful_id: Scalars['String'];
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly node_locale: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly spaceId: Maybe<Scalars['String']>;
  readonly sys: Maybe<ContentfulSchwerpunkteSys>;
  readonly ueberschrift: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type ContentfulSchwerpunkte_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type ContentfulSchwerpunkte_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type ContentfulSchwerpunkteConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulSchwerpunkteEdge>;
  readonly group: ReadonlyArray<ContentfulSchwerpunkteGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulSchwerpunkte>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulSchwerpunkteConnection_distinctArgs = {
  field: ContentfulSchwerpunkteFieldSelector;
};


type ContentfulSchwerpunkteConnection_groupArgs = {
  field: ContentfulSchwerpunkteFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulSchwerpunkteConnection_maxArgs = {
  field: ContentfulSchwerpunkteFieldSelector;
};


type ContentfulSchwerpunkteConnection_minArgs = {
  field: ContentfulSchwerpunkteFieldSelector;
};


type ContentfulSchwerpunkteConnection_sumArgs = {
  field: ContentfulSchwerpunkteFieldSelector;
};

type ContentfulSchwerpunkteEdge = {
  readonly next: Maybe<ContentfulSchwerpunkte>;
  readonly node: ContentfulSchwerpunkte;
  readonly previous: Maybe<ContentfulSchwerpunkte>;
};

type ContentfulSchwerpunkteFieldSelector = {
  readonly beschreibung: InputMaybe<contentfulSchwerpunkteBeschreibungTextNodeFieldSelector>;
  readonly childContentfulSchwerpunkteBeschreibungTextNode: InputMaybe<contentfulSchwerpunkteBeschreibungTextNodeFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenContentfulSchwerpunkteBeschreibungTextNode: InputMaybe<contentfulSchwerpunkteBeschreibungTextNodeFieldSelector>;
  readonly contentful_id: InputMaybe<FieldSelectorEnum>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly node_locale: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly spaceId: InputMaybe<FieldSelectorEnum>;
  readonly sys: InputMaybe<ContentfulSchwerpunkteSysFieldSelector>;
  readonly ueberschrift: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type ContentfulSchwerpunkteFilterInput = {
  readonly beschreibung: InputMaybe<contentfulSchwerpunkteBeschreibungTextNodeFilterInput>;
  readonly childContentfulSchwerpunkteBeschreibungTextNode: InputMaybe<contentfulSchwerpunkteBeschreibungTextNodeFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenContentfulSchwerpunkteBeschreibungTextNode: InputMaybe<contentfulSchwerpunkteBeschreibungTextNodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly spaceId: InputMaybe<StringQueryOperatorInput>;
  readonly sys: InputMaybe<ContentfulSchwerpunkteSysFilterInput>;
  readonly ueberschrift: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type ContentfulSchwerpunkteGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulSchwerpunkteEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulSchwerpunkteGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulSchwerpunkte>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulSchwerpunkteGroupConnection_distinctArgs = {
  field: ContentfulSchwerpunkteFieldSelector;
};


type ContentfulSchwerpunkteGroupConnection_groupArgs = {
  field: ContentfulSchwerpunkteFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulSchwerpunkteGroupConnection_maxArgs = {
  field: ContentfulSchwerpunkteFieldSelector;
};


type ContentfulSchwerpunkteGroupConnection_minArgs = {
  field: ContentfulSchwerpunkteFieldSelector;
};


type ContentfulSchwerpunkteGroupConnection_sumArgs = {
  field: ContentfulSchwerpunkteFieldSelector;
};

type ContentfulSchwerpunkteSortInput = {
  readonly beschreibung: InputMaybe<contentfulSchwerpunkteBeschreibungTextNodeSortInput>;
  readonly childContentfulSchwerpunkteBeschreibungTextNode: InputMaybe<contentfulSchwerpunkteBeschreibungTextNodeSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenContentfulSchwerpunkteBeschreibungTextNode: InputMaybe<contentfulSchwerpunkteBeschreibungTextNodeSortInput>;
  readonly contentful_id: InputMaybe<SortOrderEnum>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly node_locale: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly spaceId: InputMaybe<SortOrderEnum>;
  readonly sys: InputMaybe<ContentfulSchwerpunkteSysSortInput>;
  readonly ueberschrift: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type ContentfulSchwerpunkteSys = {
  readonly contentType: Maybe<ContentfulSchwerpunkteSysContentType>;
  readonly revision: Maybe<Scalars['Int']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulSchwerpunkteSysContentType = {
  readonly sys: Maybe<ContentfulSchwerpunkteSysContentTypeSys>;
};

type ContentfulSchwerpunkteSysContentTypeFieldSelector = {
  readonly sys: InputMaybe<ContentfulSchwerpunkteSysContentTypeSysFieldSelector>;
};

type ContentfulSchwerpunkteSysContentTypeFilterInput = {
  readonly sys: InputMaybe<ContentfulSchwerpunkteSysContentTypeSysFilterInput>;
};

type ContentfulSchwerpunkteSysContentTypeSortInput = {
  readonly sys: InputMaybe<ContentfulSchwerpunkteSysContentTypeSysSortInput>;
};

type ContentfulSchwerpunkteSysContentTypeSys = {
  readonly id: Maybe<Scalars['String']>;
  readonly linkType: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulSchwerpunkteSysContentTypeSysFieldSelector = {
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly linkType: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulSchwerpunkteSysContentTypeSysFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly linkType: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulSchwerpunkteSysContentTypeSysSortInput = {
  readonly id: InputMaybe<SortOrderEnum>;
  readonly linkType: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulSchwerpunkteSysFieldSelector = {
  readonly contentType: InputMaybe<ContentfulSchwerpunkteSysContentTypeFieldSelector>;
  readonly revision: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulSchwerpunkteSysFilterInput = {
  readonly contentType: InputMaybe<ContentfulSchwerpunkteSysContentTypeFilterInput>;
  readonly revision: InputMaybe<IntQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulSchwerpunkteSysSortInput = {
  readonly contentType: InputMaybe<ContentfulSchwerpunkteSysContentTypeSortInput>;
  readonly revision: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulSchwerpunktepost = ContentfulEntry & ContentfulReference & Node & {
  readonly bild: Maybe<ContentfulAsset>;
  /** Returns the first child node of type contentfulSchwerpunktepostTextTextNode or null if there are no children of given type on this node */
  readonly childContentfulSchwerpunktepostTextTextNode: Maybe<contentfulSchwerpunktepostTextTextNode>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type contentfulSchwerpunktepostTextTextNode */
  readonly childrenContentfulSchwerpunktepostTextTextNode: Maybe<ReadonlyArray<Maybe<contentfulSchwerpunktepostTextTextNode>>>;
  readonly contentful_id: Scalars['String'];
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly node_locale: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly reihenfolge: Maybe<Scalars['Int']>;
  readonly spaceId: Maybe<Scalars['String']>;
  readonly sys: Maybe<ContentfulSchwerpunktepostSys>;
  readonly text: Maybe<contentfulSchwerpunktepostTextTextNode>;
  readonly ueberschrift: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type ContentfulSchwerpunktepost_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type ContentfulSchwerpunktepost_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type ContentfulSchwerpunktepostConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulSchwerpunktepostEdge>;
  readonly group: ReadonlyArray<ContentfulSchwerpunktepostGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulSchwerpunktepost>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulSchwerpunktepostConnection_distinctArgs = {
  field: ContentfulSchwerpunktepostFieldSelector;
};


type ContentfulSchwerpunktepostConnection_groupArgs = {
  field: ContentfulSchwerpunktepostFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulSchwerpunktepostConnection_maxArgs = {
  field: ContentfulSchwerpunktepostFieldSelector;
};


type ContentfulSchwerpunktepostConnection_minArgs = {
  field: ContentfulSchwerpunktepostFieldSelector;
};


type ContentfulSchwerpunktepostConnection_sumArgs = {
  field: ContentfulSchwerpunktepostFieldSelector;
};

type ContentfulSchwerpunktepostEdge = {
  readonly next: Maybe<ContentfulSchwerpunktepost>;
  readonly node: ContentfulSchwerpunktepost;
  readonly previous: Maybe<ContentfulSchwerpunktepost>;
};

type ContentfulSchwerpunktepostFieldSelector = {
  readonly bild: InputMaybe<ContentfulAssetFieldSelector>;
  readonly childContentfulSchwerpunktepostTextTextNode: InputMaybe<contentfulSchwerpunktepostTextTextNodeFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenContentfulSchwerpunktepostTextTextNode: InputMaybe<contentfulSchwerpunktepostTextTextNodeFieldSelector>;
  readonly contentful_id: InputMaybe<FieldSelectorEnum>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly node_locale: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly reihenfolge: InputMaybe<FieldSelectorEnum>;
  readonly spaceId: InputMaybe<FieldSelectorEnum>;
  readonly sys: InputMaybe<ContentfulSchwerpunktepostSysFieldSelector>;
  readonly text: InputMaybe<contentfulSchwerpunktepostTextTextNodeFieldSelector>;
  readonly ueberschrift: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type ContentfulSchwerpunktepostFilterInput = {
  readonly bild: InputMaybe<ContentfulAssetFilterInput>;
  readonly childContentfulSchwerpunktepostTextTextNode: InputMaybe<contentfulSchwerpunktepostTextTextNodeFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenContentfulSchwerpunktepostTextTextNode: InputMaybe<contentfulSchwerpunktepostTextTextNodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly reihenfolge: InputMaybe<IntQueryOperatorInput>;
  readonly spaceId: InputMaybe<StringQueryOperatorInput>;
  readonly sys: InputMaybe<ContentfulSchwerpunktepostSysFilterInput>;
  readonly text: InputMaybe<contentfulSchwerpunktepostTextTextNodeFilterInput>;
  readonly ueberschrift: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type ContentfulSchwerpunktepostGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulSchwerpunktepostEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulSchwerpunktepostGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulSchwerpunktepost>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulSchwerpunktepostGroupConnection_distinctArgs = {
  field: ContentfulSchwerpunktepostFieldSelector;
};


type ContentfulSchwerpunktepostGroupConnection_groupArgs = {
  field: ContentfulSchwerpunktepostFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulSchwerpunktepostGroupConnection_maxArgs = {
  field: ContentfulSchwerpunktepostFieldSelector;
};


type ContentfulSchwerpunktepostGroupConnection_minArgs = {
  field: ContentfulSchwerpunktepostFieldSelector;
};


type ContentfulSchwerpunktepostGroupConnection_sumArgs = {
  field: ContentfulSchwerpunktepostFieldSelector;
};

type ContentfulSchwerpunktepostSortInput = {
  readonly bild: InputMaybe<ContentfulAssetSortInput>;
  readonly childContentfulSchwerpunktepostTextTextNode: InputMaybe<contentfulSchwerpunktepostTextTextNodeSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenContentfulSchwerpunktepostTextTextNode: InputMaybe<contentfulSchwerpunktepostTextTextNodeSortInput>;
  readonly contentful_id: InputMaybe<SortOrderEnum>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly node_locale: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly reihenfolge: InputMaybe<SortOrderEnum>;
  readonly spaceId: InputMaybe<SortOrderEnum>;
  readonly sys: InputMaybe<ContentfulSchwerpunktepostSysSortInput>;
  readonly text: InputMaybe<contentfulSchwerpunktepostTextTextNodeSortInput>;
  readonly ueberschrift: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type ContentfulSchwerpunktepostSys = {
  readonly contentType: Maybe<ContentfulSchwerpunktepostSysContentType>;
  readonly revision: Maybe<Scalars['Int']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulSchwerpunktepostSysContentType = {
  readonly sys: Maybe<ContentfulSchwerpunktepostSysContentTypeSys>;
};

type ContentfulSchwerpunktepostSysContentTypeFieldSelector = {
  readonly sys: InputMaybe<ContentfulSchwerpunktepostSysContentTypeSysFieldSelector>;
};

type ContentfulSchwerpunktepostSysContentTypeFilterInput = {
  readonly sys: InputMaybe<ContentfulSchwerpunktepostSysContentTypeSysFilterInput>;
};

type ContentfulSchwerpunktepostSysContentTypeSortInput = {
  readonly sys: InputMaybe<ContentfulSchwerpunktepostSysContentTypeSysSortInput>;
};

type ContentfulSchwerpunktepostSysContentTypeSys = {
  readonly id: Maybe<Scalars['String']>;
  readonly linkType: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulSchwerpunktepostSysContentTypeSysFieldSelector = {
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly linkType: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulSchwerpunktepostSysContentTypeSysFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly linkType: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulSchwerpunktepostSysContentTypeSysSortInput = {
  readonly id: InputMaybe<SortOrderEnum>;
  readonly linkType: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulSchwerpunktepostSysFieldSelector = {
  readonly contentType: InputMaybe<ContentfulSchwerpunktepostSysContentTypeFieldSelector>;
  readonly revision: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulSchwerpunktepostSysFilterInput = {
  readonly contentType: InputMaybe<ContentfulSchwerpunktepostSysContentTypeFilterInput>;
  readonly revision: InputMaybe<IntQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulSchwerpunktepostSysSortInput = {
  readonly contentType: InputMaybe<ContentfulSchwerpunktepostSysContentTypeSortInput>;
  readonly revision: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulStartbild = ContentfulEntry & ContentfulReference & Node & {
  readonly bild: Maybe<ContentfulAsset>;
  /** Returns the first child node of type contentfulStartbildTextTextNode or null if there are no children of given type on this node */
  readonly childContentfulStartbildTextTextNode: Maybe<contentfulStartbildTextTextNode>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type contentfulStartbildTextTextNode */
  readonly childrenContentfulStartbildTextTextNode: Maybe<ReadonlyArray<Maybe<contentfulStartbildTextTextNode>>>;
  readonly contentful_id: Scalars['String'];
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly node_locale: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly spaceId: Maybe<Scalars['String']>;
  readonly sys: Maybe<ContentfulStartbildSys>;
  readonly text: Maybe<contentfulStartbildTextTextNode>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type ContentfulStartbild_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type ContentfulStartbild_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type ContentfulStartbildConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulStartbildEdge>;
  readonly group: ReadonlyArray<ContentfulStartbildGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulStartbild>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulStartbildConnection_distinctArgs = {
  field: ContentfulStartbildFieldSelector;
};


type ContentfulStartbildConnection_groupArgs = {
  field: ContentfulStartbildFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulStartbildConnection_maxArgs = {
  field: ContentfulStartbildFieldSelector;
};


type ContentfulStartbildConnection_minArgs = {
  field: ContentfulStartbildFieldSelector;
};


type ContentfulStartbildConnection_sumArgs = {
  field: ContentfulStartbildFieldSelector;
};

type ContentfulStartbildEdge = {
  readonly next: Maybe<ContentfulStartbild>;
  readonly node: ContentfulStartbild;
  readonly previous: Maybe<ContentfulStartbild>;
};

type ContentfulStartbildFieldSelector = {
  readonly bild: InputMaybe<ContentfulAssetFieldSelector>;
  readonly childContentfulStartbildTextTextNode: InputMaybe<contentfulStartbildTextTextNodeFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenContentfulStartbildTextTextNode: InputMaybe<contentfulStartbildTextTextNodeFieldSelector>;
  readonly contentful_id: InputMaybe<FieldSelectorEnum>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly node_locale: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly spaceId: InputMaybe<FieldSelectorEnum>;
  readonly sys: InputMaybe<ContentfulStartbildSysFieldSelector>;
  readonly text: InputMaybe<contentfulStartbildTextTextNodeFieldSelector>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type ContentfulStartbildFilterInput = {
  readonly bild: InputMaybe<ContentfulAssetFilterInput>;
  readonly childContentfulStartbildTextTextNode: InputMaybe<contentfulStartbildTextTextNodeFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenContentfulStartbildTextTextNode: InputMaybe<contentfulStartbildTextTextNodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly spaceId: InputMaybe<StringQueryOperatorInput>;
  readonly sys: InputMaybe<ContentfulStartbildSysFilterInput>;
  readonly text: InputMaybe<contentfulStartbildTextTextNodeFilterInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type ContentfulStartbildGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulStartbildEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulStartbildGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulStartbild>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulStartbildGroupConnection_distinctArgs = {
  field: ContentfulStartbildFieldSelector;
};


type ContentfulStartbildGroupConnection_groupArgs = {
  field: ContentfulStartbildFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulStartbildGroupConnection_maxArgs = {
  field: ContentfulStartbildFieldSelector;
};


type ContentfulStartbildGroupConnection_minArgs = {
  field: ContentfulStartbildFieldSelector;
};


type ContentfulStartbildGroupConnection_sumArgs = {
  field: ContentfulStartbildFieldSelector;
};

type ContentfulStartbildSortInput = {
  readonly bild: InputMaybe<ContentfulAssetSortInput>;
  readonly childContentfulStartbildTextTextNode: InputMaybe<contentfulStartbildTextTextNodeSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenContentfulStartbildTextTextNode: InputMaybe<contentfulStartbildTextTextNodeSortInput>;
  readonly contentful_id: InputMaybe<SortOrderEnum>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly node_locale: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly spaceId: InputMaybe<SortOrderEnum>;
  readonly sys: InputMaybe<ContentfulStartbildSysSortInput>;
  readonly text: InputMaybe<contentfulStartbildTextTextNodeSortInput>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type ContentfulStartbildSys = {
  readonly contentType: Maybe<ContentfulStartbildSysContentType>;
  readonly revision: Maybe<Scalars['Int']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulStartbildSysContentType = {
  readonly sys: Maybe<ContentfulStartbildSysContentTypeSys>;
};

type ContentfulStartbildSysContentTypeFieldSelector = {
  readonly sys: InputMaybe<ContentfulStartbildSysContentTypeSysFieldSelector>;
};

type ContentfulStartbildSysContentTypeFilterInput = {
  readonly sys: InputMaybe<ContentfulStartbildSysContentTypeSysFilterInput>;
};

type ContentfulStartbildSysContentTypeSortInput = {
  readonly sys: InputMaybe<ContentfulStartbildSysContentTypeSysSortInput>;
};

type ContentfulStartbildSysContentTypeSys = {
  readonly id: Maybe<Scalars['String']>;
  readonly linkType: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulStartbildSysContentTypeSysFieldSelector = {
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly linkType: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulStartbildSysContentTypeSysFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly linkType: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulStartbildSysContentTypeSysSortInput = {
  readonly id: InputMaybe<SortOrderEnum>;
  readonly linkType: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulStartbildSysFieldSelector = {
  readonly contentType: InputMaybe<ContentfulStartbildSysContentTypeFieldSelector>;
  readonly revision: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulStartbildSysFilterInput = {
  readonly contentType: InputMaybe<ContentfulStartbildSysContentTypeFilterInput>;
  readonly revision: InputMaybe<IntQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulStartbildSysSortInput = {
  readonly contentType: InputMaybe<ContentfulStartbildSysContentTypeSortInput>;
  readonly revision: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulTermin = ContentfulEntry & ContentfulReference & Node & {
  readonly beschreibung: Maybe<contentfulTerminBeschreibungTextNode>;
  readonly button: Maybe<contentfulTerminButtonTextNode>;
  readonly button1: Maybe<Scalars['String']>;
  readonly button2: Maybe<Scalars['String']>;
  readonly button3: Maybe<Scalars['String']>;
  /** Returns the first child node of type contentfulTerminBeschreibungTextNode or null if there are no children of given type on this node */
  readonly childContentfulTerminBeschreibungTextNode: Maybe<contentfulTerminBeschreibungTextNode>;
  /** Returns the first child node of type contentfulTerminButtonTextNode or null if there are no children of given type on this node */
  readonly childContentfulTerminButtonTextNode: Maybe<contentfulTerminButtonTextNode>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type contentfulTerminBeschreibungTextNode */
  readonly childrenContentfulTerminBeschreibungTextNode: Maybe<ReadonlyArray<Maybe<contentfulTerminBeschreibungTextNode>>>;
  /** Returns all children nodes filtered by type contentfulTerminButtonTextNode */
  readonly childrenContentfulTerminButtonTextNode: Maybe<ReadonlyArray<Maybe<contentfulTerminButtonTextNode>>>;
  readonly contentful_id: Scalars['String'];
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly node_locale: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly spaceId: Maybe<Scalars['String']>;
  readonly sys: Maybe<ContentfulTerminSys>;
  readonly ueberschrift: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type ContentfulTermin_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type ContentfulTermin_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type ContentfulTerminConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulTerminEdge>;
  readonly group: ReadonlyArray<ContentfulTerminGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulTermin>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulTerminConnection_distinctArgs = {
  field: ContentfulTerminFieldSelector;
};


type ContentfulTerminConnection_groupArgs = {
  field: ContentfulTerminFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulTerminConnection_maxArgs = {
  field: ContentfulTerminFieldSelector;
};


type ContentfulTerminConnection_minArgs = {
  field: ContentfulTerminFieldSelector;
};


type ContentfulTerminConnection_sumArgs = {
  field: ContentfulTerminFieldSelector;
};

type ContentfulTerminEdge = {
  readonly next: Maybe<ContentfulTermin>;
  readonly node: ContentfulTermin;
  readonly previous: Maybe<ContentfulTermin>;
};

type ContentfulTerminFieldSelector = {
  readonly beschreibung: InputMaybe<contentfulTerminBeschreibungTextNodeFieldSelector>;
  readonly button: InputMaybe<contentfulTerminButtonTextNodeFieldSelector>;
  readonly button1: InputMaybe<FieldSelectorEnum>;
  readonly button2: InputMaybe<FieldSelectorEnum>;
  readonly button3: InputMaybe<FieldSelectorEnum>;
  readonly childContentfulTerminBeschreibungTextNode: InputMaybe<contentfulTerminBeschreibungTextNodeFieldSelector>;
  readonly childContentfulTerminButtonTextNode: InputMaybe<contentfulTerminButtonTextNodeFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenContentfulTerminBeschreibungTextNode: InputMaybe<contentfulTerminBeschreibungTextNodeFieldSelector>;
  readonly childrenContentfulTerminButtonTextNode: InputMaybe<contentfulTerminButtonTextNodeFieldSelector>;
  readonly contentful_id: InputMaybe<FieldSelectorEnum>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly node_locale: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly spaceId: InputMaybe<FieldSelectorEnum>;
  readonly sys: InputMaybe<ContentfulTerminSysFieldSelector>;
  readonly ueberschrift: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type ContentfulTerminFilterInput = {
  readonly beschreibung: InputMaybe<contentfulTerminBeschreibungTextNodeFilterInput>;
  readonly button: InputMaybe<contentfulTerminButtonTextNodeFilterInput>;
  readonly button1: InputMaybe<StringQueryOperatorInput>;
  readonly button2: InputMaybe<StringQueryOperatorInput>;
  readonly button3: InputMaybe<StringQueryOperatorInput>;
  readonly childContentfulTerminBeschreibungTextNode: InputMaybe<contentfulTerminBeschreibungTextNodeFilterInput>;
  readonly childContentfulTerminButtonTextNode: InputMaybe<contentfulTerminButtonTextNodeFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenContentfulTerminBeschreibungTextNode: InputMaybe<contentfulTerminBeschreibungTextNodeFilterListInput>;
  readonly childrenContentfulTerminButtonTextNode: InputMaybe<contentfulTerminButtonTextNodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly spaceId: InputMaybe<StringQueryOperatorInput>;
  readonly sys: InputMaybe<ContentfulTerminSysFilterInput>;
  readonly ueberschrift: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type ContentfulTerminGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulTerminEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulTerminGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulTermin>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulTerminGroupConnection_distinctArgs = {
  field: ContentfulTerminFieldSelector;
};


type ContentfulTerminGroupConnection_groupArgs = {
  field: ContentfulTerminFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulTerminGroupConnection_maxArgs = {
  field: ContentfulTerminFieldSelector;
};


type ContentfulTerminGroupConnection_minArgs = {
  field: ContentfulTerminFieldSelector;
};


type ContentfulTerminGroupConnection_sumArgs = {
  field: ContentfulTerminFieldSelector;
};

type ContentfulTerminSortInput = {
  readonly beschreibung: InputMaybe<contentfulTerminBeschreibungTextNodeSortInput>;
  readonly button: InputMaybe<contentfulTerminButtonTextNodeSortInput>;
  readonly button1: InputMaybe<SortOrderEnum>;
  readonly button2: InputMaybe<SortOrderEnum>;
  readonly button3: InputMaybe<SortOrderEnum>;
  readonly childContentfulTerminBeschreibungTextNode: InputMaybe<contentfulTerminBeschreibungTextNodeSortInput>;
  readonly childContentfulTerminButtonTextNode: InputMaybe<contentfulTerminButtonTextNodeSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenContentfulTerminBeschreibungTextNode: InputMaybe<contentfulTerminBeschreibungTextNodeSortInput>;
  readonly childrenContentfulTerminButtonTextNode: InputMaybe<contentfulTerminButtonTextNodeSortInput>;
  readonly contentful_id: InputMaybe<SortOrderEnum>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly node_locale: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly spaceId: InputMaybe<SortOrderEnum>;
  readonly sys: InputMaybe<ContentfulTerminSysSortInput>;
  readonly ueberschrift: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type ContentfulTerminSys = {
  readonly contentType: Maybe<ContentfulTerminSysContentType>;
  readonly revision: Maybe<Scalars['Int']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulTerminSysContentType = {
  readonly sys: Maybe<ContentfulTerminSysContentTypeSys>;
};

type ContentfulTerminSysContentTypeFieldSelector = {
  readonly sys: InputMaybe<ContentfulTerminSysContentTypeSysFieldSelector>;
};

type ContentfulTerminSysContentTypeFilterInput = {
  readonly sys: InputMaybe<ContentfulTerminSysContentTypeSysFilterInput>;
};

type ContentfulTerminSysContentTypeSortInput = {
  readonly sys: InputMaybe<ContentfulTerminSysContentTypeSysSortInput>;
};

type ContentfulTerminSysContentTypeSys = {
  readonly id: Maybe<Scalars['String']>;
  readonly linkType: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulTerminSysContentTypeSysFieldSelector = {
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly linkType: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulTerminSysContentTypeSysFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly linkType: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulTerminSysContentTypeSysSortInput = {
  readonly id: InputMaybe<SortOrderEnum>;
  readonly linkType: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulTerminSysFieldSelector = {
  readonly contentType: InputMaybe<ContentfulTerminSysContentTypeFieldSelector>;
  readonly revision: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulTerminSysFilterInput = {
  readonly contentType: InputMaybe<ContentfulTerminSysContentTypeFilterInput>;
  readonly revision: InputMaybe<IntQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulTerminSysSortInput = {
  readonly contentType: InputMaybe<ContentfulTerminSysContentTypeSortInput>;
  readonly revision: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulTherapienpost = ContentfulEntry & ContentfulReference & Node & {
  readonly children: ReadonlyArray<Node>;
  readonly contentful_id: Scalars['String'];
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly node_locale: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly spaceId: Maybe<Scalars['String']>;
  readonly sys: Maybe<ContentfulTherapienpostSys>;
  readonly ueberschrift: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type ContentfulTherapienpost_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type ContentfulTherapienpost_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type ContentfulTherapienpostConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulTherapienpostEdge>;
  readonly group: ReadonlyArray<ContentfulTherapienpostGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulTherapienpost>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulTherapienpostConnection_distinctArgs = {
  field: ContentfulTherapienpostFieldSelector;
};


type ContentfulTherapienpostConnection_groupArgs = {
  field: ContentfulTherapienpostFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulTherapienpostConnection_maxArgs = {
  field: ContentfulTherapienpostFieldSelector;
};


type ContentfulTherapienpostConnection_minArgs = {
  field: ContentfulTherapienpostFieldSelector;
};


type ContentfulTherapienpostConnection_sumArgs = {
  field: ContentfulTherapienpostFieldSelector;
};

type ContentfulTherapienpostEdge = {
  readonly next: Maybe<ContentfulTherapienpost>;
  readonly node: ContentfulTherapienpost;
  readonly previous: Maybe<ContentfulTherapienpost>;
};

type ContentfulTherapienpostFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly contentful_id: InputMaybe<FieldSelectorEnum>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly node_locale: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly spaceId: InputMaybe<FieldSelectorEnum>;
  readonly sys: InputMaybe<ContentfulTherapienpostSysFieldSelector>;
  readonly ueberschrift: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type ContentfulTherapienpostFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly spaceId: InputMaybe<StringQueryOperatorInput>;
  readonly sys: InputMaybe<ContentfulTherapienpostSysFilterInput>;
  readonly ueberschrift: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type ContentfulTherapienpostGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulTherapienpostEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulTherapienpostGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulTherapienpost>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulTherapienpostGroupConnection_distinctArgs = {
  field: ContentfulTherapienpostFieldSelector;
};


type ContentfulTherapienpostGroupConnection_groupArgs = {
  field: ContentfulTherapienpostFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulTherapienpostGroupConnection_maxArgs = {
  field: ContentfulTherapienpostFieldSelector;
};


type ContentfulTherapienpostGroupConnection_minArgs = {
  field: ContentfulTherapienpostFieldSelector;
};


type ContentfulTherapienpostGroupConnection_sumArgs = {
  field: ContentfulTherapienpostFieldSelector;
};

type ContentfulTherapienpostSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly contentful_id: InputMaybe<SortOrderEnum>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly node_locale: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly spaceId: InputMaybe<SortOrderEnum>;
  readonly sys: InputMaybe<ContentfulTherapienpostSysSortInput>;
  readonly ueberschrift: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type ContentfulTherapienpostSys = {
  readonly contentType: Maybe<ContentfulTherapienpostSysContentType>;
  readonly revision: Maybe<Scalars['Int']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulTherapienpostSysContentType = {
  readonly sys: Maybe<ContentfulTherapienpostSysContentTypeSys>;
};

type ContentfulTherapienpostSysContentTypeFieldSelector = {
  readonly sys: InputMaybe<ContentfulTherapienpostSysContentTypeSysFieldSelector>;
};

type ContentfulTherapienpostSysContentTypeFilterInput = {
  readonly sys: InputMaybe<ContentfulTherapienpostSysContentTypeSysFilterInput>;
};

type ContentfulTherapienpostSysContentTypeSortInput = {
  readonly sys: InputMaybe<ContentfulTherapienpostSysContentTypeSysSortInput>;
};

type ContentfulTherapienpostSysContentTypeSys = {
  readonly id: Maybe<Scalars['String']>;
  readonly linkType: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulTherapienpostSysContentTypeSysFieldSelector = {
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly linkType: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulTherapienpostSysContentTypeSysFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly linkType: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulTherapienpostSysContentTypeSysSortInput = {
  readonly id: InputMaybe<SortOrderEnum>;
  readonly linkType: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulTherapienpostSysFieldSelector = {
  readonly contentType: InputMaybe<ContentfulTherapienpostSysContentTypeFieldSelector>;
  readonly revision: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulTherapienpostSysFilterInput = {
  readonly contentType: InputMaybe<ContentfulTherapienpostSysContentTypeFilterInput>;
  readonly revision: InputMaybe<IntQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulTherapienpostSysSortInput = {
  readonly contentType: InputMaybe<ContentfulTherapienpostSysContentTypeSortInput>;
  readonly revision: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulUebermich = ContentfulEntry & ContentfulReference & Node & {
  readonly bild: Maybe<ContentfulAsset>;
  /** Returns the first child node of type contentfulUebermichTextTextNode or null if there are no children of given type on this node */
  readonly childContentfulUebermichTextTextNode: Maybe<contentfulUebermichTextTextNode>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type contentfulUebermichTextTextNode */
  readonly childrenContentfulUebermichTextTextNode: Maybe<ReadonlyArray<Maybe<contentfulUebermichTextTextNode>>>;
  readonly contentful_id: Scalars['String'];
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly node_locale: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly spaceId: Maybe<Scalars['String']>;
  readonly sys: Maybe<ContentfulUebermichSys>;
  readonly text: Maybe<contentfulUebermichTextTextNode>;
  readonly ueberschrift: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type ContentfulUebermich_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type ContentfulUebermich_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type ContentfulUebermichConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulUebermichEdge>;
  readonly group: ReadonlyArray<ContentfulUebermichGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulUebermich>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulUebermichConnection_distinctArgs = {
  field: ContentfulUebermichFieldSelector;
};


type ContentfulUebermichConnection_groupArgs = {
  field: ContentfulUebermichFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulUebermichConnection_maxArgs = {
  field: ContentfulUebermichFieldSelector;
};


type ContentfulUebermichConnection_minArgs = {
  field: ContentfulUebermichFieldSelector;
};


type ContentfulUebermichConnection_sumArgs = {
  field: ContentfulUebermichFieldSelector;
};

type ContentfulUebermichEdge = {
  readonly next: Maybe<ContentfulUebermich>;
  readonly node: ContentfulUebermich;
  readonly previous: Maybe<ContentfulUebermich>;
};

type ContentfulUebermichFieldSelector = {
  readonly bild: InputMaybe<ContentfulAssetFieldSelector>;
  readonly childContentfulUebermichTextTextNode: InputMaybe<contentfulUebermichTextTextNodeFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenContentfulUebermichTextTextNode: InputMaybe<contentfulUebermichTextTextNodeFieldSelector>;
  readonly contentful_id: InputMaybe<FieldSelectorEnum>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly node_locale: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly spaceId: InputMaybe<FieldSelectorEnum>;
  readonly sys: InputMaybe<ContentfulUebermichSysFieldSelector>;
  readonly text: InputMaybe<contentfulUebermichTextTextNodeFieldSelector>;
  readonly ueberschrift: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type ContentfulUebermichFilterInput = {
  readonly bild: InputMaybe<ContentfulAssetFilterInput>;
  readonly childContentfulUebermichTextTextNode: InputMaybe<contentfulUebermichTextTextNodeFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenContentfulUebermichTextTextNode: InputMaybe<contentfulUebermichTextTextNodeFilterListInput>;
  readonly contentful_id: InputMaybe<StringQueryOperatorInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly node_locale: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly spaceId: InputMaybe<StringQueryOperatorInput>;
  readonly sys: InputMaybe<ContentfulUebermichSysFilterInput>;
  readonly text: InputMaybe<contentfulUebermichTextTextNodeFilterInput>;
  readonly ueberschrift: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type ContentfulUebermichGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ContentfulUebermichEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ContentfulUebermichGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ContentfulUebermich>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ContentfulUebermichGroupConnection_distinctArgs = {
  field: ContentfulUebermichFieldSelector;
};


type ContentfulUebermichGroupConnection_groupArgs = {
  field: ContentfulUebermichFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ContentfulUebermichGroupConnection_maxArgs = {
  field: ContentfulUebermichFieldSelector;
};


type ContentfulUebermichGroupConnection_minArgs = {
  field: ContentfulUebermichFieldSelector;
};


type ContentfulUebermichGroupConnection_sumArgs = {
  field: ContentfulUebermichFieldSelector;
};

type ContentfulUebermichSortInput = {
  readonly bild: InputMaybe<ContentfulAssetSortInput>;
  readonly childContentfulUebermichTextTextNode: InputMaybe<contentfulUebermichTextTextNodeSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenContentfulUebermichTextTextNode: InputMaybe<contentfulUebermichTextTextNodeSortInput>;
  readonly contentful_id: InputMaybe<SortOrderEnum>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly node_locale: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly spaceId: InputMaybe<SortOrderEnum>;
  readonly sys: InputMaybe<ContentfulUebermichSysSortInput>;
  readonly text: InputMaybe<contentfulUebermichTextTextNodeSortInput>;
  readonly ueberschrift: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type ContentfulUebermichSys = {
  readonly contentType: Maybe<ContentfulUebermichSysContentType>;
  readonly revision: Maybe<Scalars['Int']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulUebermichSysContentType = {
  readonly sys: Maybe<ContentfulUebermichSysContentTypeSys>;
};

type ContentfulUebermichSysContentTypeFieldSelector = {
  readonly sys: InputMaybe<ContentfulUebermichSysContentTypeSysFieldSelector>;
};

type ContentfulUebermichSysContentTypeFilterInput = {
  readonly sys: InputMaybe<ContentfulUebermichSysContentTypeSysFilterInput>;
};

type ContentfulUebermichSysContentTypeSortInput = {
  readonly sys: InputMaybe<ContentfulUebermichSysContentTypeSysSortInput>;
};

type ContentfulUebermichSysContentTypeSys = {
  readonly id: Maybe<Scalars['String']>;
  readonly linkType: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};

type ContentfulUebermichSysContentTypeSysFieldSelector = {
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly linkType: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulUebermichSysContentTypeSysFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly linkType: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulUebermichSysContentTypeSysSortInput = {
  readonly id: InputMaybe<SortOrderEnum>;
  readonly linkType: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type ContentfulUebermichSysFieldSelector = {
  readonly contentType: InputMaybe<ContentfulUebermichSysContentTypeFieldSelector>;
  readonly revision: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type ContentfulUebermichSysFilterInput = {
  readonly contentType: InputMaybe<ContentfulUebermichSysContentTypeFilterInput>;
  readonly revision: InputMaybe<IntQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type ContentfulUebermichSysSortInput = {
  readonly contentType: InputMaybe<ContentfulUebermichSysContentTypeSortInput>;
  readonly revision: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type DateQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Date']>;
  readonly gt: InputMaybe<Scalars['Date']>;
  readonly gte: InputMaybe<Scalars['Date']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>;
  readonly lt: InputMaybe<Scalars['Date']>;
  readonly lte: InputMaybe<Scalars['Date']>;
  readonly ne: InputMaybe<Scalars['Date']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>;
};

type Directory = Node & {
  readonly absolutePath: Scalars['String'];
  readonly accessTime: Scalars['Date'];
  readonly atime: Scalars['Date'];
  readonly atimeMs: Scalars['Float'];
  readonly base: Scalars['String'];
  readonly birthTime: Scalars['Date'];
  /** @deprecated Use `birthTime` instead */
  readonly birthtime: Maybe<Scalars['Date']>;
  /** @deprecated Use `birthTime` instead */
  readonly birthtimeMs: Maybe<Scalars['Float']>;
  readonly changeTime: Scalars['Date'];
  readonly children: ReadonlyArray<Node>;
  readonly ctime: Scalars['Date'];
  readonly ctimeMs: Scalars['Float'];
  readonly dev: Scalars['Int'];
  readonly dir: Scalars['String'];
  readonly ext: Scalars['String'];
  readonly extension: Scalars['String'];
  readonly gid: Scalars['Int'];
  readonly id: Scalars['ID'];
  readonly ino: Scalars['Float'];
  readonly internal: Internal;
  readonly mode: Scalars['Int'];
  readonly modifiedTime: Scalars['Date'];
  readonly mtime: Scalars['Date'];
  readonly mtimeMs: Scalars['Float'];
  readonly name: Scalars['String'];
  readonly nlink: Scalars['Int'];
  readonly parent: Maybe<Node>;
  readonly prettySize: Scalars['String'];
  readonly rdev: Scalars['Int'];
  readonly relativeDirectory: Scalars['String'];
  readonly relativePath: Scalars['String'];
  readonly root: Scalars['String'];
  readonly size: Scalars['Int'];
  readonly sourceInstanceName: Scalars['String'];
  readonly uid: Scalars['Int'];
};


type Directory_accessTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_atimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_birthTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_changeTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_ctimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_modifiedTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_mtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type DirectoryConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<DirectoryEdge>;
  readonly group: ReadonlyArray<DirectoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Directory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type DirectoryConnection_distinctArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryConnection_groupArgs = {
  field: DirectoryFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type DirectoryConnection_maxArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryConnection_minArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryConnection_sumArgs = {
  field: DirectoryFieldSelector;
};

type DirectoryEdge = {
  readonly next: Maybe<Directory>;
  readonly node: Directory;
  readonly previous: Maybe<Directory>;
};

type DirectoryFieldSelector = {
  readonly absolutePath: InputMaybe<FieldSelectorEnum>;
  readonly accessTime: InputMaybe<FieldSelectorEnum>;
  readonly atime: InputMaybe<FieldSelectorEnum>;
  readonly atimeMs: InputMaybe<FieldSelectorEnum>;
  readonly base: InputMaybe<FieldSelectorEnum>;
  readonly birthTime: InputMaybe<FieldSelectorEnum>;
  readonly birthtime: InputMaybe<FieldSelectorEnum>;
  readonly birthtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly changeTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly ctime: InputMaybe<FieldSelectorEnum>;
  readonly ctimeMs: InputMaybe<FieldSelectorEnum>;
  readonly dev: InputMaybe<FieldSelectorEnum>;
  readonly dir: InputMaybe<FieldSelectorEnum>;
  readonly ext: InputMaybe<FieldSelectorEnum>;
  readonly extension: InputMaybe<FieldSelectorEnum>;
  readonly gid: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly ino: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly mode: InputMaybe<FieldSelectorEnum>;
  readonly modifiedTime: InputMaybe<FieldSelectorEnum>;
  readonly mtime: InputMaybe<FieldSelectorEnum>;
  readonly mtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nlink: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly prettySize: InputMaybe<FieldSelectorEnum>;
  readonly rdev: InputMaybe<FieldSelectorEnum>;
  readonly relativeDirectory: InputMaybe<FieldSelectorEnum>;
  readonly relativePath: InputMaybe<FieldSelectorEnum>;
  readonly root: InputMaybe<FieldSelectorEnum>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly sourceInstanceName: InputMaybe<FieldSelectorEnum>;
  readonly uid: InputMaybe<FieldSelectorEnum>;
};

type DirectoryFilterInput = {
  readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly accessTime: InputMaybe<DateQueryOperatorInput>;
  readonly atime: InputMaybe<DateQueryOperatorInput>;
  readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly base: InputMaybe<StringQueryOperatorInput>;
  readonly birthTime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly changeTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly ctime: InputMaybe<DateQueryOperatorInput>;
  readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly dev: InputMaybe<IntQueryOperatorInput>;
  readonly dir: InputMaybe<StringQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly extension: InputMaybe<StringQueryOperatorInput>;
  readonly gid: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ino: InputMaybe<FloatQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mode: InputMaybe<IntQueryOperatorInput>;
  readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
  readonly mtime: InputMaybe<DateQueryOperatorInput>;
  readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nlink: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prettySize: InputMaybe<StringQueryOperatorInput>;
  readonly rdev: InputMaybe<IntQueryOperatorInput>;
  readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  readonly relativePath: InputMaybe<StringQueryOperatorInput>;
  readonly root: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<IntQueryOperatorInput>;
};

type DirectoryGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<DirectoryEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<DirectoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Directory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type DirectoryGroupConnection_distinctArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryGroupConnection_groupArgs = {
  field: DirectoryFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type DirectoryGroupConnection_maxArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryGroupConnection_minArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryGroupConnection_sumArgs = {
  field: DirectoryFieldSelector;
};

type DirectorySortInput = {
  readonly absolutePath: InputMaybe<SortOrderEnum>;
  readonly accessTime: InputMaybe<SortOrderEnum>;
  readonly atime: InputMaybe<SortOrderEnum>;
  readonly atimeMs: InputMaybe<SortOrderEnum>;
  readonly base: InputMaybe<SortOrderEnum>;
  readonly birthTime: InputMaybe<SortOrderEnum>;
  readonly birthtime: InputMaybe<SortOrderEnum>;
  readonly birthtimeMs: InputMaybe<SortOrderEnum>;
  readonly changeTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly ctime: InputMaybe<SortOrderEnum>;
  readonly ctimeMs: InputMaybe<SortOrderEnum>;
  readonly dev: InputMaybe<SortOrderEnum>;
  readonly dir: InputMaybe<SortOrderEnum>;
  readonly ext: InputMaybe<SortOrderEnum>;
  readonly extension: InputMaybe<SortOrderEnum>;
  readonly gid: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly ino: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly mode: InputMaybe<SortOrderEnum>;
  readonly modifiedTime: InputMaybe<SortOrderEnum>;
  readonly mtime: InputMaybe<SortOrderEnum>;
  readonly mtimeMs: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nlink: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly prettySize: InputMaybe<SortOrderEnum>;
  readonly rdev: InputMaybe<SortOrderEnum>;
  readonly relativeDirectory: InputMaybe<SortOrderEnum>;
  readonly relativePath: InputMaybe<SortOrderEnum>;
  readonly root: InputMaybe<SortOrderEnum>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly sourceInstanceName: InputMaybe<SortOrderEnum>;
  readonly uid: InputMaybe<SortOrderEnum>;
};

type DuotoneGradient = {
  readonly highlight: Scalars['String'];
  readonly opacity: InputMaybe<Scalars['Int']>;
  readonly shadow: Scalars['String'];
};

type FieldSelectorEnum =
  | 'SELECT';

type File = Node & {
  readonly absolutePath: Scalars['String'];
  readonly accessTime: Scalars['Date'];
  readonly atime: Scalars['Date'];
  readonly atimeMs: Scalars['Float'];
  readonly base: Scalars['String'];
  readonly birthTime: Scalars['Date'];
  /** @deprecated Use `birthTime` instead */
  readonly birthtime: Maybe<Scalars['Date']>;
  /** @deprecated Use `birthTime` instead */
  readonly birthtimeMs: Maybe<Scalars['Float']>;
  readonly blksize: Maybe<Scalars['Int']>;
  readonly blocks: Maybe<Scalars['Int']>;
  readonly changeTime: Scalars['Date'];
  /** Returns the first child node of type ImageSharp or null if there are no children of given type on this node */
  readonly childImageSharp: Maybe<ImageSharp>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type ImageSharp */
  readonly childrenImageSharp: Maybe<ReadonlyArray<Maybe<ImageSharp>>>;
  readonly ctime: Scalars['Date'];
  readonly ctimeMs: Scalars['Float'];
  readonly dev: Scalars['Int'];
  readonly dir: Scalars['String'];
  readonly ext: Scalars['String'];
  readonly extension: Scalars['String'];
  readonly gid: Scalars['Int'];
  readonly id: Scalars['ID'];
  readonly ino: Scalars['Float'];
  readonly internal: Internal;
  readonly mode: Scalars['Int'];
  readonly modifiedTime: Scalars['Date'];
  readonly mtime: Scalars['Date'];
  readonly mtimeMs: Scalars['Float'];
  readonly name: Scalars['String'];
  readonly nlink: Scalars['Int'];
  readonly parent: Maybe<Node>;
  readonly prettySize: Scalars['String'];
  /** Copy file to static directory and return public url to it */
  readonly publicURL: Maybe<Scalars['String']>;
  readonly rdev: Scalars['Int'];
  readonly relativeDirectory: Scalars['String'];
  readonly relativePath: Scalars['String'];
  readonly root: Scalars['String'];
  readonly size: Scalars['Int'];
  readonly sourceInstanceName: Scalars['String'];
  readonly uid: Scalars['Int'];
};


type File_accessTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_atimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_birthTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_changeTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_ctimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_modifiedTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_mtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type FileConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<FileEdge>;
  readonly group: ReadonlyArray<FileGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<File>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type FileConnection_distinctArgs = {
  field: FileFieldSelector;
};


type FileConnection_groupArgs = {
  field: FileFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type FileConnection_maxArgs = {
  field: FileFieldSelector;
};


type FileConnection_minArgs = {
  field: FileFieldSelector;
};


type FileConnection_sumArgs = {
  field: FileFieldSelector;
};

type FileEdge = {
  readonly next: Maybe<File>;
  readonly node: File;
  readonly previous: Maybe<File>;
};

type FileFieldSelector = {
  readonly absolutePath: InputMaybe<FieldSelectorEnum>;
  readonly accessTime: InputMaybe<FieldSelectorEnum>;
  readonly atime: InputMaybe<FieldSelectorEnum>;
  readonly atimeMs: InputMaybe<FieldSelectorEnum>;
  readonly base: InputMaybe<FieldSelectorEnum>;
  readonly birthTime: InputMaybe<FieldSelectorEnum>;
  readonly birthtime: InputMaybe<FieldSelectorEnum>;
  readonly birthtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly blksize: InputMaybe<FieldSelectorEnum>;
  readonly blocks: InputMaybe<FieldSelectorEnum>;
  readonly changeTime: InputMaybe<FieldSelectorEnum>;
  readonly childImageSharp: InputMaybe<ImageSharpFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenImageSharp: InputMaybe<ImageSharpFieldSelector>;
  readonly ctime: InputMaybe<FieldSelectorEnum>;
  readonly ctimeMs: InputMaybe<FieldSelectorEnum>;
  readonly dev: InputMaybe<FieldSelectorEnum>;
  readonly dir: InputMaybe<FieldSelectorEnum>;
  readonly ext: InputMaybe<FieldSelectorEnum>;
  readonly extension: InputMaybe<FieldSelectorEnum>;
  readonly gid: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly ino: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly mode: InputMaybe<FieldSelectorEnum>;
  readonly modifiedTime: InputMaybe<FieldSelectorEnum>;
  readonly mtime: InputMaybe<FieldSelectorEnum>;
  readonly mtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nlink: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly prettySize: InputMaybe<FieldSelectorEnum>;
  readonly publicURL: InputMaybe<FieldSelectorEnum>;
  readonly rdev: InputMaybe<FieldSelectorEnum>;
  readonly relativeDirectory: InputMaybe<FieldSelectorEnum>;
  readonly relativePath: InputMaybe<FieldSelectorEnum>;
  readonly root: InputMaybe<FieldSelectorEnum>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly sourceInstanceName: InputMaybe<FieldSelectorEnum>;
  readonly uid: InputMaybe<FieldSelectorEnum>;
};

type FileFilterInput = {
  readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly accessTime: InputMaybe<DateQueryOperatorInput>;
  readonly atime: InputMaybe<DateQueryOperatorInput>;
  readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly base: InputMaybe<StringQueryOperatorInput>;
  readonly birthTime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly blksize: InputMaybe<IntQueryOperatorInput>;
  readonly blocks: InputMaybe<IntQueryOperatorInput>;
  readonly changeTime: InputMaybe<DateQueryOperatorInput>;
  readonly childImageSharp: InputMaybe<ImageSharpFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenImageSharp: InputMaybe<ImageSharpFilterListInput>;
  readonly ctime: InputMaybe<DateQueryOperatorInput>;
  readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly dev: InputMaybe<IntQueryOperatorInput>;
  readonly dir: InputMaybe<StringQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly extension: InputMaybe<StringQueryOperatorInput>;
  readonly gid: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ino: InputMaybe<FloatQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mode: InputMaybe<IntQueryOperatorInput>;
  readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
  readonly mtime: InputMaybe<DateQueryOperatorInput>;
  readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nlink: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prettySize: InputMaybe<StringQueryOperatorInput>;
  readonly publicURL: InputMaybe<StringQueryOperatorInput>;
  readonly rdev: InputMaybe<IntQueryOperatorInput>;
  readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  readonly relativePath: InputMaybe<StringQueryOperatorInput>;
  readonly root: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<IntQueryOperatorInput>;
};

type FileGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<FileEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<FileGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<File>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type FileGroupConnection_distinctArgs = {
  field: FileFieldSelector;
};


type FileGroupConnection_groupArgs = {
  field: FileFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type FileGroupConnection_maxArgs = {
  field: FileFieldSelector;
};


type FileGroupConnection_minArgs = {
  field: FileFieldSelector;
};


type FileGroupConnection_sumArgs = {
  field: FileFieldSelector;
};

type FileSortInput = {
  readonly absolutePath: InputMaybe<SortOrderEnum>;
  readonly accessTime: InputMaybe<SortOrderEnum>;
  readonly atime: InputMaybe<SortOrderEnum>;
  readonly atimeMs: InputMaybe<SortOrderEnum>;
  readonly base: InputMaybe<SortOrderEnum>;
  readonly birthTime: InputMaybe<SortOrderEnum>;
  readonly birthtime: InputMaybe<SortOrderEnum>;
  readonly birthtimeMs: InputMaybe<SortOrderEnum>;
  readonly blksize: InputMaybe<SortOrderEnum>;
  readonly blocks: InputMaybe<SortOrderEnum>;
  readonly changeTime: InputMaybe<SortOrderEnum>;
  readonly childImageSharp: InputMaybe<ImageSharpSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenImageSharp: InputMaybe<ImageSharpSortInput>;
  readonly ctime: InputMaybe<SortOrderEnum>;
  readonly ctimeMs: InputMaybe<SortOrderEnum>;
  readonly dev: InputMaybe<SortOrderEnum>;
  readonly dir: InputMaybe<SortOrderEnum>;
  readonly ext: InputMaybe<SortOrderEnum>;
  readonly extension: InputMaybe<SortOrderEnum>;
  readonly gid: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly ino: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly mode: InputMaybe<SortOrderEnum>;
  readonly modifiedTime: InputMaybe<SortOrderEnum>;
  readonly mtime: InputMaybe<SortOrderEnum>;
  readonly mtimeMs: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nlink: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly prettySize: InputMaybe<SortOrderEnum>;
  readonly publicURL: InputMaybe<SortOrderEnum>;
  readonly rdev: InputMaybe<SortOrderEnum>;
  readonly relativeDirectory: InputMaybe<SortOrderEnum>;
  readonly relativePath: InputMaybe<SortOrderEnum>;
  readonly root: InputMaybe<SortOrderEnum>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly sourceInstanceName: InputMaybe<SortOrderEnum>;
  readonly uid: InputMaybe<SortOrderEnum>;
};

type FloatQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Float']>;
  readonly gt: InputMaybe<Scalars['Float']>;
  readonly gte: InputMaybe<Scalars['Float']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  readonly lt: InputMaybe<Scalars['Float']>;
  readonly lte: InputMaybe<Scalars['Float']>;
  readonly ne: InputMaybe<Scalars['Float']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
};

type GatsbyImageDataQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['GatsbyImageData']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['GatsbyImageData']>>>;
  readonly ne: InputMaybe<Scalars['GatsbyImageData']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['GatsbyImageData']>>>;
};

type GatsbyImageFormat =
  | 'auto'
  | 'avif'
  | 'jpg'
  | ''
  | 'png'
  | 'webp';

type GatsbyImageLayout =
  | 'constrained'
  | 'fixed'
  | 'fullWidth';

type GatsbyImagePlaceholder =
  | 'blurred'
  | 'dominantColor'
  | 'none'
  | 'tracedSVG';

type ImageCropFocus =
  | 17
  | 0
  | 2
  | 16
  | 1
  | 5
  | 8
  | 3
  | 6
  | 7
  | 4;

type ImageFit =
  | 'contain'
  | 'cover'
  | 'fill'
  | 'inside'
  | 'outside';

type ImageFormat =
  | ''
  | 'avif'
  | 'jpg'
  | ''
  | 'png'
  | 'webp';

type ImageLayout =
  | 'constrained'
  | 'fixed'
  | 'fullWidth';

type ImagePlaceholder =
  | 'blurred'
  | 'dominantColor'
  | 'none'
  | 'tracedSVG';

type ImageResizingBehavior =
  /** Crop a part of the original image to match the specified size. */
  | 'crop'
  /** Crop the image to the specified dimensions, if the original image is smaller than these dimensions, then the image will be upscaled. */
  | 'fill'
  | ''
  /** Same as the default resizing, but adds padding so that the generated image has the specified dimensions. */
  | 'pad'
  /** Scale the image regardless of the original aspect ratio. */
  | 'scale'
  /** When used in association with the f parameter below, creates a thumbnail from the image based on a focus area. */
  | 'thumb';

type ImageSharp = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly fixed: Maybe<ImageSharpFixed>;
  readonly fluid: Maybe<ImageSharpFluid>;
  readonly gatsbyImageData: Scalars['GatsbyImageData'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly original: Maybe<ImageSharpOriginal>;
  readonly parent: Maybe<Node>;
  readonly resize: Maybe<ImageSharpResize>;
};


type ImageSharp_fixedArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64Width: InputMaybe<Scalars['Int']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  height: InputMaybe<Scalars['Int']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  toFormat?: InputMaybe<ImageFormat>;
  toFormatBase64?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
  width: InputMaybe<Scalars['Int']>;
};


type ImageSharp_fluidArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64Width: InputMaybe<Scalars['Int']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  maxHeight: InputMaybe<Scalars['Int']>;
  maxWidth: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  sizes?: InputMaybe<Scalars['String']>;
  srcSetBreakpoints?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  toFormat?: InputMaybe<ImageFormat>;
  toFormatBase64?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
};


type ImageSharp_gatsbyImageDataArgs = {
  aspectRatio: InputMaybe<Scalars['Float']>;
  avifOptions: InputMaybe<AVIFOptions>;
  backgroundColor: InputMaybe<Scalars['String']>;
  blurredOptions: InputMaybe<BlurredOptions>;
  breakpoints: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  formats: InputMaybe<ReadonlyArray<InputMaybe<ImageFormat>>>;
  height: InputMaybe<Scalars['Int']>;
  jpgOptions: InputMaybe<JPGOptions>;
  layout?: InputMaybe<ImageLayout>;
  outputPixelDensities: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  placeholder: InputMaybe<ImagePlaceholder>;
  pngOptions: InputMaybe<PNGOptions>;
  quality: InputMaybe<Scalars['Int']>;
  sizes: InputMaybe<Scalars['String']>;
  tracedSVGOptions: InputMaybe<Potrace>;
  transformOptions: InputMaybe<TransformOptions>;
  webpOptions: InputMaybe<WebPOptions>;
  width: InputMaybe<Scalars['Int']>;
};


type ImageSharp_resizeArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64?: InputMaybe<Scalars['Boolean']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  height: InputMaybe<Scalars['Int']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  pngCompressionLevel?: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  toFormat?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
  width: InputMaybe<Scalars['Int']>;
};

type ImageSharpConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ImageSharpEdge>;
  readonly group: ReadonlyArray<ImageSharpGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ImageSharp>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ImageSharpConnection_distinctArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpConnection_groupArgs = {
  field: ImageSharpFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ImageSharpConnection_maxArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpConnection_minArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpConnection_sumArgs = {
  field: ImageSharpFieldSelector;
};

type ImageSharpEdge = {
  readonly next: Maybe<ImageSharp>;
  readonly node: ImageSharp;
  readonly previous: Maybe<ImageSharp>;
};

type ImageSharpFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly fixed: InputMaybe<ImageSharpFixedFieldSelector>;
  readonly fluid: InputMaybe<ImageSharpFluidFieldSelector>;
  readonly gatsbyImageData: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly original: InputMaybe<ImageSharpOriginalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly resize: InputMaybe<ImageSharpResizeFieldSelector>;
};

type ImageSharpFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly fixed: InputMaybe<ImageSharpFixedFilterInput>;
  readonly fluid: InputMaybe<ImageSharpFluidFilterInput>;
  readonly gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly original: InputMaybe<ImageSharpOriginalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly resize: InputMaybe<ImageSharpResizeFilterInput>;
};

type ImageSharpFilterListInput = {
  readonly elemMatch: InputMaybe<ImageSharpFilterInput>;
};

type ImageSharpFixed = {
  readonly aspectRatio: Maybe<Scalars['Float']>;
  readonly base64: Maybe<Scalars['String']>;
  readonly height: Scalars['Float'];
  readonly originalName: Maybe<Scalars['String']>;
  readonly src: Scalars['String'];
  readonly srcSet: Scalars['String'];
  readonly srcSetWebp: Maybe<Scalars['String']>;
  readonly srcWebp: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
  readonly width: Scalars['Float'];
};

type ImageSharpFixedFieldSelector = {
  readonly aspectRatio: InputMaybe<FieldSelectorEnum>;
  readonly base64: InputMaybe<FieldSelectorEnum>;
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly originalName: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly srcSet: InputMaybe<FieldSelectorEnum>;
  readonly srcSetWebp: InputMaybe<FieldSelectorEnum>;
  readonly srcWebp: InputMaybe<FieldSelectorEnum>;
  readonly tracedSVG: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpFixedFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly base64: InputMaybe<StringQueryOperatorInput>;
  readonly height: InputMaybe<FloatQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly srcSet: InputMaybe<StringQueryOperatorInput>;
  readonly srcSetWebp: InputMaybe<StringQueryOperatorInput>;
  readonly srcWebp: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<FloatQueryOperatorInput>;
};

type ImageSharpFixedSortInput = {
  readonly aspectRatio: InputMaybe<SortOrderEnum>;
  readonly base64: InputMaybe<SortOrderEnum>;
  readonly height: InputMaybe<SortOrderEnum>;
  readonly originalName: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly srcSet: InputMaybe<SortOrderEnum>;
  readonly srcSetWebp: InputMaybe<SortOrderEnum>;
  readonly srcWebp: InputMaybe<SortOrderEnum>;
  readonly tracedSVG: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type ImageSharpFluid = {
  readonly aspectRatio: Scalars['Float'];
  readonly base64: Maybe<Scalars['String']>;
  readonly originalImg: Maybe<Scalars['String']>;
  readonly originalName: Maybe<Scalars['String']>;
  readonly presentationHeight: Scalars['Int'];
  readonly presentationWidth: Scalars['Int'];
  readonly sizes: Scalars['String'];
  readonly src: Scalars['String'];
  readonly srcSet: Scalars['String'];
  readonly srcSetWebp: Maybe<Scalars['String']>;
  readonly srcWebp: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
};

type ImageSharpFluidFieldSelector = {
  readonly aspectRatio: InputMaybe<FieldSelectorEnum>;
  readonly base64: InputMaybe<FieldSelectorEnum>;
  readonly originalImg: InputMaybe<FieldSelectorEnum>;
  readonly originalName: InputMaybe<FieldSelectorEnum>;
  readonly presentationHeight: InputMaybe<FieldSelectorEnum>;
  readonly presentationWidth: InputMaybe<FieldSelectorEnum>;
  readonly sizes: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly srcSet: InputMaybe<FieldSelectorEnum>;
  readonly srcSetWebp: InputMaybe<FieldSelectorEnum>;
  readonly srcWebp: InputMaybe<FieldSelectorEnum>;
  readonly tracedSVG: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpFluidFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly base64: InputMaybe<StringQueryOperatorInput>;
  readonly originalImg: InputMaybe<StringQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly presentationHeight: InputMaybe<IntQueryOperatorInput>;
  readonly presentationWidth: InputMaybe<IntQueryOperatorInput>;
  readonly sizes: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly srcSet: InputMaybe<StringQueryOperatorInput>;
  readonly srcSetWebp: InputMaybe<StringQueryOperatorInput>;
  readonly srcWebp: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
};

type ImageSharpFluidSortInput = {
  readonly aspectRatio: InputMaybe<SortOrderEnum>;
  readonly base64: InputMaybe<SortOrderEnum>;
  readonly originalImg: InputMaybe<SortOrderEnum>;
  readonly originalName: InputMaybe<SortOrderEnum>;
  readonly presentationHeight: InputMaybe<SortOrderEnum>;
  readonly presentationWidth: InputMaybe<SortOrderEnum>;
  readonly sizes: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly srcSet: InputMaybe<SortOrderEnum>;
  readonly srcSetWebp: InputMaybe<SortOrderEnum>;
  readonly srcWebp: InputMaybe<SortOrderEnum>;
  readonly tracedSVG: InputMaybe<SortOrderEnum>;
};

type ImageSharpGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ImageSharpEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ImageSharpGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ImageSharp>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ImageSharpGroupConnection_distinctArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpGroupConnection_groupArgs = {
  field: ImageSharpFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ImageSharpGroupConnection_maxArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpGroupConnection_minArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpGroupConnection_sumArgs = {
  field: ImageSharpFieldSelector;
};

type ImageSharpOriginal = {
  readonly height: Maybe<Scalars['Float']>;
  readonly src: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Float']>;
};

type ImageSharpOriginalFieldSelector = {
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpOriginalFilterInput = {
  readonly height: InputMaybe<FloatQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<FloatQueryOperatorInput>;
};

type ImageSharpOriginalSortInput = {
  readonly height: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type ImageSharpResize = {
  readonly aspectRatio: Maybe<Scalars['Float']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly originalName: Maybe<Scalars['String']>;
  readonly src: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};

type ImageSharpResizeFieldSelector = {
  readonly aspectRatio: InputMaybe<FieldSelectorEnum>;
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly originalName: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly tracedSVG: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpResizeFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type ImageSharpResizeSortInput = {
  readonly aspectRatio: InputMaybe<SortOrderEnum>;
  readonly height: InputMaybe<SortOrderEnum>;
  readonly originalName: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly tracedSVG: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type ImageSharpSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly fixed: InputMaybe<ImageSharpFixedSortInput>;
  readonly fluid: InputMaybe<ImageSharpFluidSortInput>;
  readonly gatsbyImageData: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly original: InputMaybe<ImageSharpOriginalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly resize: InputMaybe<ImageSharpResizeSortInput>;
};

type IntQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Int']>;
  readonly gt: InputMaybe<Scalars['Int']>;
  readonly gte: InputMaybe<Scalars['Int']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  readonly lt: InputMaybe<Scalars['Int']>;
  readonly lte: InputMaybe<Scalars['Int']>;
  readonly ne: InputMaybe<Scalars['Int']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
};

type Internal = {
  readonly content: Maybe<Scalars['String']>;
  readonly contentDigest: Scalars['String'];
  readonly contentFilePath: Maybe<Scalars['String']>;
  readonly description: Maybe<Scalars['String']>;
  readonly fieldOwners: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly ignoreType: Maybe<Scalars['Boolean']>;
  readonly mediaType: Maybe<Scalars['String']>;
  readonly owner: Scalars['String'];
  readonly type: Scalars['String'];
};

type InternalFieldSelector = {
  readonly content: InputMaybe<FieldSelectorEnum>;
  readonly contentDigest: InputMaybe<FieldSelectorEnum>;
  readonly contentFilePath: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly fieldOwners: InputMaybe<FieldSelectorEnum>;
  readonly ignoreType: InputMaybe<FieldSelectorEnum>;
  readonly mediaType: InputMaybe<FieldSelectorEnum>;
  readonly owner: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type InternalFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly contentDigest: InputMaybe<StringQueryOperatorInput>;
  readonly contentFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly fieldOwners: InputMaybe<StringQueryOperatorInput>;
  readonly ignoreType: InputMaybe<BooleanQueryOperatorInput>;
  readonly mediaType: InputMaybe<StringQueryOperatorInput>;
  readonly owner: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type InternalSortInput = {
  readonly content: InputMaybe<SortOrderEnum>;
  readonly contentDigest: InputMaybe<SortOrderEnum>;
  readonly contentFilePath: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly fieldOwners: InputMaybe<SortOrderEnum>;
  readonly ignoreType: InputMaybe<SortOrderEnum>;
  readonly mediaType: InputMaybe<SortOrderEnum>;
  readonly owner: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type JPGOptions = {
  readonly progressive: InputMaybe<Scalars['Boolean']>;
  readonly quality: InputMaybe<Scalars['Int']>;
};

type JSONQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['JSON']>;
  readonly glob: InputMaybe<Scalars['JSON']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>;
  readonly ne: InputMaybe<Scalars['JSON']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>;
  readonly regex: InputMaybe<Scalars['JSON']>;
};

type MarkdownExcerptFormats =
  | 'HTML'
  | 'MARKDOWN'
  | 'PLAIN';

type MarkdownHeading = {
  readonly depth: Maybe<Scalars['Int']>;
  readonly id: Maybe<Scalars['String']>;
  readonly value: Maybe<Scalars['String']>;
};

type MarkdownHeadingFieldSelector = {
  readonly depth: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly value: InputMaybe<FieldSelectorEnum>;
};

type MarkdownHeadingFilterInput = {
  readonly depth: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly value: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownHeadingFilterListInput = {
  readonly elemMatch: InputMaybe<MarkdownHeadingFilterInput>;
};

type MarkdownHeadingLevels =
  | 'h1'
  | 'h2'
  | 'h3'
  | 'h4'
  | 'h5'
  | 'h6';

type MarkdownHeadingSortInput = {
  readonly depth: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly value: InputMaybe<SortOrderEnum>;
};

type MarkdownRemark = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly excerpt: Maybe<Scalars['String']>;
  readonly excerptAst: Maybe<Scalars['JSON']>;
  readonly frontmatter: Maybe<MarkdownRemarkFrontmatter>;
  readonly headings: Maybe<ReadonlyArray<Maybe<MarkdownHeading>>>;
  readonly html: Maybe<Scalars['String']>;
  readonly htmlAst: Maybe<Scalars['JSON']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly rawMarkdownBody: Maybe<Scalars['String']>;
  readonly tableOfContents: Maybe<Scalars['String']>;
  readonly timeToRead: Maybe<Scalars['Int']>;
  readonly wordCount: Maybe<MarkdownWordCount>;
};


type MarkdownRemark_excerptArgs = {
  format?: InputMaybe<MarkdownExcerptFormats>;
  pruneLength?: InputMaybe<Scalars['Int']>;
  truncate?: InputMaybe<Scalars['Boolean']>;
};


type MarkdownRemark_excerptAstArgs = {
  pruneLength?: InputMaybe<Scalars['Int']>;
  truncate?: InputMaybe<Scalars['Boolean']>;
};


type MarkdownRemark_headingsArgs = {
  depth: InputMaybe<MarkdownHeadingLevels>;
};


type MarkdownRemark_tableOfContentsArgs = {
  absolute?: InputMaybe<Scalars['Boolean']>;
  heading: InputMaybe<Scalars['String']>;
  maxDepth: InputMaybe<Scalars['Int']>;
  pathToSlugField?: InputMaybe<Scalars['String']>;
};

type MarkdownRemarkConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<MarkdownRemarkEdge>;
  readonly group: ReadonlyArray<MarkdownRemarkGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<MarkdownRemark>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type MarkdownRemarkConnection_distinctArgs = {
  field: MarkdownRemarkFieldSelector;
};


type MarkdownRemarkConnection_groupArgs = {
  field: MarkdownRemarkFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type MarkdownRemarkConnection_maxArgs = {
  field: MarkdownRemarkFieldSelector;
};


type MarkdownRemarkConnection_minArgs = {
  field: MarkdownRemarkFieldSelector;
};


type MarkdownRemarkConnection_sumArgs = {
  field: MarkdownRemarkFieldSelector;
};

type MarkdownRemarkEdge = {
  readonly next: Maybe<MarkdownRemark>;
  readonly node: MarkdownRemark;
  readonly previous: Maybe<MarkdownRemark>;
};

type MarkdownRemarkFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly excerpt: InputMaybe<FieldSelectorEnum>;
  readonly excerptAst: InputMaybe<FieldSelectorEnum>;
  readonly frontmatter: InputMaybe<MarkdownRemarkFrontmatterFieldSelector>;
  readonly headings: InputMaybe<MarkdownHeadingFieldSelector>;
  readonly html: InputMaybe<FieldSelectorEnum>;
  readonly htmlAst: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly rawMarkdownBody: InputMaybe<FieldSelectorEnum>;
  readonly tableOfContents: InputMaybe<FieldSelectorEnum>;
  readonly timeToRead: InputMaybe<FieldSelectorEnum>;
  readonly wordCount: InputMaybe<MarkdownWordCountFieldSelector>;
};

type MarkdownRemarkFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly excerpt: InputMaybe<StringQueryOperatorInput>;
  readonly excerptAst: InputMaybe<JSONQueryOperatorInput>;
  readonly frontmatter: InputMaybe<MarkdownRemarkFrontmatterFilterInput>;
  readonly headings: InputMaybe<MarkdownHeadingFilterListInput>;
  readonly html: InputMaybe<StringQueryOperatorInput>;
  readonly htmlAst: InputMaybe<JSONQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly rawMarkdownBody: InputMaybe<StringQueryOperatorInput>;
  readonly tableOfContents: InputMaybe<StringQueryOperatorInput>;
  readonly timeToRead: InputMaybe<IntQueryOperatorInput>;
  readonly wordCount: InputMaybe<MarkdownWordCountFilterInput>;
};

type MarkdownRemarkFilterListInput = {
  readonly elemMatch: InputMaybe<MarkdownRemarkFilterInput>;
};

type MarkdownRemarkFrontmatter = {
  readonly title: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterFieldSelector = {
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type MarkdownRemarkFrontmatterFilterInput = {
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterSortInput = {
  readonly title: InputMaybe<SortOrderEnum>;
};

type MarkdownRemarkGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<MarkdownRemarkEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<MarkdownRemarkGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<MarkdownRemark>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type MarkdownRemarkGroupConnection_distinctArgs = {
  field: MarkdownRemarkFieldSelector;
};


type MarkdownRemarkGroupConnection_groupArgs = {
  field: MarkdownRemarkFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type MarkdownRemarkGroupConnection_maxArgs = {
  field: MarkdownRemarkFieldSelector;
};


type MarkdownRemarkGroupConnection_minArgs = {
  field: MarkdownRemarkFieldSelector;
};


type MarkdownRemarkGroupConnection_sumArgs = {
  field: MarkdownRemarkFieldSelector;
};

type MarkdownRemarkSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly excerpt: InputMaybe<SortOrderEnum>;
  readonly excerptAst: InputMaybe<SortOrderEnum>;
  readonly frontmatter: InputMaybe<MarkdownRemarkFrontmatterSortInput>;
  readonly headings: InputMaybe<MarkdownHeadingSortInput>;
  readonly html: InputMaybe<SortOrderEnum>;
  readonly htmlAst: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly rawMarkdownBody: InputMaybe<SortOrderEnum>;
  readonly tableOfContents: InputMaybe<SortOrderEnum>;
  readonly timeToRead: InputMaybe<SortOrderEnum>;
  readonly wordCount: InputMaybe<MarkdownWordCountSortInput>;
};

type MarkdownWordCount = {
  readonly paragraphs: Maybe<Scalars['Int']>;
  readonly sentences: Maybe<Scalars['Int']>;
  readonly words: Maybe<Scalars['Int']>;
};

type MarkdownWordCountFieldSelector = {
  readonly paragraphs: InputMaybe<FieldSelectorEnum>;
  readonly sentences: InputMaybe<FieldSelectorEnum>;
  readonly words: InputMaybe<FieldSelectorEnum>;
};

type MarkdownWordCountFilterInput = {
  readonly paragraphs: InputMaybe<IntQueryOperatorInput>;
  readonly sentences: InputMaybe<IntQueryOperatorInput>;
  readonly words: InputMaybe<IntQueryOperatorInput>;
};

type MarkdownWordCountSortInput = {
  readonly paragraphs: InputMaybe<SortOrderEnum>;
  readonly sentences: InputMaybe<SortOrderEnum>;
  readonly words: InputMaybe<SortOrderEnum>;
};

/** Node Interface */
type Node = {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type NodeFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type NodeFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type NodeFilterListInput = {
  readonly elemMatch: InputMaybe<NodeFilterInput>;
};

type NodeSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type PNGOptions = {
  readonly compressionSpeed: InputMaybe<Scalars['Int']>;
  readonly quality: InputMaybe<Scalars['Int']>;
};

type PageInfo = {
  readonly currentPage: Scalars['Int'];
  readonly hasNextPage: Scalars['Boolean'];
  readonly hasPreviousPage: Scalars['Boolean'];
  readonly itemCount: Scalars['Int'];
  readonly pageCount: Scalars['Int'];
  readonly perPage: Maybe<Scalars['Int']>;
  readonly totalCount: Scalars['Int'];
};

type Potrace = {
  readonly alphaMax: InputMaybe<Scalars['Float']>;
  readonly background: InputMaybe<Scalars['String']>;
  readonly blackOnWhite: InputMaybe<Scalars['Boolean']>;
  readonly color: InputMaybe<Scalars['String']>;
  readonly optCurve: InputMaybe<Scalars['Boolean']>;
  readonly optTolerance: InputMaybe<Scalars['Float']>;
  readonly threshold: InputMaybe<Scalars['Int']>;
  readonly turdSize: InputMaybe<Scalars['Float']>;
  readonly turnPolicy: InputMaybe<PotraceTurnPolicy>;
};

type PotraceTurnPolicy =
  | 'black'
  | 'left'
  | 'majority'
  | 'minority'
  | 'right'
  | 'white';

type Query = {
  readonly allContentfulAdresse: ContentfulAdresseConnection;
  readonly allContentfulAktuelles: ContentfulAktuellesConnection;
  readonly allContentfulAktuellesBeschreibungTextNode: contentfulAktuellesBeschreibungTextNodeConnection;
  readonly allContentfulAnfahrt: ContentfulAnfahrtConnection;
  readonly allContentfulAnfahrtBeschreibungTextNode: contentfulAnfahrtBeschreibungTextNodeConnection;
  readonly allContentfulAsset: ContentfulAssetConnection;
  readonly allContentfulBlog: ContentfulBlogConnection;
  readonly allContentfulBlogBeschreibungTextNode: contentfulBlogBeschreibungTextNodeConnection;
  readonly allContentfulBlogpost: ContentfulBlogpostConnection;
  readonly allContentfulBlogpostTextTextNode: contentfulBlogpostTextTextNodeConnection;
  readonly allContentfulContentType: ContentfulContentTypeConnection;
  readonly allContentfulEntry: ContentfulEntryConnection;
  readonly allContentfulFooter: ContentfulFooterConnection;
  readonly allContentfulImpressum: ContentfulImpressumConnection;
  readonly allContentfulImpressumRechtlichesTextNode: contentfulImpressumRechtlichesTextNodeConnection;
  readonly allContentfulKontakt: ContentfulKontaktConnection;
  readonly allContentfulKontaktBeschreibungTextNode: contentfulKontaktBeschreibungTextNodeConnection;
  readonly allContentfulLayout: ContentfulLayoutConnection;
  readonly allContentfulLayoutNewsletterTextTextNode: contentfulLayoutNewsletterTextTextNodeConnection;
  readonly allContentfulLeistungen: ContentfulLeistungenConnection;
  readonly allContentfulLeistungenBeschreibungTextNode: contentfulLeistungenBeschreibungTextNodeConnection;
  readonly allContentfulLeistungenpost: ContentfulLeistungenpostConnection;
  readonly allContentfulLeistungenpostTextTextNode: contentfulLeistungenpostTextTextNodeConnection;
  readonly allContentfulNewsletter: ContentfulNewsletterConnection;
  readonly allContentfulNewsletterTextTextNode: contentfulNewsletterTextTextNodeConnection;
  readonly allContentfulSchwerpunkte: ContentfulSchwerpunkteConnection;
  readonly allContentfulSchwerpunkteBeschreibungTextNode: contentfulSchwerpunkteBeschreibungTextNodeConnection;
  readonly allContentfulSchwerpunktepost: ContentfulSchwerpunktepostConnection;
  readonly allContentfulSchwerpunktepostTextTextNode: contentfulSchwerpunktepostTextTextNodeConnection;
  readonly allContentfulStartbild: ContentfulStartbildConnection;
  readonly allContentfulStartbildTextTextNode: contentfulStartbildTextTextNodeConnection;
  readonly allContentfulTermin: ContentfulTerminConnection;
  readonly allContentfulTerminBeschreibungTextNode: contentfulTerminBeschreibungTextNodeConnection;
  readonly allContentfulTerminButtonTextNode: contentfulTerminButtonTextNodeConnection;
  readonly allContentfulTherapienpost: ContentfulTherapienpostConnection;
  readonly allContentfulUebermich: ContentfulUebermichConnection;
  readonly allContentfulUebermichTextTextNode: contentfulUebermichTextTextNodeConnection;
  readonly allDirectory: DirectoryConnection;
  readonly allFile: FileConnection;
  readonly allImageSharp: ImageSharpConnection;
  readonly allMarkdownRemark: MarkdownRemarkConnection;
  readonly allSite: SiteConnection;
  readonly allSiteBuildMetadata: SiteBuildMetadataConnection;
  readonly allSiteFunction: SiteFunctionConnection;
  readonly allSitePage: SitePageConnection;
  readonly allSitePlugin: SitePluginConnection;
  readonly contentfulAdresse: Maybe<ContentfulAdresse>;
  readonly contentfulAktuelles: Maybe<ContentfulAktuelles>;
  readonly contentfulAktuellesBeschreibungTextNode: Maybe<contentfulAktuellesBeschreibungTextNode>;
  readonly contentfulAnfahrt: Maybe<ContentfulAnfahrt>;
  readonly contentfulAnfahrtBeschreibungTextNode: Maybe<contentfulAnfahrtBeschreibungTextNode>;
  readonly contentfulAsset: Maybe<ContentfulAsset>;
  readonly contentfulBlog: Maybe<ContentfulBlog>;
  readonly contentfulBlogBeschreibungTextNode: Maybe<contentfulBlogBeschreibungTextNode>;
  readonly contentfulBlogpost: Maybe<ContentfulBlogpost>;
  readonly contentfulBlogpostTextTextNode: Maybe<contentfulBlogpostTextTextNode>;
  readonly contentfulContentType: Maybe<ContentfulContentType>;
  readonly contentfulEntry: Maybe<ContentfulEntry>;
  readonly contentfulFooter: Maybe<ContentfulFooter>;
  readonly contentfulImpressum: Maybe<ContentfulImpressum>;
  readonly contentfulImpressumRechtlichesTextNode: Maybe<contentfulImpressumRechtlichesTextNode>;
  readonly contentfulKontakt: Maybe<ContentfulKontakt>;
  readonly contentfulKontaktBeschreibungTextNode: Maybe<contentfulKontaktBeschreibungTextNode>;
  readonly contentfulLayout: Maybe<ContentfulLayout>;
  readonly contentfulLayoutNewsletterTextTextNode: Maybe<contentfulLayoutNewsletterTextTextNode>;
  readonly contentfulLeistungen: Maybe<ContentfulLeistungen>;
  readonly contentfulLeistungenBeschreibungTextNode: Maybe<contentfulLeistungenBeschreibungTextNode>;
  readonly contentfulLeistungenpost: Maybe<ContentfulLeistungenpost>;
  readonly contentfulLeistungenpostTextTextNode: Maybe<contentfulLeistungenpostTextTextNode>;
  readonly contentfulNewsletter: Maybe<ContentfulNewsletter>;
  readonly contentfulNewsletterTextTextNode: Maybe<contentfulNewsletterTextTextNode>;
  readonly contentfulSchwerpunkte: Maybe<ContentfulSchwerpunkte>;
  readonly contentfulSchwerpunkteBeschreibungTextNode: Maybe<contentfulSchwerpunkteBeschreibungTextNode>;
  readonly contentfulSchwerpunktepost: Maybe<ContentfulSchwerpunktepost>;
  readonly contentfulSchwerpunktepostTextTextNode: Maybe<contentfulSchwerpunktepostTextTextNode>;
  readonly contentfulStartbild: Maybe<ContentfulStartbild>;
  readonly contentfulStartbildTextTextNode: Maybe<contentfulStartbildTextTextNode>;
  readonly contentfulTermin: Maybe<ContentfulTermin>;
  readonly contentfulTerminBeschreibungTextNode: Maybe<contentfulTerminBeschreibungTextNode>;
  readonly contentfulTerminButtonTextNode: Maybe<contentfulTerminButtonTextNode>;
  readonly contentfulTherapienpost: Maybe<ContentfulTherapienpost>;
  readonly contentfulUebermich: Maybe<ContentfulUebermich>;
  readonly contentfulUebermichTextTextNode: Maybe<contentfulUebermichTextTextNode>;
  readonly directory: Maybe<Directory>;
  readonly file: Maybe<File>;
  readonly imageSharp: Maybe<ImageSharp>;
  readonly markdownRemark: Maybe<MarkdownRemark>;
  readonly site: Maybe<Site>;
  readonly siteBuildMetadata: Maybe<SiteBuildMetadata>;
  readonly siteFunction: Maybe<SiteFunction>;
  readonly sitePage: Maybe<SitePage>;
  readonly sitePlugin: Maybe<SitePlugin>;
};


type Query_allContentfulAdresseArgs = {
  filter: InputMaybe<ContentfulAdresseFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulAdresseSortInput>>>;
};


type Query_allContentfulAktuellesArgs = {
  filter: InputMaybe<ContentfulAktuellesFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulAktuellesSortInput>>>;
};


type Query_allContentfulAktuellesBeschreibungTextNodeArgs = {
  filter: InputMaybe<contentfulAktuellesBeschreibungTextNodeFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<contentfulAktuellesBeschreibungTextNodeSortInput>>>;
};


type Query_allContentfulAnfahrtArgs = {
  filter: InputMaybe<ContentfulAnfahrtFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulAnfahrtSortInput>>>;
};


type Query_allContentfulAnfahrtBeschreibungTextNodeArgs = {
  filter: InputMaybe<contentfulAnfahrtBeschreibungTextNodeFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<contentfulAnfahrtBeschreibungTextNodeSortInput>>>;
};


type Query_allContentfulAssetArgs = {
  filter: InputMaybe<ContentfulAssetFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulAssetSortInput>>>;
};


type Query_allContentfulBlogArgs = {
  filter: InputMaybe<ContentfulBlogFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulBlogSortInput>>>;
};


type Query_allContentfulBlogBeschreibungTextNodeArgs = {
  filter: InputMaybe<contentfulBlogBeschreibungTextNodeFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<contentfulBlogBeschreibungTextNodeSortInput>>>;
};


type Query_allContentfulBlogpostArgs = {
  filter: InputMaybe<ContentfulBlogpostFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulBlogpostSortInput>>>;
};


type Query_allContentfulBlogpostTextTextNodeArgs = {
  filter: InputMaybe<contentfulBlogpostTextTextNodeFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<contentfulBlogpostTextTextNodeSortInput>>>;
};


type Query_allContentfulContentTypeArgs = {
  filter: InputMaybe<ContentfulContentTypeFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulContentTypeSortInput>>>;
};


type Query_allContentfulEntryArgs = {
  filter: InputMaybe<ContentfulEntryFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulEntrySortInput>>>;
};


type Query_allContentfulFooterArgs = {
  filter: InputMaybe<ContentfulFooterFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulFooterSortInput>>>;
};


type Query_allContentfulImpressumArgs = {
  filter: InputMaybe<ContentfulImpressumFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulImpressumSortInput>>>;
};


type Query_allContentfulImpressumRechtlichesTextNodeArgs = {
  filter: InputMaybe<contentfulImpressumRechtlichesTextNodeFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<contentfulImpressumRechtlichesTextNodeSortInput>>>;
};


type Query_allContentfulKontaktArgs = {
  filter: InputMaybe<ContentfulKontaktFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulKontaktSortInput>>>;
};


type Query_allContentfulKontaktBeschreibungTextNodeArgs = {
  filter: InputMaybe<contentfulKontaktBeschreibungTextNodeFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<contentfulKontaktBeschreibungTextNodeSortInput>>>;
};


type Query_allContentfulLayoutArgs = {
  filter: InputMaybe<ContentfulLayoutFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulLayoutSortInput>>>;
};


type Query_allContentfulLayoutNewsletterTextTextNodeArgs = {
  filter: InputMaybe<contentfulLayoutNewsletterTextTextNodeFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<contentfulLayoutNewsletterTextTextNodeSortInput>>>;
};


type Query_allContentfulLeistungenArgs = {
  filter: InputMaybe<ContentfulLeistungenFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulLeistungenSortInput>>>;
};


type Query_allContentfulLeistungenBeschreibungTextNodeArgs = {
  filter: InputMaybe<contentfulLeistungenBeschreibungTextNodeFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<contentfulLeistungenBeschreibungTextNodeSortInput>>>;
};


type Query_allContentfulLeistungenpostArgs = {
  filter: InputMaybe<ContentfulLeistungenpostFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulLeistungenpostSortInput>>>;
};


type Query_allContentfulLeistungenpostTextTextNodeArgs = {
  filter: InputMaybe<contentfulLeistungenpostTextTextNodeFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<contentfulLeistungenpostTextTextNodeSortInput>>>;
};


type Query_allContentfulNewsletterArgs = {
  filter: InputMaybe<ContentfulNewsletterFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulNewsletterSortInput>>>;
};


type Query_allContentfulNewsletterTextTextNodeArgs = {
  filter: InputMaybe<contentfulNewsletterTextTextNodeFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<contentfulNewsletterTextTextNodeSortInput>>>;
};


type Query_allContentfulSchwerpunkteArgs = {
  filter: InputMaybe<ContentfulSchwerpunkteFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulSchwerpunkteSortInput>>>;
};


type Query_allContentfulSchwerpunkteBeschreibungTextNodeArgs = {
  filter: InputMaybe<contentfulSchwerpunkteBeschreibungTextNodeFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<contentfulSchwerpunkteBeschreibungTextNodeSortInput>>>;
};


type Query_allContentfulSchwerpunktepostArgs = {
  filter: InputMaybe<ContentfulSchwerpunktepostFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulSchwerpunktepostSortInput>>>;
};


type Query_allContentfulSchwerpunktepostTextTextNodeArgs = {
  filter: InputMaybe<contentfulSchwerpunktepostTextTextNodeFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<contentfulSchwerpunktepostTextTextNodeSortInput>>>;
};


type Query_allContentfulStartbildArgs = {
  filter: InputMaybe<ContentfulStartbildFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulStartbildSortInput>>>;
};


type Query_allContentfulStartbildTextTextNodeArgs = {
  filter: InputMaybe<contentfulStartbildTextTextNodeFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<contentfulStartbildTextTextNodeSortInput>>>;
};


type Query_allContentfulTerminArgs = {
  filter: InputMaybe<ContentfulTerminFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulTerminSortInput>>>;
};


type Query_allContentfulTerminBeschreibungTextNodeArgs = {
  filter: InputMaybe<contentfulTerminBeschreibungTextNodeFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<contentfulTerminBeschreibungTextNodeSortInput>>>;
};


type Query_allContentfulTerminButtonTextNodeArgs = {
  filter: InputMaybe<contentfulTerminButtonTextNodeFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<contentfulTerminButtonTextNodeSortInput>>>;
};


type Query_allContentfulTherapienpostArgs = {
  filter: InputMaybe<ContentfulTherapienpostFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulTherapienpostSortInput>>>;
};


type Query_allContentfulUebermichArgs = {
  filter: InputMaybe<ContentfulUebermichFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ContentfulUebermichSortInput>>>;
};


type Query_allContentfulUebermichTextTextNodeArgs = {
  filter: InputMaybe<contentfulUebermichTextTextNodeFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<contentfulUebermichTextTextNodeSortInput>>>;
};


type Query_allDirectoryArgs = {
  filter: InputMaybe<DirectoryFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<DirectorySortInput>>>;
};


type Query_allFileArgs = {
  filter: InputMaybe<FileFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<FileSortInput>>>;
};


type Query_allImageSharpArgs = {
  filter: InputMaybe<ImageSharpFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ImageSharpSortInput>>>;
};


type Query_allMarkdownRemarkArgs = {
  filter: InputMaybe<MarkdownRemarkFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<MarkdownRemarkSortInput>>>;
};


type Query_allSiteArgs = {
  filter: InputMaybe<SiteFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SiteSortInput>>>;
};


type Query_allSiteBuildMetadataArgs = {
  filter: InputMaybe<SiteBuildMetadataFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SiteBuildMetadataSortInput>>>;
};


type Query_allSiteFunctionArgs = {
  filter: InputMaybe<SiteFunctionFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SiteFunctionSortInput>>>;
};


type Query_allSitePageArgs = {
  filter: InputMaybe<SitePageFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SitePageSortInput>>>;
};


type Query_allSitePluginArgs = {
  filter: InputMaybe<SitePluginFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SitePluginSortInput>>>;
};


type Query_contentfulAdresseArgs = {
  adresse: InputMaybe<ContentfulAdresseAdresseFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  spaceId: InputMaybe<StringQueryOperatorInput>;
  sys: InputMaybe<ContentfulAdresseSysFilterInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_contentfulAktuellesArgs = {
  beschreibung: InputMaybe<contentfulAktuellesBeschreibungTextNodeFilterInput>;
  childContentfulAktuellesBeschreibungTextNode: InputMaybe<contentfulAktuellesBeschreibungTextNodeFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenContentfulAktuellesBeschreibungTextNode: InputMaybe<contentfulAktuellesBeschreibungTextNodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  spaceId: InputMaybe<StringQueryOperatorInput>;
  sys: InputMaybe<ContentfulAktuellesSysFilterInput>;
  ueberschrift: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_contentfulAktuellesBeschreibungTextNodeArgs = {
  beschreibung: InputMaybe<StringQueryOperatorInput>;
  childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  sys: InputMaybe<contentfulAktuellesBeschreibungTextNodeSysFilterInput>;
};


type Query_contentfulAnfahrtArgs = {
  beschreibung: InputMaybe<contentfulAnfahrtBeschreibungTextNodeFilterInput>;
  childContentfulAnfahrtBeschreibungTextNode: InputMaybe<contentfulAnfahrtBeschreibungTextNodeFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenContentfulAnfahrtBeschreibungTextNode: InputMaybe<contentfulAnfahrtBeschreibungTextNodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  spaceId: InputMaybe<StringQueryOperatorInput>;
  sys: InputMaybe<ContentfulAnfahrtSysFilterInput>;
  ueberschrift: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_contentfulAnfahrtBeschreibungTextNodeArgs = {
  beschreibung: InputMaybe<StringQueryOperatorInput>;
  childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  sys: InputMaybe<contentfulAnfahrtBeschreibungTextNodeSysFilterInput>;
};


type Query_contentfulAssetArgs = {
  children: InputMaybe<NodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  file: InputMaybe<ContentfulAssetFileFilterInput>;
  filename: InputMaybe<StringQueryOperatorInput>;
  filesize: InputMaybe<IntQueryOperatorInput>;
  gatsbyImage: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  height: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mimeType: InputMaybe<StringQueryOperatorInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  placeholderUrl: InputMaybe<StringQueryOperatorInput>;
  publicUrl: InputMaybe<StringQueryOperatorInput>;
  resize: InputMaybe<RemoteFileResizeFilterInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  spaceId: InputMaybe<StringQueryOperatorInput>;
  sys: InputMaybe<ContentfulAssetSysFilterInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
  url: InputMaybe<StringQueryOperatorInput>;
  width: InputMaybe<IntQueryOperatorInput>;
};


type Query_contentfulBlogArgs = {
  beschreibung: InputMaybe<contentfulBlogBeschreibungTextNodeFilterInput>;
  childContentfulBlogBeschreibungTextNode: InputMaybe<contentfulBlogBeschreibungTextNodeFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenContentfulBlogBeschreibungTextNode: InputMaybe<contentfulBlogBeschreibungTextNodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  spaceId: InputMaybe<StringQueryOperatorInput>;
  sys: InputMaybe<ContentfulBlogSysFilterInput>;
  ueberschrift: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_contentfulBlogBeschreibungTextNodeArgs = {
  beschreibung: InputMaybe<StringQueryOperatorInput>;
  childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  sys: InputMaybe<contentfulBlogBeschreibungTextNodeSysFilterInput>;
};


type Query_contentfulBlogpostArgs = {
  bild: InputMaybe<ContentfulAssetFilterInput>;
  childContentfulBlogpostTextTextNode: InputMaybe<contentfulBlogpostTextTextNodeFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenContentfulBlogpostTextTextNode: InputMaybe<contentfulBlogpostTextTextNodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  datum: InputMaybe<DateQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  spaceId: InputMaybe<StringQueryOperatorInput>;
  sys: InputMaybe<ContentfulBlogpostSysFilterInput>;
  text: InputMaybe<contentfulBlogpostTextTextNodeFilterInput>;
  ueberschrift: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_contentfulBlogpostTextTextNodeArgs = {
  childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  sys: InputMaybe<contentfulBlogpostTextTextNodeSysFilterInput>;
  text: InputMaybe<StringQueryOperatorInput>;
};


type Query_contentfulContentTypeArgs = {
  children: InputMaybe<NodeFilterListInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  displayField: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  sys: InputMaybe<ContentfulContentTypeSysFilterInput>;
};


type Query_contentfulEntryArgs = {
  children: InputMaybe<NodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_contentfulFooterArgs = {
  children: InputMaybe<NodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  karte: InputMaybe<ContentfulAssetFilterInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  spaceId: InputMaybe<StringQueryOperatorInput>;
  sys: InputMaybe<ContentfulFooterSysFilterInput>;
  ueberschrift: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_contentfulImpressumArgs = {
  childContentfulImpressumRechtlichesTextNode: InputMaybe<contentfulImpressumRechtlichesTextNodeFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenContentfulImpressumRechtlichesTextNode: InputMaybe<contentfulImpressumRechtlichesTextNodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  info: InputMaybe<ContentfulImpressumInfoFilterInput>;
  internal: InputMaybe<InternalFilterInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  rechtliches: InputMaybe<contentfulImpressumRechtlichesTextNodeFilterInput>;
  rechtlichesUeberschrift: InputMaybe<StringQueryOperatorInput>;
  spaceId: InputMaybe<StringQueryOperatorInput>;
  sys: InputMaybe<ContentfulImpressumSysFilterInput>;
  titel: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_contentfulImpressumRechtlichesTextNodeArgs = {
  childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  rechtliches: InputMaybe<StringQueryOperatorInput>;
  sys: InputMaybe<contentfulImpressumRechtlichesTextNodeSysFilterInput>;
};


type Query_contentfulKontaktArgs = {
  beschreibung: InputMaybe<contentfulKontaktBeschreibungTextNodeFilterInput>;
  childContentfulKontaktBeschreibungTextNode: InputMaybe<contentfulKontaktBeschreibungTextNodeFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenContentfulKontaktBeschreibungTextNode: InputMaybe<contentfulKontaktBeschreibungTextNodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  spaceId: InputMaybe<StringQueryOperatorInput>;
  sys: InputMaybe<ContentfulKontaktSysFilterInput>;
  ueberschrift: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_contentfulKontaktBeschreibungTextNodeArgs = {
  beschreibung: InputMaybe<StringQueryOperatorInput>;
  childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  sys: InputMaybe<contentfulKontaktBeschreibungTextNodeSysFilterInput>;
};


type Query_contentfulLayoutArgs = {
  childContentfulLayoutNewsletterTextTextNode: InputMaybe<contentfulLayoutNewsletterTextTextNodeFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenContentfulLayoutNewsletterTextTextNode: InputMaybe<contentfulLayoutNewsletterTextTextNodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  menue1: InputMaybe<StringQueryOperatorInput>;
  menue2: InputMaybe<StringQueryOperatorInput>;
  menue3: InputMaybe<StringQueryOperatorInput>;
  menue4: InputMaybe<StringQueryOperatorInput>;
  menue5: InputMaybe<StringQueryOperatorInput>;
  newsletterText: InputMaybe<contentfulLayoutNewsletterTextTextNodeFilterInput>;
  newsletterUeberschrift: InputMaybe<StringQueryOperatorInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  spaceId: InputMaybe<StringQueryOperatorInput>;
  sys: InputMaybe<ContentfulLayoutSysFilterInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_contentfulLayoutNewsletterTextTextNodeArgs = {
  childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  newsletterText: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  sys: InputMaybe<contentfulLayoutNewsletterTextTextNodeSysFilterInput>;
};


type Query_contentfulLeistungenArgs = {
  beschreibung: InputMaybe<contentfulLeistungenBeschreibungTextNodeFilterInput>;
  childContentfulLeistungenBeschreibungTextNode: InputMaybe<contentfulLeistungenBeschreibungTextNodeFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenContentfulLeistungenBeschreibungTextNode: InputMaybe<contentfulLeistungenBeschreibungTextNodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  spaceId: InputMaybe<StringQueryOperatorInput>;
  sys: InputMaybe<ContentfulLeistungenSysFilterInput>;
  ueberschrift: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_contentfulLeistungenBeschreibungTextNodeArgs = {
  beschreibung: InputMaybe<StringQueryOperatorInput>;
  childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  sys: InputMaybe<contentfulLeistungenBeschreibungTextNodeSysFilterInput>;
};


type Query_contentfulLeistungenpostArgs = {
  childContentfulLeistungenpostTextTextNode: InputMaybe<contentfulLeistungenpostTextTextNodeFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenContentfulLeistungenpostTextTextNode: InputMaybe<contentfulLeistungenpostTextTextNodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  reihenfolge: InputMaybe<IntQueryOperatorInput>;
  spaceId: InputMaybe<StringQueryOperatorInput>;
  sys: InputMaybe<ContentfulLeistungenpostSysFilterInput>;
  text: InputMaybe<contentfulLeistungenpostTextTextNodeFilterInput>;
  ueberschrift: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_contentfulLeistungenpostTextTextNodeArgs = {
  childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  sys: InputMaybe<contentfulLeistungenpostTextTextNodeSysFilterInput>;
  text: InputMaybe<StringQueryOperatorInput>;
};


type Query_contentfulNewsletterArgs = {
  childContentfulNewsletterTextTextNode: InputMaybe<contentfulNewsletterTextTextNodeFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenContentfulNewsletterTextTextNode: InputMaybe<contentfulNewsletterTextTextNodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  spaceId: InputMaybe<StringQueryOperatorInput>;
  sys: InputMaybe<ContentfulNewsletterSysFilterInput>;
  text: InputMaybe<contentfulNewsletterTextTextNodeFilterInput>;
  titel: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_contentfulNewsletterTextTextNodeArgs = {
  childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  sys: InputMaybe<contentfulNewsletterTextTextNodeSysFilterInput>;
  text: InputMaybe<StringQueryOperatorInput>;
};


type Query_contentfulSchwerpunkteArgs = {
  beschreibung: InputMaybe<contentfulSchwerpunkteBeschreibungTextNodeFilterInput>;
  childContentfulSchwerpunkteBeschreibungTextNode: InputMaybe<contentfulSchwerpunkteBeschreibungTextNodeFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenContentfulSchwerpunkteBeschreibungTextNode: InputMaybe<contentfulSchwerpunkteBeschreibungTextNodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  spaceId: InputMaybe<StringQueryOperatorInput>;
  sys: InputMaybe<ContentfulSchwerpunkteSysFilterInput>;
  ueberschrift: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_contentfulSchwerpunkteBeschreibungTextNodeArgs = {
  beschreibung: InputMaybe<StringQueryOperatorInput>;
  childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  sys: InputMaybe<contentfulSchwerpunkteBeschreibungTextNodeSysFilterInput>;
};


type Query_contentfulSchwerpunktepostArgs = {
  bild: InputMaybe<ContentfulAssetFilterInput>;
  childContentfulSchwerpunktepostTextTextNode: InputMaybe<contentfulSchwerpunktepostTextTextNodeFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenContentfulSchwerpunktepostTextTextNode: InputMaybe<contentfulSchwerpunktepostTextTextNodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  reihenfolge: InputMaybe<IntQueryOperatorInput>;
  spaceId: InputMaybe<StringQueryOperatorInput>;
  sys: InputMaybe<ContentfulSchwerpunktepostSysFilterInput>;
  text: InputMaybe<contentfulSchwerpunktepostTextTextNodeFilterInput>;
  ueberschrift: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_contentfulSchwerpunktepostTextTextNodeArgs = {
  childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  sys: InputMaybe<contentfulSchwerpunktepostTextTextNodeSysFilterInput>;
  text: InputMaybe<StringQueryOperatorInput>;
};


type Query_contentfulStartbildArgs = {
  bild: InputMaybe<ContentfulAssetFilterInput>;
  childContentfulStartbildTextTextNode: InputMaybe<contentfulStartbildTextTextNodeFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenContentfulStartbildTextTextNode: InputMaybe<contentfulStartbildTextTextNodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  spaceId: InputMaybe<StringQueryOperatorInput>;
  sys: InputMaybe<ContentfulStartbildSysFilterInput>;
  text: InputMaybe<contentfulStartbildTextTextNodeFilterInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_contentfulStartbildTextTextNodeArgs = {
  childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  sys: InputMaybe<contentfulStartbildTextTextNodeSysFilterInput>;
  text: InputMaybe<StringQueryOperatorInput>;
};


type Query_contentfulTerminArgs = {
  beschreibung: InputMaybe<contentfulTerminBeschreibungTextNodeFilterInput>;
  button: InputMaybe<contentfulTerminButtonTextNodeFilterInput>;
  button1: InputMaybe<StringQueryOperatorInput>;
  button2: InputMaybe<StringQueryOperatorInput>;
  button3: InputMaybe<StringQueryOperatorInput>;
  childContentfulTerminBeschreibungTextNode: InputMaybe<contentfulTerminBeschreibungTextNodeFilterInput>;
  childContentfulTerminButtonTextNode: InputMaybe<contentfulTerminButtonTextNodeFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenContentfulTerminBeschreibungTextNode: InputMaybe<contentfulTerminBeschreibungTextNodeFilterListInput>;
  childrenContentfulTerminButtonTextNode: InputMaybe<contentfulTerminButtonTextNodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  spaceId: InputMaybe<StringQueryOperatorInput>;
  sys: InputMaybe<ContentfulTerminSysFilterInput>;
  ueberschrift: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_contentfulTerminBeschreibungTextNodeArgs = {
  beschreibung: InputMaybe<StringQueryOperatorInput>;
  childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  sys: InputMaybe<contentfulTerminBeschreibungTextNodeSysFilterInput>;
};


type Query_contentfulTerminButtonTextNodeArgs = {
  button: InputMaybe<StringQueryOperatorInput>;
  childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  sys: InputMaybe<contentfulTerminButtonTextNodeSysFilterInput>;
};


type Query_contentfulTherapienpostArgs = {
  children: InputMaybe<NodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  spaceId: InputMaybe<StringQueryOperatorInput>;
  sys: InputMaybe<ContentfulTherapienpostSysFilterInput>;
  ueberschrift: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_contentfulUebermichArgs = {
  bild: InputMaybe<ContentfulAssetFilterInput>;
  childContentfulUebermichTextTextNode: InputMaybe<contentfulUebermichTextTextNodeFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenContentfulUebermichTextTextNode: InputMaybe<contentfulUebermichTextTextNodeFilterListInput>;
  contentful_id: InputMaybe<StringQueryOperatorInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  node_locale: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  spaceId: InputMaybe<StringQueryOperatorInput>;
  sys: InputMaybe<ContentfulUebermichSysFilterInput>;
  text: InputMaybe<contentfulUebermichTextTextNodeFilterInput>;
  ueberschrift: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_contentfulUebermichTextTextNodeArgs = {
  childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  sys: InputMaybe<contentfulUebermichTextTextNodeSysFilterInput>;
  text: InputMaybe<StringQueryOperatorInput>;
};


type Query_directoryArgs = {
  absolutePath: InputMaybe<StringQueryOperatorInput>;
  accessTime: InputMaybe<DateQueryOperatorInput>;
  atime: InputMaybe<DateQueryOperatorInput>;
  atimeMs: InputMaybe<FloatQueryOperatorInput>;
  base: InputMaybe<StringQueryOperatorInput>;
  birthTime: InputMaybe<DateQueryOperatorInput>;
  birthtime: InputMaybe<DateQueryOperatorInput>;
  birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  changeTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  ctime: InputMaybe<DateQueryOperatorInput>;
  ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  dev: InputMaybe<IntQueryOperatorInput>;
  dir: InputMaybe<StringQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  extension: InputMaybe<StringQueryOperatorInput>;
  gid: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ino: InputMaybe<FloatQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mode: InputMaybe<IntQueryOperatorInput>;
  modifiedTime: InputMaybe<DateQueryOperatorInput>;
  mtime: InputMaybe<DateQueryOperatorInput>;
  mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nlink: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prettySize: InputMaybe<StringQueryOperatorInput>;
  rdev: InputMaybe<IntQueryOperatorInput>;
  relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  relativePath: InputMaybe<StringQueryOperatorInput>;
  root: InputMaybe<StringQueryOperatorInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<IntQueryOperatorInput>;
};


type Query_fileArgs = {
  absolutePath: InputMaybe<StringQueryOperatorInput>;
  accessTime: InputMaybe<DateQueryOperatorInput>;
  atime: InputMaybe<DateQueryOperatorInput>;
  atimeMs: InputMaybe<FloatQueryOperatorInput>;
  base: InputMaybe<StringQueryOperatorInput>;
  birthTime: InputMaybe<DateQueryOperatorInput>;
  birthtime: InputMaybe<DateQueryOperatorInput>;
  birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  blksize: InputMaybe<IntQueryOperatorInput>;
  blocks: InputMaybe<IntQueryOperatorInput>;
  changeTime: InputMaybe<DateQueryOperatorInput>;
  childImageSharp: InputMaybe<ImageSharpFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenImageSharp: InputMaybe<ImageSharpFilterListInput>;
  ctime: InputMaybe<DateQueryOperatorInput>;
  ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  dev: InputMaybe<IntQueryOperatorInput>;
  dir: InputMaybe<StringQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  extension: InputMaybe<StringQueryOperatorInput>;
  gid: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ino: InputMaybe<FloatQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mode: InputMaybe<IntQueryOperatorInput>;
  modifiedTime: InputMaybe<DateQueryOperatorInput>;
  mtime: InputMaybe<DateQueryOperatorInput>;
  mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nlink: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prettySize: InputMaybe<StringQueryOperatorInput>;
  publicURL: InputMaybe<StringQueryOperatorInput>;
  rdev: InputMaybe<IntQueryOperatorInput>;
  relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  relativePath: InputMaybe<StringQueryOperatorInput>;
  root: InputMaybe<StringQueryOperatorInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<IntQueryOperatorInput>;
};


type Query_imageSharpArgs = {
  children: InputMaybe<NodeFilterListInput>;
  fixed: InputMaybe<ImageSharpFixedFilterInput>;
  fluid: InputMaybe<ImageSharpFluidFilterInput>;
  gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  original: InputMaybe<ImageSharpOriginalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  resize: InputMaybe<ImageSharpResizeFilterInput>;
};


type Query_markdownRemarkArgs = {
  children: InputMaybe<NodeFilterListInput>;
  excerpt: InputMaybe<StringQueryOperatorInput>;
  excerptAst: InputMaybe<JSONQueryOperatorInput>;
  frontmatter: InputMaybe<MarkdownRemarkFrontmatterFilterInput>;
  headings: InputMaybe<MarkdownHeadingFilterListInput>;
  html: InputMaybe<StringQueryOperatorInput>;
  htmlAst: InputMaybe<JSONQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  rawMarkdownBody: InputMaybe<StringQueryOperatorInput>;
  tableOfContents: InputMaybe<StringQueryOperatorInput>;
  timeToRead: InputMaybe<IntQueryOperatorInput>;
  wordCount: InputMaybe<MarkdownWordCountFilterInput>;
};


type Query_siteArgs = {
  buildTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  host: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  port: InputMaybe<IntQueryOperatorInput>;
  siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
};


type Query_siteBuildMetadataArgs = {
  buildTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_siteFunctionArgs = {
  absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  functionRoute: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  matchPath: InputMaybe<StringQueryOperatorInput>;
  originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
  originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pluginName: InputMaybe<StringQueryOperatorInput>;
  relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
};


type Query_sitePageArgs = {
  children: InputMaybe<NodeFilterListInput>;
  component: InputMaybe<StringQueryOperatorInput>;
  componentChunkName: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  internalComponentName: InputMaybe<StringQueryOperatorInput>;
  matchPath: InputMaybe<StringQueryOperatorInput>;
  pageContext: InputMaybe<JSONQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  path: InputMaybe<StringQueryOperatorInput>;
  pluginCreator: InputMaybe<SitePluginFilterInput>;
};


type Query_sitePluginArgs = {
  browserAPIs: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nodeAPIs: InputMaybe<StringQueryOperatorInput>;
  packageJson: InputMaybe<JSONQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pluginFilepath: InputMaybe<StringQueryOperatorInput>;
  pluginOptions: InputMaybe<JSONQueryOperatorInput>;
  resolve: InputMaybe<StringQueryOperatorInput>;
  ssrAPIs: InputMaybe<StringQueryOperatorInput>;
  version: InputMaybe<StringQueryOperatorInput>;
};

/** Remote Interface */
type RemoteFile = {
  readonly filename: Scalars['String'];
  readonly filesize: Maybe<Scalars['Int']>;
  /** Data used in the <GatsbyImage /> component. See https://gatsby.dev/img for more info. */
  readonly gatsbyImage: Maybe<Scalars['GatsbyImageData']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly id: Scalars['ID'];
  readonly mimeType: Scalars['String'];
  readonly publicUrl: Scalars['String'];
  readonly resize: Maybe<RemoteFileResize>;
  readonly width: Maybe<Scalars['Int']>;
};


/** Remote Interface */
type RemoteFile_gatsbyImageArgs = {
  aspectRatio: InputMaybe<Scalars['Float']>;
  backgroundColor: InputMaybe<Scalars['String']>;
  breakpoints?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  cropFocus: InputMaybe<ReadonlyArray<InputMaybe<RemoteFileCropFocus>>>;
  fit?: InputMaybe<RemoteFileFit>;
  formats?: InputMaybe<ReadonlyArray<RemoteFileFormat>>;
  height: InputMaybe<Scalars['Int']>;
  layout?: InputMaybe<RemoteFileLayout>;
  outputPixelDensities?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  placeholder?: InputMaybe<RemoteFilePlaceholder>;
  quality?: InputMaybe<Scalars['Int']>;
  sizes: InputMaybe<Scalars['String']>;
  width: InputMaybe<Scalars['Int']>;
};


/** Remote Interface */
type RemoteFile_resizeArgs = {
  aspectRatio: InputMaybe<Scalars['Float']>;
  cropFocus: InputMaybe<ReadonlyArray<InputMaybe<RemoteFileCropFocus>>>;
  fit?: InputMaybe<RemoteFileFit>;
  format?: InputMaybe<RemoteFileFormat>;
  height: InputMaybe<Scalars['Int']>;
  quality?: InputMaybe<Scalars['Int']>;
  width: InputMaybe<Scalars['Int']>;
};

type RemoteFileCropFocus =
  | 'bottom'
  | 'center'
  | 'edges'
  | 'entropy'
  | 'faces'
  | 'left'
  | 'right'
  | 'top';

type RemoteFileFit =
  | 'contain'
  | 'cover'
  | 'fill'
  | 'outside';

type RemoteFileFormat =
  | 'auto'
  | 'avif'
  | 'jpg'
  | 'png'
  | 'webp';

type RemoteFileLayout =
  | 'constrained'
  | 'fixed'
  | 'fullWidth';

type RemoteFilePlaceholder =
  | 'blurred'
  | 'dominantColor'
  | 'none'
  | 'tracedSVG';

type RemoteFileResize = {
  readonly height: Maybe<Scalars['Int']>;
  readonly src: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};

type RemoteFileResizeFieldSelector = {
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type RemoteFileResizeFilterInput = {
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type RemoteFileResizeSortInput = {
  readonly height: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type Site = Node & {
  readonly buildTime: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly host: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly port: Maybe<Scalars['Int']>;
  readonly siteMetadata: Maybe<SiteSiteMetadata>;
};


type Site_buildTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SiteBuildMetadata = Node & {
  readonly buildTime: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};


type SiteBuildMetadata_buildTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SiteBuildMetadataConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
  readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteBuildMetadata>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteBuildMetadataConnection_distinctArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataConnection_groupArgs = {
  field: SiteBuildMetadataFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteBuildMetadataConnection_maxArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataConnection_minArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataConnection_sumArgs = {
  field: SiteBuildMetadataFieldSelector;
};

type SiteBuildMetadataEdge = {
  readonly next: Maybe<SiteBuildMetadata>;
  readonly node: SiteBuildMetadata;
  readonly previous: Maybe<SiteBuildMetadata>;
};

type SiteBuildMetadataFieldSelector = {
  readonly buildTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type SiteBuildMetadataFilterInput = {
  readonly buildTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type SiteBuildMetadataGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteBuildMetadata>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteBuildMetadataGroupConnection_distinctArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataGroupConnection_groupArgs = {
  field: SiteBuildMetadataFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteBuildMetadataGroupConnection_maxArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataGroupConnection_minArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataGroupConnection_sumArgs = {
  field: SiteBuildMetadataFieldSelector;
};

type SiteBuildMetadataSortInput = {
  readonly buildTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type SiteConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteEdge>;
  readonly group: ReadonlyArray<SiteGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Site>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteConnection_distinctArgs = {
  field: SiteFieldSelector;
};


type SiteConnection_groupArgs = {
  field: SiteFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteConnection_maxArgs = {
  field: SiteFieldSelector;
};


type SiteConnection_minArgs = {
  field: SiteFieldSelector;
};


type SiteConnection_sumArgs = {
  field: SiteFieldSelector;
};

type SiteEdge = {
  readonly next: Maybe<Site>;
  readonly node: Site;
  readonly previous: Maybe<Site>;
};

type SiteFieldSelector = {
  readonly buildTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly host: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly port: InputMaybe<FieldSelectorEnum>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataFieldSelector>;
};

type SiteFilterInput = {
  readonly buildTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly host: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly port: InputMaybe<IntQueryOperatorInput>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
};

type SiteFunction = Node & {
  readonly absoluteCompiledFilePath: Scalars['String'];
  readonly children: ReadonlyArray<Node>;
  readonly functionRoute: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly matchPath: Maybe<Scalars['String']>;
  readonly originalAbsoluteFilePath: Scalars['String'];
  readonly originalRelativeFilePath: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly pluginName: Scalars['String'];
  readonly relativeCompiledFilePath: Scalars['String'];
};

type SiteFunctionConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteFunctionEdge>;
  readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteFunction>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteFunctionConnection_distinctArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionConnection_groupArgs = {
  field: SiteFunctionFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteFunctionConnection_maxArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionConnection_minArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionConnection_sumArgs = {
  field: SiteFunctionFieldSelector;
};

type SiteFunctionEdge = {
  readonly next: Maybe<SiteFunction>;
  readonly node: SiteFunction;
  readonly previous: Maybe<SiteFunction>;
};

type SiteFunctionFieldSelector = {
  readonly absoluteCompiledFilePath: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly functionRoute: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly matchPath: InputMaybe<FieldSelectorEnum>;
  readonly originalAbsoluteFilePath: InputMaybe<FieldSelectorEnum>;
  readonly originalRelativeFilePath: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly pluginName: InputMaybe<FieldSelectorEnum>;
  readonly relativeCompiledFilePath: InputMaybe<FieldSelectorEnum>;
};

type SiteFunctionFilterInput = {
  readonly absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly functionRoute: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly matchPath: InputMaybe<StringQueryOperatorInput>;
  readonly originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pluginName: InputMaybe<StringQueryOperatorInput>;
  readonly relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
};

type SiteFunctionGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteFunctionEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteFunction>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteFunctionGroupConnection_distinctArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionGroupConnection_groupArgs = {
  field: SiteFunctionFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteFunctionGroupConnection_maxArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionGroupConnection_minArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionGroupConnection_sumArgs = {
  field: SiteFunctionFieldSelector;
};

type SiteFunctionSortInput = {
  readonly absoluteCompiledFilePath: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly functionRoute: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly matchPath: InputMaybe<SortOrderEnum>;
  readonly originalAbsoluteFilePath: InputMaybe<SortOrderEnum>;
  readonly originalRelativeFilePath: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly pluginName: InputMaybe<SortOrderEnum>;
  readonly relativeCompiledFilePath: InputMaybe<SortOrderEnum>;
};

type SiteGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Site>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteGroupConnection_distinctArgs = {
  field: SiteFieldSelector;
};


type SiteGroupConnection_groupArgs = {
  field: SiteFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteGroupConnection_maxArgs = {
  field: SiteFieldSelector;
};


type SiteGroupConnection_minArgs = {
  field: SiteFieldSelector;
};


type SiteGroupConnection_sumArgs = {
  field: SiteFieldSelector;
};

type SitePage = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly component: Scalars['String'];
  readonly componentChunkName: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly internalComponentName: Scalars['String'];
  readonly matchPath: Maybe<Scalars['String']>;
  readonly pageContext: Maybe<Scalars['JSON']>;
  readonly parent: Maybe<Node>;
  readonly path: Scalars['String'];
  readonly pluginCreator: Maybe<SitePlugin>;
};

type SitePageConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePageEdge>;
  readonly group: ReadonlyArray<SitePageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePageConnection_distinctArgs = {
  field: SitePageFieldSelector;
};


type SitePageConnection_groupArgs = {
  field: SitePageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePageConnection_maxArgs = {
  field: SitePageFieldSelector;
};


type SitePageConnection_minArgs = {
  field: SitePageFieldSelector;
};


type SitePageConnection_sumArgs = {
  field: SitePageFieldSelector;
};

type SitePageEdge = {
  readonly next: Maybe<SitePage>;
  readonly node: SitePage;
  readonly previous: Maybe<SitePage>;
};

type SitePageFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly component: InputMaybe<FieldSelectorEnum>;
  readonly componentChunkName: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly internalComponentName: InputMaybe<FieldSelectorEnum>;
  readonly matchPath: InputMaybe<FieldSelectorEnum>;
  readonly pageContext: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly path: InputMaybe<FieldSelectorEnum>;
  readonly pluginCreator: InputMaybe<SitePluginFieldSelector>;
};

type SitePageFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly component: InputMaybe<StringQueryOperatorInput>;
  readonly componentChunkName: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly internalComponentName: InputMaybe<StringQueryOperatorInput>;
  readonly matchPath: InputMaybe<StringQueryOperatorInput>;
  readonly pageContext: InputMaybe<JSONQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly path: InputMaybe<StringQueryOperatorInput>;
  readonly pluginCreator: InputMaybe<SitePluginFilterInput>;
};

type SitePageGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePageEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SitePageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePageGroupConnection_distinctArgs = {
  field: SitePageFieldSelector;
};


type SitePageGroupConnection_groupArgs = {
  field: SitePageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePageGroupConnection_maxArgs = {
  field: SitePageFieldSelector;
};


type SitePageGroupConnection_minArgs = {
  field: SitePageFieldSelector;
};


type SitePageGroupConnection_sumArgs = {
  field: SitePageFieldSelector;
};

type SitePageSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly component: InputMaybe<SortOrderEnum>;
  readonly componentChunkName: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly internalComponentName: InputMaybe<SortOrderEnum>;
  readonly matchPath: InputMaybe<SortOrderEnum>;
  readonly pageContext: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly path: InputMaybe<SortOrderEnum>;
  readonly pluginCreator: InputMaybe<SitePluginSortInput>;
};

type SitePlugin = Node & {
  readonly browserAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly name: Maybe<Scalars['String']>;
  readonly nodeAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly packageJson: Maybe<Scalars['JSON']>;
  readonly parent: Maybe<Node>;
  readonly pluginFilepath: Maybe<Scalars['String']>;
  readonly pluginOptions: Maybe<Scalars['JSON']>;
  readonly resolve: Maybe<Scalars['String']>;
  readonly ssrAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly version: Maybe<Scalars['String']>;
};

type SitePluginConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePluginEdge>;
  readonly group: ReadonlyArray<SitePluginGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePlugin>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePluginConnection_distinctArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginConnection_groupArgs = {
  field: SitePluginFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePluginConnection_maxArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginConnection_minArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginConnection_sumArgs = {
  field: SitePluginFieldSelector;
};

type SitePluginEdge = {
  readonly next: Maybe<SitePlugin>;
  readonly node: SitePlugin;
  readonly previous: Maybe<SitePlugin>;
};

type SitePluginFieldSelector = {
  readonly browserAPIs: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nodeAPIs: InputMaybe<FieldSelectorEnum>;
  readonly packageJson: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly pluginFilepath: InputMaybe<FieldSelectorEnum>;
  readonly pluginOptions: InputMaybe<FieldSelectorEnum>;
  readonly resolve: InputMaybe<FieldSelectorEnum>;
  readonly ssrAPIs: InputMaybe<FieldSelectorEnum>;
  readonly version: InputMaybe<FieldSelectorEnum>;
};

type SitePluginFilterInput = {
  readonly browserAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nodeAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly packageJson: InputMaybe<JSONQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pluginFilepath: InputMaybe<StringQueryOperatorInput>;
  readonly pluginOptions: InputMaybe<JSONQueryOperatorInput>;
  readonly resolve: InputMaybe<StringQueryOperatorInput>;
  readonly ssrAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly version: InputMaybe<StringQueryOperatorInput>;
};

type SitePluginGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePluginEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SitePluginGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePlugin>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePluginGroupConnection_distinctArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginGroupConnection_groupArgs = {
  field: SitePluginFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePluginGroupConnection_maxArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginGroupConnection_minArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginGroupConnection_sumArgs = {
  field: SitePluginFieldSelector;
};

type SitePluginSortInput = {
  readonly browserAPIs: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nodeAPIs: InputMaybe<SortOrderEnum>;
  readonly packageJson: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly pluginFilepath: InputMaybe<SortOrderEnum>;
  readonly pluginOptions: InputMaybe<SortOrderEnum>;
  readonly resolve: InputMaybe<SortOrderEnum>;
  readonly ssrAPIs: InputMaybe<SortOrderEnum>;
  readonly version: InputMaybe<SortOrderEnum>;
};

type SiteSiteMetadata = {
  readonly description: Maybe<Scalars['String']>;
  readonly siteUrl: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type SiteSiteMetadataFieldSelector = {
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly siteUrl: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type SiteSiteMetadataFilterInput = {
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly siteUrl: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type SiteSiteMetadataSortInput = {
  readonly description: InputMaybe<SortOrderEnum>;
  readonly siteUrl: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type SiteSortInput = {
  readonly buildTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly host: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly port: InputMaybe<SortOrderEnum>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataSortInput>;
};

type SortOrderEnum =
  | 'ASC'
  | 'DESC';

type StringQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['String']>;
  readonly glob: InputMaybe<Scalars['String']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly ne: InputMaybe<Scalars['String']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly regex: InputMaybe<Scalars['String']>;
};

type TransformOptions = {
  readonly cropFocus: InputMaybe<ImageCropFocus>;
  readonly duotone: InputMaybe<DuotoneGradient>;
  readonly fit: InputMaybe<ImageFit>;
  readonly grayscale: InputMaybe<Scalars['Boolean']>;
  readonly rotate: InputMaybe<Scalars['Int']>;
  readonly trim: InputMaybe<Scalars['Float']>;
};

type WebPOptions = {
  readonly quality: InputMaybe<Scalars['Int']>;
};

type contentfulAktuellesBeschreibungTextNode = Node & {
  readonly beschreibung: Maybe<Scalars['String']>;
  /** Returns the first child node of type MarkdownRemark or null if there are no children of given type on this node */
  readonly childMarkdownRemark: Maybe<MarkdownRemark>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type MarkdownRemark */
  readonly childrenMarkdownRemark: Maybe<ReadonlyArray<Maybe<MarkdownRemark>>>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly sys: Maybe<contentfulAktuellesBeschreibungTextNodeSys>;
};

type contentfulAktuellesBeschreibungTextNodeConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<contentfulAktuellesBeschreibungTextNodeEdge>;
  readonly group: ReadonlyArray<contentfulAktuellesBeschreibungTextNodeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<contentfulAktuellesBeschreibungTextNode>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type contentfulAktuellesBeschreibungTextNodeConnection_distinctArgs = {
  field: contentfulAktuellesBeschreibungTextNodeFieldSelector;
};


type contentfulAktuellesBeschreibungTextNodeConnection_groupArgs = {
  field: contentfulAktuellesBeschreibungTextNodeFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type contentfulAktuellesBeschreibungTextNodeConnection_maxArgs = {
  field: contentfulAktuellesBeschreibungTextNodeFieldSelector;
};


type contentfulAktuellesBeschreibungTextNodeConnection_minArgs = {
  field: contentfulAktuellesBeschreibungTextNodeFieldSelector;
};


type contentfulAktuellesBeschreibungTextNodeConnection_sumArgs = {
  field: contentfulAktuellesBeschreibungTextNodeFieldSelector;
};

type contentfulAktuellesBeschreibungTextNodeEdge = {
  readonly next: Maybe<contentfulAktuellesBeschreibungTextNode>;
  readonly node: contentfulAktuellesBeschreibungTextNode;
  readonly previous: Maybe<contentfulAktuellesBeschreibungTextNode>;
};

type contentfulAktuellesBeschreibungTextNodeFieldSelector = {
  readonly beschreibung: InputMaybe<FieldSelectorEnum>;
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly sys: InputMaybe<contentfulAktuellesBeschreibungTextNodeSysFieldSelector>;
};

type contentfulAktuellesBeschreibungTextNodeFilterInput = {
  readonly beschreibung: InputMaybe<StringQueryOperatorInput>;
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly sys: InputMaybe<contentfulAktuellesBeschreibungTextNodeSysFilterInput>;
};

type contentfulAktuellesBeschreibungTextNodeFilterListInput = {
  readonly elemMatch: InputMaybe<contentfulAktuellesBeschreibungTextNodeFilterInput>;
};

type contentfulAktuellesBeschreibungTextNodeGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<contentfulAktuellesBeschreibungTextNodeEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<contentfulAktuellesBeschreibungTextNodeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<contentfulAktuellesBeschreibungTextNode>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type contentfulAktuellesBeschreibungTextNodeGroupConnection_distinctArgs = {
  field: contentfulAktuellesBeschreibungTextNodeFieldSelector;
};


type contentfulAktuellesBeschreibungTextNodeGroupConnection_groupArgs = {
  field: contentfulAktuellesBeschreibungTextNodeFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type contentfulAktuellesBeschreibungTextNodeGroupConnection_maxArgs = {
  field: contentfulAktuellesBeschreibungTextNodeFieldSelector;
};


type contentfulAktuellesBeschreibungTextNodeGroupConnection_minArgs = {
  field: contentfulAktuellesBeschreibungTextNodeFieldSelector;
};


type contentfulAktuellesBeschreibungTextNodeGroupConnection_sumArgs = {
  field: contentfulAktuellesBeschreibungTextNodeFieldSelector;
};

type contentfulAktuellesBeschreibungTextNodeSortInput = {
  readonly beschreibung: InputMaybe<SortOrderEnum>;
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly sys: InputMaybe<contentfulAktuellesBeschreibungTextNodeSysSortInput>;
};

type contentfulAktuellesBeschreibungTextNodeSys = {
  readonly type: Maybe<Scalars['String']>;
};

type contentfulAktuellesBeschreibungTextNodeSysFieldSelector = {
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type contentfulAktuellesBeschreibungTextNodeSysFilterInput = {
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type contentfulAktuellesBeschreibungTextNodeSysSortInput = {
  readonly type: InputMaybe<SortOrderEnum>;
};

type contentfulAnfahrtBeschreibungTextNode = Node & {
  readonly beschreibung: Maybe<Scalars['String']>;
  /** Returns the first child node of type MarkdownRemark or null if there are no children of given type on this node */
  readonly childMarkdownRemark: Maybe<MarkdownRemark>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type MarkdownRemark */
  readonly childrenMarkdownRemark: Maybe<ReadonlyArray<Maybe<MarkdownRemark>>>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly sys: Maybe<contentfulAnfahrtBeschreibungTextNodeSys>;
};

type contentfulAnfahrtBeschreibungTextNodeConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<contentfulAnfahrtBeschreibungTextNodeEdge>;
  readonly group: ReadonlyArray<contentfulAnfahrtBeschreibungTextNodeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<contentfulAnfahrtBeschreibungTextNode>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type contentfulAnfahrtBeschreibungTextNodeConnection_distinctArgs = {
  field: contentfulAnfahrtBeschreibungTextNodeFieldSelector;
};


type contentfulAnfahrtBeschreibungTextNodeConnection_groupArgs = {
  field: contentfulAnfahrtBeschreibungTextNodeFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type contentfulAnfahrtBeschreibungTextNodeConnection_maxArgs = {
  field: contentfulAnfahrtBeschreibungTextNodeFieldSelector;
};


type contentfulAnfahrtBeschreibungTextNodeConnection_minArgs = {
  field: contentfulAnfahrtBeschreibungTextNodeFieldSelector;
};


type contentfulAnfahrtBeschreibungTextNodeConnection_sumArgs = {
  field: contentfulAnfahrtBeschreibungTextNodeFieldSelector;
};

type contentfulAnfahrtBeschreibungTextNodeEdge = {
  readonly next: Maybe<contentfulAnfahrtBeschreibungTextNode>;
  readonly node: contentfulAnfahrtBeschreibungTextNode;
  readonly previous: Maybe<contentfulAnfahrtBeschreibungTextNode>;
};

type contentfulAnfahrtBeschreibungTextNodeFieldSelector = {
  readonly beschreibung: InputMaybe<FieldSelectorEnum>;
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly sys: InputMaybe<contentfulAnfahrtBeschreibungTextNodeSysFieldSelector>;
};

type contentfulAnfahrtBeschreibungTextNodeFilterInput = {
  readonly beschreibung: InputMaybe<StringQueryOperatorInput>;
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly sys: InputMaybe<contentfulAnfahrtBeschreibungTextNodeSysFilterInput>;
};

type contentfulAnfahrtBeschreibungTextNodeFilterListInput = {
  readonly elemMatch: InputMaybe<contentfulAnfahrtBeschreibungTextNodeFilterInput>;
};

type contentfulAnfahrtBeschreibungTextNodeGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<contentfulAnfahrtBeschreibungTextNodeEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<contentfulAnfahrtBeschreibungTextNodeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<contentfulAnfahrtBeschreibungTextNode>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type contentfulAnfahrtBeschreibungTextNodeGroupConnection_distinctArgs = {
  field: contentfulAnfahrtBeschreibungTextNodeFieldSelector;
};


type contentfulAnfahrtBeschreibungTextNodeGroupConnection_groupArgs = {
  field: contentfulAnfahrtBeschreibungTextNodeFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type contentfulAnfahrtBeschreibungTextNodeGroupConnection_maxArgs = {
  field: contentfulAnfahrtBeschreibungTextNodeFieldSelector;
};


type contentfulAnfahrtBeschreibungTextNodeGroupConnection_minArgs = {
  field: contentfulAnfahrtBeschreibungTextNodeFieldSelector;
};


type contentfulAnfahrtBeschreibungTextNodeGroupConnection_sumArgs = {
  field: contentfulAnfahrtBeschreibungTextNodeFieldSelector;
};

type contentfulAnfahrtBeschreibungTextNodeSortInput = {
  readonly beschreibung: InputMaybe<SortOrderEnum>;
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly sys: InputMaybe<contentfulAnfahrtBeschreibungTextNodeSysSortInput>;
};

type contentfulAnfahrtBeschreibungTextNodeSys = {
  readonly type: Maybe<Scalars['String']>;
};

type contentfulAnfahrtBeschreibungTextNodeSysFieldSelector = {
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type contentfulAnfahrtBeschreibungTextNodeSysFilterInput = {
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type contentfulAnfahrtBeschreibungTextNodeSysSortInput = {
  readonly type: InputMaybe<SortOrderEnum>;
};

type contentfulBlogBeschreibungTextNode = Node & {
  readonly beschreibung: Maybe<Scalars['String']>;
  /** Returns the first child node of type MarkdownRemark or null if there are no children of given type on this node */
  readonly childMarkdownRemark: Maybe<MarkdownRemark>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type MarkdownRemark */
  readonly childrenMarkdownRemark: Maybe<ReadonlyArray<Maybe<MarkdownRemark>>>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly sys: Maybe<contentfulBlogBeschreibungTextNodeSys>;
};

type contentfulBlogBeschreibungTextNodeConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<contentfulBlogBeschreibungTextNodeEdge>;
  readonly group: ReadonlyArray<contentfulBlogBeschreibungTextNodeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<contentfulBlogBeschreibungTextNode>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type contentfulBlogBeschreibungTextNodeConnection_distinctArgs = {
  field: contentfulBlogBeschreibungTextNodeFieldSelector;
};


type contentfulBlogBeschreibungTextNodeConnection_groupArgs = {
  field: contentfulBlogBeschreibungTextNodeFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type contentfulBlogBeschreibungTextNodeConnection_maxArgs = {
  field: contentfulBlogBeschreibungTextNodeFieldSelector;
};


type contentfulBlogBeschreibungTextNodeConnection_minArgs = {
  field: contentfulBlogBeschreibungTextNodeFieldSelector;
};


type contentfulBlogBeschreibungTextNodeConnection_sumArgs = {
  field: contentfulBlogBeschreibungTextNodeFieldSelector;
};

type contentfulBlogBeschreibungTextNodeEdge = {
  readonly next: Maybe<contentfulBlogBeschreibungTextNode>;
  readonly node: contentfulBlogBeschreibungTextNode;
  readonly previous: Maybe<contentfulBlogBeschreibungTextNode>;
};

type contentfulBlogBeschreibungTextNodeFieldSelector = {
  readonly beschreibung: InputMaybe<FieldSelectorEnum>;
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly sys: InputMaybe<contentfulBlogBeschreibungTextNodeSysFieldSelector>;
};

type contentfulBlogBeschreibungTextNodeFilterInput = {
  readonly beschreibung: InputMaybe<StringQueryOperatorInput>;
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly sys: InputMaybe<contentfulBlogBeschreibungTextNodeSysFilterInput>;
};

type contentfulBlogBeschreibungTextNodeFilterListInput = {
  readonly elemMatch: InputMaybe<contentfulBlogBeschreibungTextNodeFilterInput>;
};

type contentfulBlogBeschreibungTextNodeGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<contentfulBlogBeschreibungTextNodeEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<contentfulBlogBeschreibungTextNodeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<contentfulBlogBeschreibungTextNode>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type contentfulBlogBeschreibungTextNodeGroupConnection_distinctArgs = {
  field: contentfulBlogBeschreibungTextNodeFieldSelector;
};


type contentfulBlogBeschreibungTextNodeGroupConnection_groupArgs = {
  field: contentfulBlogBeschreibungTextNodeFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type contentfulBlogBeschreibungTextNodeGroupConnection_maxArgs = {
  field: contentfulBlogBeschreibungTextNodeFieldSelector;
};


type contentfulBlogBeschreibungTextNodeGroupConnection_minArgs = {
  field: contentfulBlogBeschreibungTextNodeFieldSelector;
};


type contentfulBlogBeschreibungTextNodeGroupConnection_sumArgs = {
  field: contentfulBlogBeschreibungTextNodeFieldSelector;
};

type contentfulBlogBeschreibungTextNodeSortInput = {
  readonly beschreibung: InputMaybe<SortOrderEnum>;
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly sys: InputMaybe<contentfulBlogBeschreibungTextNodeSysSortInput>;
};

type contentfulBlogBeschreibungTextNodeSys = {
  readonly type: Maybe<Scalars['String']>;
};

type contentfulBlogBeschreibungTextNodeSysFieldSelector = {
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type contentfulBlogBeschreibungTextNodeSysFilterInput = {
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type contentfulBlogBeschreibungTextNodeSysSortInput = {
  readonly type: InputMaybe<SortOrderEnum>;
};

type contentfulBlogpostTextTextNode = Node & {
  /** Returns the first child node of type MarkdownRemark or null if there are no children of given type on this node */
  readonly childMarkdownRemark: Maybe<MarkdownRemark>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type MarkdownRemark */
  readonly childrenMarkdownRemark: Maybe<ReadonlyArray<Maybe<MarkdownRemark>>>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly sys: Maybe<contentfulBlogpostTextTextNodeSys>;
  readonly text: Maybe<Scalars['String']>;
};

type contentfulBlogpostTextTextNodeConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<contentfulBlogpostTextTextNodeEdge>;
  readonly group: ReadonlyArray<contentfulBlogpostTextTextNodeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<contentfulBlogpostTextTextNode>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type contentfulBlogpostTextTextNodeConnection_distinctArgs = {
  field: contentfulBlogpostTextTextNodeFieldSelector;
};


type contentfulBlogpostTextTextNodeConnection_groupArgs = {
  field: contentfulBlogpostTextTextNodeFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type contentfulBlogpostTextTextNodeConnection_maxArgs = {
  field: contentfulBlogpostTextTextNodeFieldSelector;
};


type contentfulBlogpostTextTextNodeConnection_minArgs = {
  field: contentfulBlogpostTextTextNodeFieldSelector;
};


type contentfulBlogpostTextTextNodeConnection_sumArgs = {
  field: contentfulBlogpostTextTextNodeFieldSelector;
};

type contentfulBlogpostTextTextNodeEdge = {
  readonly next: Maybe<contentfulBlogpostTextTextNode>;
  readonly node: contentfulBlogpostTextTextNode;
  readonly previous: Maybe<contentfulBlogpostTextTextNode>;
};

type contentfulBlogpostTextTextNodeFieldSelector = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly sys: InputMaybe<contentfulBlogpostTextTextNodeSysFieldSelector>;
  readonly text: InputMaybe<FieldSelectorEnum>;
};

type contentfulBlogpostTextTextNodeFilterInput = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly sys: InputMaybe<contentfulBlogpostTextTextNodeSysFilterInput>;
  readonly text: InputMaybe<StringQueryOperatorInput>;
};

type contentfulBlogpostTextTextNodeFilterListInput = {
  readonly elemMatch: InputMaybe<contentfulBlogpostTextTextNodeFilterInput>;
};

type contentfulBlogpostTextTextNodeGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<contentfulBlogpostTextTextNodeEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<contentfulBlogpostTextTextNodeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<contentfulBlogpostTextTextNode>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type contentfulBlogpostTextTextNodeGroupConnection_distinctArgs = {
  field: contentfulBlogpostTextTextNodeFieldSelector;
};


type contentfulBlogpostTextTextNodeGroupConnection_groupArgs = {
  field: contentfulBlogpostTextTextNodeFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type contentfulBlogpostTextTextNodeGroupConnection_maxArgs = {
  field: contentfulBlogpostTextTextNodeFieldSelector;
};


type contentfulBlogpostTextTextNodeGroupConnection_minArgs = {
  field: contentfulBlogpostTextTextNodeFieldSelector;
};


type contentfulBlogpostTextTextNodeGroupConnection_sumArgs = {
  field: contentfulBlogpostTextTextNodeFieldSelector;
};

type contentfulBlogpostTextTextNodeSortInput = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly sys: InputMaybe<contentfulBlogpostTextTextNodeSysSortInput>;
  readonly text: InputMaybe<SortOrderEnum>;
};

type contentfulBlogpostTextTextNodeSys = {
  readonly type: Maybe<Scalars['String']>;
};

type contentfulBlogpostTextTextNodeSysFieldSelector = {
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type contentfulBlogpostTextTextNodeSysFilterInput = {
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type contentfulBlogpostTextTextNodeSysSortInput = {
  readonly type: InputMaybe<SortOrderEnum>;
};

type contentfulImpressumRechtlichesTextNode = Node & {
  /** Returns the first child node of type MarkdownRemark or null if there are no children of given type on this node */
  readonly childMarkdownRemark: Maybe<MarkdownRemark>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type MarkdownRemark */
  readonly childrenMarkdownRemark: Maybe<ReadonlyArray<Maybe<MarkdownRemark>>>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly rechtliches: Maybe<Scalars['String']>;
  readonly sys: Maybe<contentfulImpressumRechtlichesTextNodeSys>;
};

type contentfulImpressumRechtlichesTextNodeConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<contentfulImpressumRechtlichesTextNodeEdge>;
  readonly group: ReadonlyArray<contentfulImpressumRechtlichesTextNodeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<contentfulImpressumRechtlichesTextNode>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type contentfulImpressumRechtlichesTextNodeConnection_distinctArgs = {
  field: contentfulImpressumRechtlichesTextNodeFieldSelector;
};


type contentfulImpressumRechtlichesTextNodeConnection_groupArgs = {
  field: contentfulImpressumRechtlichesTextNodeFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type contentfulImpressumRechtlichesTextNodeConnection_maxArgs = {
  field: contentfulImpressumRechtlichesTextNodeFieldSelector;
};


type contentfulImpressumRechtlichesTextNodeConnection_minArgs = {
  field: contentfulImpressumRechtlichesTextNodeFieldSelector;
};


type contentfulImpressumRechtlichesTextNodeConnection_sumArgs = {
  field: contentfulImpressumRechtlichesTextNodeFieldSelector;
};

type contentfulImpressumRechtlichesTextNodeEdge = {
  readonly next: Maybe<contentfulImpressumRechtlichesTextNode>;
  readonly node: contentfulImpressumRechtlichesTextNode;
  readonly previous: Maybe<contentfulImpressumRechtlichesTextNode>;
};

type contentfulImpressumRechtlichesTextNodeFieldSelector = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly rechtliches: InputMaybe<FieldSelectorEnum>;
  readonly sys: InputMaybe<contentfulImpressumRechtlichesTextNodeSysFieldSelector>;
};

type contentfulImpressumRechtlichesTextNodeFilterInput = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly rechtliches: InputMaybe<StringQueryOperatorInput>;
  readonly sys: InputMaybe<contentfulImpressumRechtlichesTextNodeSysFilterInput>;
};

type contentfulImpressumRechtlichesTextNodeFilterListInput = {
  readonly elemMatch: InputMaybe<contentfulImpressumRechtlichesTextNodeFilterInput>;
};

type contentfulImpressumRechtlichesTextNodeGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<contentfulImpressumRechtlichesTextNodeEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<contentfulImpressumRechtlichesTextNodeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<contentfulImpressumRechtlichesTextNode>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type contentfulImpressumRechtlichesTextNodeGroupConnection_distinctArgs = {
  field: contentfulImpressumRechtlichesTextNodeFieldSelector;
};


type contentfulImpressumRechtlichesTextNodeGroupConnection_groupArgs = {
  field: contentfulImpressumRechtlichesTextNodeFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type contentfulImpressumRechtlichesTextNodeGroupConnection_maxArgs = {
  field: contentfulImpressumRechtlichesTextNodeFieldSelector;
};


type contentfulImpressumRechtlichesTextNodeGroupConnection_minArgs = {
  field: contentfulImpressumRechtlichesTextNodeFieldSelector;
};


type contentfulImpressumRechtlichesTextNodeGroupConnection_sumArgs = {
  field: contentfulImpressumRechtlichesTextNodeFieldSelector;
};

type contentfulImpressumRechtlichesTextNodeSortInput = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly rechtliches: InputMaybe<SortOrderEnum>;
  readonly sys: InputMaybe<contentfulImpressumRechtlichesTextNodeSysSortInput>;
};

type contentfulImpressumRechtlichesTextNodeSys = {
  readonly type: Maybe<Scalars['String']>;
};

type contentfulImpressumRechtlichesTextNodeSysFieldSelector = {
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type contentfulImpressumRechtlichesTextNodeSysFilterInput = {
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type contentfulImpressumRechtlichesTextNodeSysSortInput = {
  readonly type: InputMaybe<SortOrderEnum>;
};

type contentfulKontaktBeschreibungTextNode = Node & {
  readonly beschreibung: Maybe<Scalars['String']>;
  /** Returns the first child node of type MarkdownRemark or null if there are no children of given type on this node */
  readonly childMarkdownRemark: Maybe<MarkdownRemark>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type MarkdownRemark */
  readonly childrenMarkdownRemark: Maybe<ReadonlyArray<Maybe<MarkdownRemark>>>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly sys: Maybe<contentfulKontaktBeschreibungTextNodeSys>;
};

type contentfulKontaktBeschreibungTextNodeConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<contentfulKontaktBeschreibungTextNodeEdge>;
  readonly group: ReadonlyArray<contentfulKontaktBeschreibungTextNodeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<contentfulKontaktBeschreibungTextNode>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type contentfulKontaktBeschreibungTextNodeConnection_distinctArgs = {
  field: contentfulKontaktBeschreibungTextNodeFieldSelector;
};


type contentfulKontaktBeschreibungTextNodeConnection_groupArgs = {
  field: contentfulKontaktBeschreibungTextNodeFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type contentfulKontaktBeschreibungTextNodeConnection_maxArgs = {
  field: contentfulKontaktBeschreibungTextNodeFieldSelector;
};


type contentfulKontaktBeschreibungTextNodeConnection_minArgs = {
  field: contentfulKontaktBeschreibungTextNodeFieldSelector;
};


type contentfulKontaktBeschreibungTextNodeConnection_sumArgs = {
  field: contentfulKontaktBeschreibungTextNodeFieldSelector;
};

type contentfulKontaktBeschreibungTextNodeEdge = {
  readonly next: Maybe<contentfulKontaktBeschreibungTextNode>;
  readonly node: contentfulKontaktBeschreibungTextNode;
  readonly previous: Maybe<contentfulKontaktBeschreibungTextNode>;
};

type contentfulKontaktBeschreibungTextNodeFieldSelector = {
  readonly beschreibung: InputMaybe<FieldSelectorEnum>;
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly sys: InputMaybe<contentfulKontaktBeschreibungTextNodeSysFieldSelector>;
};

type contentfulKontaktBeschreibungTextNodeFilterInput = {
  readonly beschreibung: InputMaybe<StringQueryOperatorInput>;
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly sys: InputMaybe<contentfulKontaktBeschreibungTextNodeSysFilterInput>;
};

type contentfulKontaktBeschreibungTextNodeFilterListInput = {
  readonly elemMatch: InputMaybe<contentfulKontaktBeschreibungTextNodeFilterInput>;
};

type contentfulKontaktBeschreibungTextNodeGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<contentfulKontaktBeschreibungTextNodeEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<contentfulKontaktBeschreibungTextNodeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<contentfulKontaktBeschreibungTextNode>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type contentfulKontaktBeschreibungTextNodeGroupConnection_distinctArgs = {
  field: contentfulKontaktBeschreibungTextNodeFieldSelector;
};


type contentfulKontaktBeschreibungTextNodeGroupConnection_groupArgs = {
  field: contentfulKontaktBeschreibungTextNodeFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type contentfulKontaktBeschreibungTextNodeGroupConnection_maxArgs = {
  field: contentfulKontaktBeschreibungTextNodeFieldSelector;
};


type contentfulKontaktBeschreibungTextNodeGroupConnection_minArgs = {
  field: contentfulKontaktBeschreibungTextNodeFieldSelector;
};


type contentfulKontaktBeschreibungTextNodeGroupConnection_sumArgs = {
  field: contentfulKontaktBeschreibungTextNodeFieldSelector;
};

type contentfulKontaktBeschreibungTextNodeSortInput = {
  readonly beschreibung: InputMaybe<SortOrderEnum>;
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly sys: InputMaybe<contentfulKontaktBeschreibungTextNodeSysSortInput>;
};

type contentfulKontaktBeschreibungTextNodeSys = {
  readonly type: Maybe<Scalars['String']>;
};

type contentfulKontaktBeschreibungTextNodeSysFieldSelector = {
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type contentfulKontaktBeschreibungTextNodeSysFilterInput = {
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type contentfulKontaktBeschreibungTextNodeSysSortInput = {
  readonly type: InputMaybe<SortOrderEnum>;
};

type contentfulLayoutNewsletterTextTextNode = Node & {
  /** Returns the first child node of type MarkdownRemark or null if there are no children of given type on this node */
  readonly childMarkdownRemark: Maybe<MarkdownRemark>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type MarkdownRemark */
  readonly childrenMarkdownRemark: Maybe<ReadonlyArray<Maybe<MarkdownRemark>>>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly newsletterText: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly sys: Maybe<contentfulLayoutNewsletterTextTextNodeSys>;
};

type contentfulLayoutNewsletterTextTextNodeConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<contentfulLayoutNewsletterTextTextNodeEdge>;
  readonly group: ReadonlyArray<contentfulLayoutNewsletterTextTextNodeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<contentfulLayoutNewsletterTextTextNode>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type contentfulLayoutNewsletterTextTextNodeConnection_distinctArgs = {
  field: contentfulLayoutNewsletterTextTextNodeFieldSelector;
};


type contentfulLayoutNewsletterTextTextNodeConnection_groupArgs = {
  field: contentfulLayoutNewsletterTextTextNodeFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type contentfulLayoutNewsletterTextTextNodeConnection_maxArgs = {
  field: contentfulLayoutNewsletterTextTextNodeFieldSelector;
};


type contentfulLayoutNewsletterTextTextNodeConnection_minArgs = {
  field: contentfulLayoutNewsletterTextTextNodeFieldSelector;
};


type contentfulLayoutNewsletterTextTextNodeConnection_sumArgs = {
  field: contentfulLayoutNewsletterTextTextNodeFieldSelector;
};

type contentfulLayoutNewsletterTextTextNodeEdge = {
  readonly next: Maybe<contentfulLayoutNewsletterTextTextNode>;
  readonly node: contentfulLayoutNewsletterTextTextNode;
  readonly previous: Maybe<contentfulLayoutNewsletterTextTextNode>;
};

type contentfulLayoutNewsletterTextTextNodeFieldSelector = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly newsletterText: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly sys: InputMaybe<contentfulLayoutNewsletterTextTextNodeSysFieldSelector>;
};

type contentfulLayoutNewsletterTextTextNodeFilterInput = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly newsletterText: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly sys: InputMaybe<contentfulLayoutNewsletterTextTextNodeSysFilterInput>;
};

type contentfulLayoutNewsletterTextTextNodeFilterListInput = {
  readonly elemMatch: InputMaybe<contentfulLayoutNewsletterTextTextNodeFilterInput>;
};

type contentfulLayoutNewsletterTextTextNodeGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<contentfulLayoutNewsletterTextTextNodeEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<contentfulLayoutNewsletterTextTextNodeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<contentfulLayoutNewsletterTextTextNode>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type contentfulLayoutNewsletterTextTextNodeGroupConnection_distinctArgs = {
  field: contentfulLayoutNewsletterTextTextNodeFieldSelector;
};


type contentfulLayoutNewsletterTextTextNodeGroupConnection_groupArgs = {
  field: contentfulLayoutNewsletterTextTextNodeFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type contentfulLayoutNewsletterTextTextNodeGroupConnection_maxArgs = {
  field: contentfulLayoutNewsletterTextTextNodeFieldSelector;
};


type contentfulLayoutNewsletterTextTextNodeGroupConnection_minArgs = {
  field: contentfulLayoutNewsletterTextTextNodeFieldSelector;
};


type contentfulLayoutNewsletterTextTextNodeGroupConnection_sumArgs = {
  field: contentfulLayoutNewsletterTextTextNodeFieldSelector;
};

type contentfulLayoutNewsletterTextTextNodeSortInput = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly newsletterText: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly sys: InputMaybe<contentfulLayoutNewsletterTextTextNodeSysSortInput>;
};

type contentfulLayoutNewsletterTextTextNodeSys = {
  readonly type: Maybe<Scalars['String']>;
};

type contentfulLayoutNewsletterTextTextNodeSysFieldSelector = {
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type contentfulLayoutNewsletterTextTextNodeSysFilterInput = {
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type contentfulLayoutNewsletterTextTextNodeSysSortInput = {
  readonly type: InputMaybe<SortOrderEnum>;
};

type contentfulLeistungenBeschreibungTextNode = Node & {
  readonly beschreibung: Maybe<Scalars['String']>;
  /** Returns the first child node of type MarkdownRemark or null if there are no children of given type on this node */
  readonly childMarkdownRemark: Maybe<MarkdownRemark>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type MarkdownRemark */
  readonly childrenMarkdownRemark: Maybe<ReadonlyArray<Maybe<MarkdownRemark>>>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly sys: Maybe<contentfulLeistungenBeschreibungTextNodeSys>;
};

type contentfulLeistungenBeschreibungTextNodeConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<contentfulLeistungenBeschreibungTextNodeEdge>;
  readonly group: ReadonlyArray<contentfulLeistungenBeschreibungTextNodeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<contentfulLeistungenBeschreibungTextNode>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type contentfulLeistungenBeschreibungTextNodeConnection_distinctArgs = {
  field: contentfulLeistungenBeschreibungTextNodeFieldSelector;
};


type contentfulLeistungenBeschreibungTextNodeConnection_groupArgs = {
  field: contentfulLeistungenBeschreibungTextNodeFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type contentfulLeistungenBeschreibungTextNodeConnection_maxArgs = {
  field: contentfulLeistungenBeschreibungTextNodeFieldSelector;
};


type contentfulLeistungenBeschreibungTextNodeConnection_minArgs = {
  field: contentfulLeistungenBeschreibungTextNodeFieldSelector;
};


type contentfulLeistungenBeschreibungTextNodeConnection_sumArgs = {
  field: contentfulLeistungenBeschreibungTextNodeFieldSelector;
};

type contentfulLeistungenBeschreibungTextNodeEdge = {
  readonly next: Maybe<contentfulLeistungenBeschreibungTextNode>;
  readonly node: contentfulLeistungenBeschreibungTextNode;
  readonly previous: Maybe<contentfulLeistungenBeschreibungTextNode>;
};

type contentfulLeistungenBeschreibungTextNodeFieldSelector = {
  readonly beschreibung: InputMaybe<FieldSelectorEnum>;
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly sys: InputMaybe<contentfulLeistungenBeschreibungTextNodeSysFieldSelector>;
};

type contentfulLeistungenBeschreibungTextNodeFilterInput = {
  readonly beschreibung: InputMaybe<StringQueryOperatorInput>;
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly sys: InputMaybe<contentfulLeistungenBeschreibungTextNodeSysFilterInput>;
};

type contentfulLeistungenBeschreibungTextNodeFilterListInput = {
  readonly elemMatch: InputMaybe<contentfulLeistungenBeschreibungTextNodeFilterInput>;
};

type contentfulLeistungenBeschreibungTextNodeGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<contentfulLeistungenBeschreibungTextNodeEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<contentfulLeistungenBeschreibungTextNodeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<contentfulLeistungenBeschreibungTextNode>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type contentfulLeistungenBeschreibungTextNodeGroupConnection_distinctArgs = {
  field: contentfulLeistungenBeschreibungTextNodeFieldSelector;
};


type contentfulLeistungenBeschreibungTextNodeGroupConnection_groupArgs = {
  field: contentfulLeistungenBeschreibungTextNodeFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type contentfulLeistungenBeschreibungTextNodeGroupConnection_maxArgs = {
  field: contentfulLeistungenBeschreibungTextNodeFieldSelector;
};


type contentfulLeistungenBeschreibungTextNodeGroupConnection_minArgs = {
  field: contentfulLeistungenBeschreibungTextNodeFieldSelector;
};


type contentfulLeistungenBeschreibungTextNodeGroupConnection_sumArgs = {
  field: contentfulLeistungenBeschreibungTextNodeFieldSelector;
};

type contentfulLeistungenBeschreibungTextNodeSortInput = {
  readonly beschreibung: InputMaybe<SortOrderEnum>;
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly sys: InputMaybe<contentfulLeistungenBeschreibungTextNodeSysSortInput>;
};

type contentfulLeistungenBeschreibungTextNodeSys = {
  readonly type: Maybe<Scalars['String']>;
};

type contentfulLeistungenBeschreibungTextNodeSysFieldSelector = {
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type contentfulLeistungenBeschreibungTextNodeSysFilterInput = {
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type contentfulLeistungenBeschreibungTextNodeSysSortInput = {
  readonly type: InputMaybe<SortOrderEnum>;
};

type contentfulLeistungenpostTextTextNode = Node & {
  /** Returns the first child node of type MarkdownRemark or null if there are no children of given type on this node */
  readonly childMarkdownRemark: Maybe<MarkdownRemark>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type MarkdownRemark */
  readonly childrenMarkdownRemark: Maybe<ReadonlyArray<Maybe<MarkdownRemark>>>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly sys: Maybe<contentfulLeistungenpostTextTextNodeSys>;
  readonly text: Maybe<Scalars['String']>;
};

type contentfulLeistungenpostTextTextNodeConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<contentfulLeistungenpostTextTextNodeEdge>;
  readonly group: ReadonlyArray<contentfulLeistungenpostTextTextNodeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<contentfulLeistungenpostTextTextNode>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type contentfulLeistungenpostTextTextNodeConnection_distinctArgs = {
  field: contentfulLeistungenpostTextTextNodeFieldSelector;
};


type contentfulLeistungenpostTextTextNodeConnection_groupArgs = {
  field: contentfulLeistungenpostTextTextNodeFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type contentfulLeistungenpostTextTextNodeConnection_maxArgs = {
  field: contentfulLeistungenpostTextTextNodeFieldSelector;
};


type contentfulLeistungenpostTextTextNodeConnection_minArgs = {
  field: contentfulLeistungenpostTextTextNodeFieldSelector;
};


type contentfulLeistungenpostTextTextNodeConnection_sumArgs = {
  field: contentfulLeistungenpostTextTextNodeFieldSelector;
};

type contentfulLeistungenpostTextTextNodeEdge = {
  readonly next: Maybe<contentfulLeistungenpostTextTextNode>;
  readonly node: contentfulLeistungenpostTextTextNode;
  readonly previous: Maybe<contentfulLeistungenpostTextTextNode>;
};

type contentfulLeistungenpostTextTextNodeFieldSelector = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly sys: InputMaybe<contentfulLeistungenpostTextTextNodeSysFieldSelector>;
  readonly text: InputMaybe<FieldSelectorEnum>;
};

type contentfulLeistungenpostTextTextNodeFilterInput = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly sys: InputMaybe<contentfulLeistungenpostTextTextNodeSysFilterInput>;
  readonly text: InputMaybe<StringQueryOperatorInput>;
};

type contentfulLeistungenpostTextTextNodeFilterListInput = {
  readonly elemMatch: InputMaybe<contentfulLeistungenpostTextTextNodeFilterInput>;
};

type contentfulLeistungenpostTextTextNodeGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<contentfulLeistungenpostTextTextNodeEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<contentfulLeistungenpostTextTextNodeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<contentfulLeistungenpostTextTextNode>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type contentfulLeistungenpostTextTextNodeGroupConnection_distinctArgs = {
  field: contentfulLeistungenpostTextTextNodeFieldSelector;
};


type contentfulLeistungenpostTextTextNodeGroupConnection_groupArgs = {
  field: contentfulLeistungenpostTextTextNodeFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type contentfulLeistungenpostTextTextNodeGroupConnection_maxArgs = {
  field: contentfulLeistungenpostTextTextNodeFieldSelector;
};


type contentfulLeistungenpostTextTextNodeGroupConnection_minArgs = {
  field: contentfulLeistungenpostTextTextNodeFieldSelector;
};


type contentfulLeistungenpostTextTextNodeGroupConnection_sumArgs = {
  field: contentfulLeistungenpostTextTextNodeFieldSelector;
};

type contentfulLeistungenpostTextTextNodeSortInput = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly sys: InputMaybe<contentfulLeistungenpostTextTextNodeSysSortInput>;
  readonly text: InputMaybe<SortOrderEnum>;
};

type contentfulLeistungenpostTextTextNodeSys = {
  readonly type: Maybe<Scalars['String']>;
};

type contentfulLeistungenpostTextTextNodeSysFieldSelector = {
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type contentfulLeistungenpostTextTextNodeSysFilterInput = {
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type contentfulLeistungenpostTextTextNodeSysSortInput = {
  readonly type: InputMaybe<SortOrderEnum>;
};

type contentfulNewsletterTextTextNode = Node & {
  /** Returns the first child node of type MarkdownRemark or null if there are no children of given type on this node */
  readonly childMarkdownRemark: Maybe<MarkdownRemark>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type MarkdownRemark */
  readonly childrenMarkdownRemark: Maybe<ReadonlyArray<Maybe<MarkdownRemark>>>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly sys: Maybe<contentfulNewsletterTextTextNodeSys>;
  readonly text: Maybe<Scalars['String']>;
};

type contentfulNewsletterTextTextNodeConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<contentfulNewsletterTextTextNodeEdge>;
  readonly group: ReadonlyArray<contentfulNewsletterTextTextNodeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<contentfulNewsletterTextTextNode>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type contentfulNewsletterTextTextNodeConnection_distinctArgs = {
  field: contentfulNewsletterTextTextNodeFieldSelector;
};


type contentfulNewsletterTextTextNodeConnection_groupArgs = {
  field: contentfulNewsletterTextTextNodeFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type contentfulNewsletterTextTextNodeConnection_maxArgs = {
  field: contentfulNewsletterTextTextNodeFieldSelector;
};


type contentfulNewsletterTextTextNodeConnection_minArgs = {
  field: contentfulNewsletterTextTextNodeFieldSelector;
};


type contentfulNewsletterTextTextNodeConnection_sumArgs = {
  field: contentfulNewsletterTextTextNodeFieldSelector;
};

type contentfulNewsletterTextTextNodeEdge = {
  readonly next: Maybe<contentfulNewsletterTextTextNode>;
  readonly node: contentfulNewsletterTextTextNode;
  readonly previous: Maybe<contentfulNewsletterTextTextNode>;
};

type contentfulNewsletterTextTextNodeFieldSelector = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly sys: InputMaybe<contentfulNewsletterTextTextNodeSysFieldSelector>;
  readonly text: InputMaybe<FieldSelectorEnum>;
};

type contentfulNewsletterTextTextNodeFilterInput = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly sys: InputMaybe<contentfulNewsletterTextTextNodeSysFilterInput>;
  readonly text: InputMaybe<StringQueryOperatorInput>;
};

type contentfulNewsletterTextTextNodeFilterListInput = {
  readonly elemMatch: InputMaybe<contentfulNewsletterTextTextNodeFilterInput>;
};

type contentfulNewsletterTextTextNodeGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<contentfulNewsletterTextTextNodeEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<contentfulNewsletterTextTextNodeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<contentfulNewsletterTextTextNode>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type contentfulNewsletterTextTextNodeGroupConnection_distinctArgs = {
  field: contentfulNewsletterTextTextNodeFieldSelector;
};


type contentfulNewsletterTextTextNodeGroupConnection_groupArgs = {
  field: contentfulNewsletterTextTextNodeFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type contentfulNewsletterTextTextNodeGroupConnection_maxArgs = {
  field: contentfulNewsletterTextTextNodeFieldSelector;
};


type contentfulNewsletterTextTextNodeGroupConnection_minArgs = {
  field: contentfulNewsletterTextTextNodeFieldSelector;
};


type contentfulNewsletterTextTextNodeGroupConnection_sumArgs = {
  field: contentfulNewsletterTextTextNodeFieldSelector;
};

type contentfulNewsletterTextTextNodeSortInput = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly sys: InputMaybe<contentfulNewsletterTextTextNodeSysSortInput>;
  readonly text: InputMaybe<SortOrderEnum>;
};

type contentfulNewsletterTextTextNodeSys = {
  readonly type: Maybe<Scalars['String']>;
};

type contentfulNewsletterTextTextNodeSysFieldSelector = {
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type contentfulNewsletterTextTextNodeSysFilterInput = {
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type contentfulNewsletterTextTextNodeSysSortInput = {
  readonly type: InputMaybe<SortOrderEnum>;
};

type contentfulSchwerpunkteBeschreibungTextNode = Node & {
  readonly beschreibung: Maybe<Scalars['String']>;
  /** Returns the first child node of type MarkdownRemark or null if there are no children of given type on this node */
  readonly childMarkdownRemark: Maybe<MarkdownRemark>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type MarkdownRemark */
  readonly childrenMarkdownRemark: Maybe<ReadonlyArray<Maybe<MarkdownRemark>>>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly sys: Maybe<contentfulSchwerpunkteBeschreibungTextNodeSys>;
};

type contentfulSchwerpunkteBeschreibungTextNodeConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<contentfulSchwerpunkteBeschreibungTextNodeEdge>;
  readonly group: ReadonlyArray<contentfulSchwerpunkteBeschreibungTextNodeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<contentfulSchwerpunkteBeschreibungTextNode>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type contentfulSchwerpunkteBeschreibungTextNodeConnection_distinctArgs = {
  field: contentfulSchwerpunkteBeschreibungTextNodeFieldSelector;
};


type contentfulSchwerpunkteBeschreibungTextNodeConnection_groupArgs = {
  field: contentfulSchwerpunkteBeschreibungTextNodeFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type contentfulSchwerpunkteBeschreibungTextNodeConnection_maxArgs = {
  field: contentfulSchwerpunkteBeschreibungTextNodeFieldSelector;
};


type contentfulSchwerpunkteBeschreibungTextNodeConnection_minArgs = {
  field: contentfulSchwerpunkteBeschreibungTextNodeFieldSelector;
};


type contentfulSchwerpunkteBeschreibungTextNodeConnection_sumArgs = {
  field: contentfulSchwerpunkteBeschreibungTextNodeFieldSelector;
};

type contentfulSchwerpunkteBeschreibungTextNodeEdge = {
  readonly next: Maybe<contentfulSchwerpunkteBeschreibungTextNode>;
  readonly node: contentfulSchwerpunkteBeschreibungTextNode;
  readonly previous: Maybe<contentfulSchwerpunkteBeschreibungTextNode>;
};

type contentfulSchwerpunkteBeschreibungTextNodeFieldSelector = {
  readonly beschreibung: InputMaybe<FieldSelectorEnum>;
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly sys: InputMaybe<contentfulSchwerpunkteBeschreibungTextNodeSysFieldSelector>;
};

type contentfulSchwerpunkteBeschreibungTextNodeFilterInput = {
  readonly beschreibung: InputMaybe<StringQueryOperatorInput>;
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly sys: InputMaybe<contentfulSchwerpunkteBeschreibungTextNodeSysFilterInput>;
};

type contentfulSchwerpunkteBeschreibungTextNodeFilterListInput = {
  readonly elemMatch: InputMaybe<contentfulSchwerpunkteBeschreibungTextNodeFilterInput>;
};

type contentfulSchwerpunkteBeschreibungTextNodeGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<contentfulSchwerpunkteBeschreibungTextNodeEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<contentfulSchwerpunkteBeschreibungTextNodeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<contentfulSchwerpunkteBeschreibungTextNode>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type contentfulSchwerpunkteBeschreibungTextNodeGroupConnection_distinctArgs = {
  field: contentfulSchwerpunkteBeschreibungTextNodeFieldSelector;
};


type contentfulSchwerpunkteBeschreibungTextNodeGroupConnection_groupArgs = {
  field: contentfulSchwerpunkteBeschreibungTextNodeFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type contentfulSchwerpunkteBeschreibungTextNodeGroupConnection_maxArgs = {
  field: contentfulSchwerpunkteBeschreibungTextNodeFieldSelector;
};


type contentfulSchwerpunkteBeschreibungTextNodeGroupConnection_minArgs = {
  field: contentfulSchwerpunkteBeschreibungTextNodeFieldSelector;
};


type contentfulSchwerpunkteBeschreibungTextNodeGroupConnection_sumArgs = {
  field: contentfulSchwerpunkteBeschreibungTextNodeFieldSelector;
};

type contentfulSchwerpunkteBeschreibungTextNodeSortInput = {
  readonly beschreibung: InputMaybe<SortOrderEnum>;
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly sys: InputMaybe<contentfulSchwerpunkteBeschreibungTextNodeSysSortInput>;
};

type contentfulSchwerpunkteBeschreibungTextNodeSys = {
  readonly type: Maybe<Scalars['String']>;
};

type contentfulSchwerpunkteBeschreibungTextNodeSysFieldSelector = {
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type contentfulSchwerpunkteBeschreibungTextNodeSysFilterInput = {
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type contentfulSchwerpunkteBeschreibungTextNodeSysSortInput = {
  readonly type: InputMaybe<SortOrderEnum>;
};

type contentfulSchwerpunktepostTextTextNode = Node & {
  /** Returns the first child node of type MarkdownRemark or null if there are no children of given type on this node */
  readonly childMarkdownRemark: Maybe<MarkdownRemark>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type MarkdownRemark */
  readonly childrenMarkdownRemark: Maybe<ReadonlyArray<Maybe<MarkdownRemark>>>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly sys: Maybe<contentfulSchwerpunktepostTextTextNodeSys>;
  readonly text: Maybe<Scalars['String']>;
};

type contentfulSchwerpunktepostTextTextNodeConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<contentfulSchwerpunktepostTextTextNodeEdge>;
  readonly group: ReadonlyArray<contentfulSchwerpunktepostTextTextNodeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<contentfulSchwerpunktepostTextTextNode>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type contentfulSchwerpunktepostTextTextNodeConnection_distinctArgs = {
  field: contentfulSchwerpunktepostTextTextNodeFieldSelector;
};


type contentfulSchwerpunktepostTextTextNodeConnection_groupArgs = {
  field: contentfulSchwerpunktepostTextTextNodeFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type contentfulSchwerpunktepostTextTextNodeConnection_maxArgs = {
  field: contentfulSchwerpunktepostTextTextNodeFieldSelector;
};


type contentfulSchwerpunktepostTextTextNodeConnection_minArgs = {
  field: contentfulSchwerpunktepostTextTextNodeFieldSelector;
};


type contentfulSchwerpunktepostTextTextNodeConnection_sumArgs = {
  field: contentfulSchwerpunktepostTextTextNodeFieldSelector;
};

type contentfulSchwerpunktepostTextTextNodeEdge = {
  readonly next: Maybe<contentfulSchwerpunktepostTextTextNode>;
  readonly node: contentfulSchwerpunktepostTextTextNode;
  readonly previous: Maybe<contentfulSchwerpunktepostTextTextNode>;
};

type contentfulSchwerpunktepostTextTextNodeFieldSelector = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly sys: InputMaybe<contentfulSchwerpunktepostTextTextNodeSysFieldSelector>;
  readonly text: InputMaybe<FieldSelectorEnum>;
};

type contentfulSchwerpunktepostTextTextNodeFilterInput = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly sys: InputMaybe<contentfulSchwerpunktepostTextTextNodeSysFilterInput>;
  readonly text: InputMaybe<StringQueryOperatorInput>;
};

type contentfulSchwerpunktepostTextTextNodeFilterListInput = {
  readonly elemMatch: InputMaybe<contentfulSchwerpunktepostTextTextNodeFilterInput>;
};

type contentfulSchwerpunktepostTextTextNodeGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<contentfulSchwerpunktepostTextTextNodeEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<contentfulSchwerpunktepostTextTextNodeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<contentfulSchwerpunktepostTextTextNode>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type contentfulSchwerpunktepostTextTextNodeGroupConnection_distinctArgs = {
  field: contentfulSchwerpunktepostTextTextNodeFieldSelector;
};


type contentfulSchwerpunktepostTextTextNodeGroupConnection_groupArgs = {
  field: contentfulSchwerpunktepostTextTextNodeFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type contentfulSchwerpunktepostTextTextNodeGroupConnection_maxArgs = {
  field: contentfulSchwerpunktepostTextTextNodeFieldSelector;
};


type contentfulSchwerpunktepostTextTextNodeGroupConnection_minArgs = {
  field: contentfulSchwerpunktepostTextTextNodeFieldSelector;
};


type contentfulSchwerpunktepostTextTextNodeGroupConnection_sumArgs = {
  field: contentfulSchwerpunktepostTextTextNodeFieldSelector;
};

type contentfulSchwerpunktepostTextTextNodeSortInput = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly sys: InputMaybe<contentfulSchwerpunktepostTextTextNodeSysSortInput>;
  readonly text: InputMaybe<SortOrderEnum>;
};

type contentfulSchwerpunktepostTextTextNodeSys = {
  readonly type: Maybe<Scalars['String']>;
};

type contentfulSchwerpunktepostTextTextNodeSysFieldSelector = {
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type contentfulSchwerpunktepostTextTextNodeSysFilterInput = {
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type contentfulSchwerpunktepostTextTextNodeSysSortInput = {
  readonly type: InputMaybe<SortOrderEnum>;
};

type contentfulStartbildTextTextNode = Node & {
  /** Returns the first child node of type MarkdownRemark or null if there are no children of given type on this node */
  readonly childMarkdownRemark: Maybe<MarkdownRemark>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type MarkdownRemark */
  readonly childrenMarkdownRemark: Maybe<ReadonlyArray<Maybe<MarkdownRemark>>>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly sys: Maybe<contentfulStartbildTextTextNodeSys>;
  readonly text: Maybe<Scalars['String']>;
};

type contentfulStartbildTextTextNodeConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<contentfulStartbildTextTextNodeEdge>;
  readonly group: ReadonlyArray<contentfulStartbildTextTextNodeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<contentfulStartbildTextTextNode>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type contentfulStartbildTextTextNodeConnection_distinctArgs = {
  field: contentfulStartbildTextTextNodeFieldSelector;
};


type contentfulStartbildTextTextNodeConnection_groupArgs = {
  field: contentfulStartbildTextTextNodeFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type contentfulStartbildTextTextNodeConnection_maxArgs = {
  field: contentfulStartbildTextTextNodeFieldSelector;
};


type contentfulStartbildTextTextNodeConnection_minArgs = {
  field: contentfulStartbildTextTextNodeFieldSelector;
};


type contentfulStartbildTextTextNodeConnection_sumArgs = {
  field: contentfulStartbildTextTextNodeFieldSelector;
};

type contentfulStartbildTextTextNodeEdge = {
  readonly next: Maybe<contentfulStartbildTextTextNode>;
  readonly node: contentfulStartbildTextTextNode;
  readonly previous: Maybe<contentfulStartbildTextTextNode>;
};

type contentfulStartbildTextTextNodeFieldSelector = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly sys: InputMaybe<contentfulStartbildTextTextNodeSysFieldSelector>;
  readonly text: InputMaybe<FieldSelectorEnum>;
};

type contentfulStartbildTextTextNodeFilterInput = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly sys: InputMaybe<contentfulStartbildTextTextNodeSysFilterInput>;
  readonly text: InputMaybe<StringQueryOperatorInput>;
};

type contentfulStartbildTextTextNodeFilterListInput = {
  readonly elemMatch: InputMaybe<contentfulStartbildTextTextNodeFilterInput>;
};

type contentfulStartbildTextTextNodeGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<contentfulStartbildTextTextNodeEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<contentfulStartbildTextTextNodeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<contentfulStartbildTextTextNode>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type contentfulStartbildTextTextNodeGroupConnection_distinctArgs = {
  field: contentfulStartbildTextTextNodeFieldSelector;
};


type contentfulStartbildTextTextNodeGroupConnection_groupArgs = {
  field: contentfulStartbildTextTextNodeFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type contentfulStartbildTextTextNodeGroupConnection_maxArgs = {
  field: contentfulStartbildTextTextNodeFieldSelector;
};


type contentfulStartbildTextTextNodeGroupConnection_minArgs = {
  field: contentfulStartbildTextTextNodeFieldSelector;
};


type contentfulStartbildTextTextNodeGroupConnection_sumArgs = {
  field: contentfulStartbildTextTextNodeFieldSelector;
};

type contentfulStartbildTextTextNodeSortInput = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly sys: InputMaybe<contentfulStartbildTextTextNodeSysSortInput>;
  readonly text: InputMaybe<SortOrderEnum>;
};

type contentfulStartbildTextTextNodeSys = {
  readonly type: Maybe<Scalars['String']>;
};

type contentfulStartbildTextTextNodeSysFieldSelector = {
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type contentfulStartbildTextTextNodeSysFilterInput = {
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type contentfulStartbildTextTextNodeSysSortInput = {
  readonly type: InputMaybe<SortOrderEnum>;
};

type contentfulTerminBeschreibungTextNode = Node & {
  readonly beschreibung: Maybe<Scalars['String']>;
  /** Returns the first child node of type MarkdownRemark or null if there are no children of given type on this node */
  readonly childMarkdownRemark: Maybe<MarkdownRemark>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type MarkdownRemark */
  readonly childrenMarkdownRemark: Maybe<ReadonlyArray<Maybe<MarkdownRemark>>>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly sys: Maybe<contentfulTerminBeschreibungTextNodeSys>;
};

type contentfulTerminBeschreibungTextNodeConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<contentfulTerminBeschreibungTextNodeEdge>;
  readonly group: ReadonlyArray<contentfulTerminBeschreibungTextNodeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<contentfulTerminBeschreibungTextNode>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type contentfulTerminBeschreibungTextNodeConnection_distinctArgs = {
  field: contentfulTerminBeschreibungTextNodeFieldSelector;
};


type contentfulTerminBeschreibungTextNodeConnection_groupArgs = {
  field: contentfulTerminBeschreibungTextNodeFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type contentfulTerminBeschreibungTextNodeConnection_maxArgs = {
  field: contentfulTerminBeschreibungTextNodeFieldSelector;
};


type contentfulTerminBeschreibungTextNodeConnection_minArgs = {
  field: contentfulTerminBeschreibungTextNodeFieldSelector;
};


type contentfulTerminBeschreibungTextNodeConnection_sumArgs = {
  field: contentfulTerminBeschreibungTextNodeFieldSelector;
};

type contentfulTerminBeschreibungTextNodeEdge = {
  readonly next: Maybe<contentfulTerminBeschreibungTextNode>;
  readonly node: contentfulTerminBeschreibungTextNode;
  readonly previous: Maybe<contentfulTerminBeschreibungTextNode>;
};

type contentfulTerminBeschreibungTextNodeFieldSelector = {
  readonly beschreibung: InputMaybe<FieldSelectorEnum>;
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly sys: InputMaybe<contentfulTerminBeschreibungTextNodeSysFieldSelector>;
};

type contentfulTerminBeschreibungTextNodeFilterInput = {
  readonly beschreibung: InputMaybe<StringQueryOperatorInput>;
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly sys: InputMaybe<contentfulTerminBeschreibungTextNodeSysFilterInput>;
};

type contentfulTerminBeschreibungTextNodeFilterListInput = {
  readonly elemMatch: InputMaybe<contentfulTerminBeschreibungTextNodeFilterInput>;
};

type contentfulTerminBeschreibungTextNodeGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<contentfulTerminBeschreibungTextNodeEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<contentfulTerminBeschreibungTextNodeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<contentfulTerminBeschreibungTextNode>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type contentfulTerminBeschreibungTextNodeGroupConnection_distinctArgs = {
  field: contentfulTerminBeschreibungTextNodeFieldSelector;
};


type contentfulTerminBeschreibungTextNodeGroupConnection_groupArgs = {
  field: contentfulTerminBeschreibungTextNodeFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type contentfulTerminBeschreibungTextNodeGroupConnection_maxArgs = {
  field: contentfulTerminBeschreibungTextNodeFieldSelector;
};


type contentfulTerminBeschreibungTextNodeGroupConnection_minArgs = {
  field: contentfulTerminBeschreibungTextNodeFieldSelector;
};


type contentfulTerminBeschreibungTextNodeGroupConnection_sumArgs = {
  field: contentfulTerminBeschreibungTextNodeFieldSelector;
};

type contentfulTerminBeschreibungTextNodeSortInput = {
  readonly beschreibung: InputMaybe<SortOrderEnum>;
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly sys: InputMaybe<contentfulTerminBeschreibungTextNodeSysSortInput>;
};

type contentfulTerminBeschreibungTextNodeSys = {
  readonly type: Maybe<Scalars['String']>;
};

type contentfulTerminBeschreibungTextNodeSysFieldSelector = {
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type contentfulTerminBeschreibungTextNodeSysFilterInput = {
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type contentfulTerminBeschreibungTextNodeSysSortInput = {
  readonly type: InputMaybe<SortOrderEnum>;
};

type contentfulTerminButtonTextNode = Node & {
  readonly button: Maybe<Scalars['String']>;
  /** Returns the first child node of type MarkdownRemark or null if there are no children of given type on this node */
  readonly childMarkdownRemark: Maybe<MarkdownRemark>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type MarkdownRemark */
  readonly childrenMarkdownRemark: Maybe<ReadonlyArray<Maybe<MarkdownRemark>>>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly sys: Maybe<contentfulTerminButtonTextNodeSys>;
};

type contentfulTerminButtonTextNodeConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<contentfulTerminButtonTextNodeEdge>;
  readonly group: ReadonlyArray<contentfulTerminButtonTextNodeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<contentfulTerminButtonTextNode>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type contentfulTerminButtonTextNodeConnection_distinctArgs = {
  field: contentfulTerminButtonTextNodeFieldSelector;
};


type contentfulTerminButtonTextNodeConnection_groupArgs = {
  field: contentfulTerminButtonTextNodeFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type contentfulTerminButtonTextNodeConnection_maxArgs = {
  field: contentfulTerminButtonTextNodeFieldSelector;
};


type contentfulTerminButtonTextNodeConnection_minArgs = {
  field: contentfulTerminButtonTextNodeFieldSelector;
};


type contentfulTerminButtonTextNodeConnection_sumArgs = {
  field: contentfulTerminButtonTextNodeFieldSelector;
};

type contentfulTerminButtonTextNodeEdge = {
  readonly next: Maybe<contentfulTerminButtonTextNode>;
  readonly node: contentfulTerminButtonTextNode;
  readonly previous: Maybe<contentfulTerminButtonTextNode>;
};

type contentfulTerminButtonTextNodeFieldSelector = {
  readonly button: InputMaybe<FieldSelectorEnum>;
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly sys: InputMaybe<contentfulTerminButtonTextNodeSysFieldSelector>;
};

type contentfulTerminButtonTextNodeFilterInput = {
  readonly button: InputMaybe<StringQueryOperatorInput>;
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly sys: InputMaybe<contentfulTerminButtonTextNodeSysFilterInput>;
};

type contentfulTerminButtonTextNodeFilterListInput = {
  readonly elemMatch: InputMaybe<contentfulTerminButtonTextNodeFilterInput>;
};

type contentfulTerminButtonTextNodeGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<contentfulTerminButtonTextNodeEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<contentfulTerminButtonTextNodeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<contentfulTerminButtonTextNode>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type contentfulTerminButtonTextNodeGroupConnection_distinctArgs = {
  field: contentfulTerminButtonTextNodeFieldSelector;
};


type contentfulTerminButtonTextNodeGroupConnection_groupArgs = {
  field: contentfulTerminButtonTextNodeFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type contentfulTerminButtonTextNodeGroupConnection_maxArgs = {
  field: contentfulTerminButtonTextNodeFieldSelector;
};


type contentfulTerminButtonTextNodeGroupConnection_minArgs = {
  field: contentfulTerminButtonTextNodeFieldSelector;
};


type contentfulTerminButtonTextNodeGroupConnection_sumArgs = {
  field: contentfulTerminButtonTextNodeFieldSelector;
};

type contentfulTerminButtonTextNodeSortInput = {
  readonly button: InputMaybe<SortOrderEnum>;
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly sys: InputMaybe<contentfulTerminButtonTextNodeSysSortInput>;
};

type contentfulTerminButtonTextNodeSys = {
  readonly type: Maybe<Scalars['String']>;
};

type contentfulTerminButtonTextNodeSysFieldSelector = {
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type contentfulTerminButtonTextNodeSysFilterInput = {
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type contentfulTerminButtonTextNodeSysSortInput = {
  readonly type: InputMaybe<SortOrderEnum>;
};

type contentfulUebermichTextTextNode = Node & {
  /** Returns the first child node of type MarkdownRemark or null if there are no children of given type on this node */
  readonly childMarkdownRemark: Maybe<MarkdownRemark>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type MarkdownRemark */
  readonly childrenMarkdownRemark: Maybe<ReadonlyArray<Maybe<MarkdownRemark>>>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly sys: Maybe<contentfulUebermichTextTextNodeSys>;
  readonly text: Maybe<Scalars['String']>;
};

type contentfulUebermichTextTextNodeConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<contentfulUebermichTextTextNodeEdge>;
  readonly group: ReadonlyArray<contentfulUebermichTextTextNodeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<contentfulUebermichTextTextNode>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type contentfulUebermichTextTextNodeConnection_distinctArgs = {
  field: contentfulUebermichTextTextNodeFieldSelector;
};


type contentfulUebermichTextTextNodeConnection_groupArgs = {
  field: contentfulUebermichTextTextNodeFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type contentfulUebermichTextTextNodeConnection_maxArgs = {
  field: contentfulUebermichTextTextNodeFieldSelector;
};


type contentfulUebermichTextTextNodeConnection_minArgs = {
  field: contentfulUebermichTextTextNodeFieldSelector;
};


type contentfulUebermichTextTextNodeConnection_sumArgs = {
  field: contentfulUebermichTextTextNodeFieldSelector;
};

type contentfulUebermichTextTextNodeEdge = {
  readonly next: Maybe<contentfulUebermichTextTextNode>;
  readonly node: contentfulUebermichTextTextNode;
  readonly previous: Maybe<contentfulUebermichTextTextNode>;
};

type contentfulUebermichTextTextNodeFieldSelector = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly sys: InputMaybe<contentfulUebermichTextTextNodeSysFieldSelector>;
  readonly text: InputMaybe<FieldSelectorEnum>;
};

type contentfulUebermichTextTextNodeFilterInput = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly sys: InputMaybe<contentfulUebermichTextTextNodeSysFilterInput>;
  readonly text: InputMaybe<StringQueryOperatorInput>;
};

type contentfulUebermichTextTextNodeFilterListInput = {
  readonly elemMatch: InputMaybe<contentfulUebermichTextTextNodeFilterInput>;
};

type contentfulUebermichTextTextNodeGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<contentfulUebermichTextTextNodeEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<contentfulUebermichTextTextNodeGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<contentfulUebermichTextTextNode>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type contentfulUebermichTextTextNodeGroupConnection_distinctArgs = {
  field: contentfulUebermichTextTextNodeFieldSelector;
};


type contentfulUebermichTextTextNodeGroupConnection_groupArgs = {
  field: contentfulUebermichTextTextNodeFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type contentfulUebermichTextTextNodeGroupConnection_maxArgs = {
  field: contentfulUebermichTextTextNodeFieldSelector;
};


type contentfulUebermichTextTextNodeGroupConnection_minArgs = {
  field: contentfulUebermichTextTextNodeFieldSelector;
};


type contentfulUebermichTextTextNodeGroupConnection_sumArgs = {
  field: contentfulUebermichTextTextNodeFieldSelector;
};

type contentfulUebermichTextTextNodeSortInput = {
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly sys: InputMaybe<contentfulUebermichTextTextNodeSysSortInput>;
  readonly text: InputMaybe<SortOrderEnum>;
};

type contentfulUebermichTextTextNodeSys = {
  readonly type: Maybe<Scalars['String']>;
};

type contentfulUebermichTextTextNodeSysFieldSelector = {
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type contentfulUebermichTextTextNodeSysFilterInput = {
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type contentfulUebermichTextTextNodeSysSortInput = {
  readonly type: InputMaybe<SortOrderEnum>;
};

type AnfahrtQueryQueryVariables = Exact<{ [key: string]: never; }>;


type AnfahrtQueryQuery = { readonly contentfulAnfahrt: { readonly ueberschrift: string | null, readonly beschreibung: { readonly beschreibung: string | null } | null } | null };

type BlogpostIndexQueryQueryVariables = Exact<{ [key: string]: never; }>;


type BlogpostIndexQueryQuery = { readonly contentfulAktuelles: { readonly ueberschrift: string | null, readonly beschreibung: { readonly beschreibung: string | null } | null } | null, readonly allContentfulBlogpost: { readonly edges: ReadonlyArray<{ readonly node: { readonly ueberschrift: string | null, readonly datum: string | null, readonly bild: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData | null } | null, readonly text: { readonly text: string | null } | null } }> } };

type BlogpostQueryQueryVariables = Exact<{ [key: string]: never; }>;


type BlogpostQueryQuery = { readonly allContentfulBlogpost: { readonly edges: ReadonlyArray<{ readonly node: { readonly ueberschrift: string | null, readonly datum: string | null, readonly bild: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData | null } | null, readonly text: { readonly text: string | null } | null } }> } };

type BlogQueryQueryVariables = Exact<{ [key: string]: never; }>;


type BlogQueryQuery = { readonly contentfulBlog: { readonly ueberschrift: string | null, readonly beschreibung: { readonly beschreibung: string | null } | null } | null };

type FooterQueryQueryVariables = Exact<{ [key: string]: never; }>;


type FooterQueryQuery = { readonly contentfulFooter: { readonly karte: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData | null, readonly title: string | null } | null } | null, readonly contentfulAdresse: { readonly adresse: { readonly raw: string | null } | null } | null };

type GatsbyImageSharpFixedFragment = { readonly base64: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_noBase64Fragment = { readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_tracedSVGFragment = { readonly tracedSVG: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_withWebpFragment = { readonly base64: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFixed_withWebp_noBase64Fragment = { readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFixed_withWebp_tracedSVGFragment = { readonly tracedSVG: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFluidFragment = { readonly base64: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_noBase64Fragment = { readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_tracedSVGFragment = { readonly tracedSVG: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_withWebpFragment = { readonly base64: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluid_withWebp_noBase64Fragment = { readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluid_withWebp_tracedSVGFragment = { readonly tracedSVG: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluidLimitPresentationSizeFragment = { readonly maxHeight: number, readonly maxWidth: number };

type ImpressumQueryQueryVariables = Exact<{ [key: string]: never; }>;


type ImpressumQueryQuery = { readonly contentfulImpressum: { readonly titel: string | null, readonly rechtlichesUeberschrift: string | null, readonly info: { readonly raw: string | null } | null, readonly rechtliches: { readonly childMarkdownRemark: { readonly html: string | null } | null } | null } | null };

type KontaktQueryQueryVariables = Exact<{ [key: string]: never; }>;


type KontaktQueryQuery = { readonly contentfulKontakt: { readonly ueberschrift: string | null, readonly beschreibung: { readonly beschreibung: string | null } | null } | null };

type LeistungenQueryQueryVariables = Exact<{ [key: string]: never; }>;


type LeistungenQueryQuery = { readonly allContentfulLeistungenpost: { readonly edges: ReadonlyArray<{ readonly node: { readonly ueberschrift: string | null, readonly text: { readonly text: string | null } | null } }> }, readonly contentfulLeistungen: { readonly ueberschrift: string | null, readonly beschreibung: { readonly beschreibung: string | null } | null } | null };

type MenueQueryQueryVariables = Exact<{ [key: string]: never; }>;


type MenueQueryQuery = { readonly contentfulLayout: { readonly menue1: string | null, readonly menue2: string | null, readonly menue3: string | null, readonly menue4: string | null, readonly menue5: string | null } | null };

type NewsletterQueryQueryVariables = Exact<{ [key: string]: never; }>;


type NewsletterQueryQuery = { readonly contentfulNewsletter: { readonly titel: string | null, readonly text: { readonly text: string | null } | null } | null };

type SchwerpunkteQueryQueryVariables = Exact<{ [key: string]: never; }>;


type SchwerpunkteQueryQuery = { readonly contentfulSchwerpunkte: { readonly ueberschrift: string | null, readonly beschreibung: { readonly beschreibung: string | null } | null } | null, readonly allContentfulSchwerpunktepost: { readonly edges: ReadonlyArray<{ readonly node: { readonly ueberschrift: string | null, readonly bild: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData | null } | null, readonly text: { readonly text: string | null } | null } }> } };

type StartbildQueryQueryVariables = Exact<{ [key: string]: never; }>;


type StartbildQueryQuery = { readonly contentfulStartbild: { readonly bild: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData | null, readonly title: string | null } | null, readonly text: { readonly text: string | null } | null } | null };

type TerminQueryQueryVariables = Exact<{ [key: string]: never; }>;


type TerminQueryQuery = { readonly contentfulTermin: { readonly ueberschrift: string | null, readonly button1: string | null, readonly button2: string | null, readonly button3: string | null, readonly beschreibung: { readonly beschreibung: string | null } | null, readonly button: { readonly button: string | null } | null } | null };

type UebermichQueryQueryVariables = Exact<{ [key: string]: never; }>;


type UebermichQueryQuery = { readonly contentfulUebermich: { readonly ueberschrift: string | null, readonly bild: { readonly gatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData | null, readonly title: string | null } | null, readonly text: { readonly text: string | null } | null } | null };


}
